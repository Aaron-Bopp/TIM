/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const LINKED_TO = " => ";
const LINKED_FROM = " <= ";
const LINKED_CN = "None";
const LINKED_BOTH = " <=> ";
const MOC_VIEW_TYPE = "map-of-content";

class FileItem {
    constructor(path, extension, links_to, linked_from, distance_from_CN) {
        this.path = path;
        this.extension = extension;
        this.links_to = links_to;
        this.linked_from = linked_from;
        this.distance_from_CN = distance_from_CN;
    }
}

const Log = (message) => {
};
const RemoveExtension = (path, extension = ".md") => {
    if (path.endsWith(extension)) {
        return path.slice(0, -extension.length);
    }
    return path;
};
/**@returns True if CTRL / Meta is pressed */
const IsCtrlPressed = (e) => {
    return window.navigator.userAgent.includes("Macintosh") ? e.metaKey : e.ctrlKey;
};
/**  Returns only the name of the actual file  */
const FileNameFromPath = (path) => {
    return path.split("/").last();
};
/**  return the full path if there are two or more notes with the same filename and extension, else only the filename  */
const GetDisplayName = (path, db) => {
    let file_name = FileNameFromPath(path);
    let display_name = null;
    if (db.duplicate_file_status.get(file_name)) {
        display_name = RemoveExtension(path);
    }
    else {
        display_name = RemoveExtension(file_name);
    }
    return display_name;
};
const NavigateToFile = async (app, path, event) => {
    let file = app.metadataCache.getFirstLinkpathDest(path, "/");
    if (!file)
        return;
    IsCtrlPressed(event)
        ? app.workspace.splitActiveLeaf()
        : app.workspace.getUnpinnedLeaf();
    app.workspace.openLinkText(path, "/");
};
/** Get the paths of all folders in the vault, empty or not */
const GetAllFolders = (app) => {
    let vault_files = app.vault.getFiles();
    let all_folder_paths = [];
    vault_files.forEach((file) => {
        // cut of filename
        let folder_path = file.path.slice(0, file.path.length - (file.basename.length + file.extension.length + 1));
        // add path to collected paths
        if (folder_path.length && !all_folder_paths.contains(folder_path)) {
            all_folder_paths.push(folder_path);
        }
    });
    // store all parent folder paths as unique paths if they aren't yet because they don't include any notes directly
    all_folder_paths.forEach((path) => {
        let all_sub_paths = path.split("/");
        for (let i = 1; i < all_sub_paths.length - 1; i++) {
            let partial_path = all_sub_paths.slice(0, i).join("/") + "/";
            if (!all_folder_paths.contains(partial_path)) {
                all_folder_paths.push(partial_path);
            }
        }
    });
    return all_folder_paths;
};

class DBManager {
    constructor(plugin) {
        this.database_updating = true;
        this.app = plugin.app;
        this.plugin = plugin;
        this.settings = plugin.settings;
        this.all_paths = [];
        this.db = {};
        this.db_entries = Object.entries(this.db);
    }
    init() {
    }
    async update(silent = false) {
        this.database_complete = false;
        this.database_updating = true;
        try {
            if (this.plugin.CNexists()) {
                let start_tmsp = Date.now();
                if (!silent) {
                    new obsidian.Notice('Updating the Map of Content...');
                }
                Log("Updating the Map of Content...");
                await new Promise(r => setTimeout(r, 0));
                this.updateDB();
                await new Promise(r => setTimeout(r, 0));
                this.get_paths_ran = 0;
                this.updateDepthInformation();
                this.all_paths.length = 0;
                let path_so_far = { all_members: [this.settings.get("CN_path")], items: [[this.settings.get("CN_path"), LINKED_CN]] };
                await new Promise(r => setTimeout(r, 0));
                this.followPaths(path_so_far);
                await new Promise(r => setTimeout(r, 0));
                this.updateDescendants();
                if (!silent) {
                    new obsidian.Notice("Update complete");
                }
                let end_tmsp = Date.now();
                Log("Update complete, Took " + String((end_tmsp - start_tmsp) / 1000));
                this.database_complete = true;
            }
        }
        finally {
            this.database_updating = false;
            this.plugin.rerender();
        }
    }
    getNoteFromPath(path) {
        if (path in this.db) {
            return this.db[path];
        }
    }
    /** return all paths that include a certain note. Only return the path up to that note*/
    findPaths(path) {
        let filtered_paths = [];
        let filtered_paths_json = JSON.stringify(filtered_paths);
        this.all_paths.forEach((p) => {
            if (p.all_members.includes(path)) {
                if (p.all_members.last() == path) {
                    filtered_paths.push(p);
                }
                else {
                    let index = p.all_members.indexOf(path) + 1;
                    let chopped_of_path = p.items.slice(0, index);
                    if (!filtered_paths_json.includes(JSON.stringify(chopped_of_path))) {
                        // return a path element containing only the parts of the path information up to the note in question
                        filtered_paths.push({ all_members: p.all_members.slice(0, index), items: p.items.slice(0, index) });
                        filtered_paths_json = JSON.stringify(filtered_paths);
                    }
                }
            }
        });
        return filtered_paths;
    }
    all_notes() {
        return this.db_entries.map(([key, value]) => value);
    }
    updateDB() {
        // delete old state 
        for (let note in this.db) {
            delete this.db[note];
        }
        // read all files
        let vault_files = this.app.vault.getFiles();
        Log("Total number of files in vault: " + String(vault_files.length));
        vault_files.forEach((file) => {
            if (!this.settings.isExludedFile(file)) {
                this.db[file.path] = new FileItem(file.path, file.extension, [], [], null);
            }
        });
        this.db_entries = Object.entries(this.db);
        this.db_keys = Object.keys(this.db);
        this.duplicate_file_status = new Map();
        this.all_notes().forEach((note) => {
            let file_name = FileNameFromPath(note.path);
            if (this.duplicate_file_status.has(file_name)) { // If the file name is encountered twice or more, set it's duplicate status to true
                this.duplicate_file_status.set(file_name, true);
            }
            else {
                this.duplicate_file_status.set(file_name, false);
            }
        });
        // update the db_entries representation of the db
        this.db_entries = Object.entries(this.db);
        this.all_notes().forEach((note) => {
            if (note.extension != "md") {
                // skip if it's not an md file. Other file types can't link to anything
                return;
            }
            //  save all the links this note links to
            let this_links_to = [];
            let linkcache = this.app.metadataCache.getCache(note.path).links;
            if (linkcache) {
                linkcache.forEach((val) => {
                    // check if the link is valid 
                    let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                    //TODO is it neccessary to avoid including links multiple times? maybe they can't even be duplicate in the linkcache
                    if (link_dest && !this_links_to.includes(link_dest.path) && this.db_keys.contains(link_dest.path)) {
                        this_links_to.push(link_dest.path);
                    }
                });
            }
            let transclusions = this.app.metadataCache.getCache(note.path).embeds;
            if (transclusions) {
                transclusions.forEach((val) => {
                    // check if the link is valid 
                    let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                    if (link_dest && !this_links_to.includes(link_dest.path) && this.db_keys.contains(link_dest.path)) {
                        this_links_to.push(link_dest.path);
                    }
                });
            }
            if (!this_links_to.length)
                return; // no links
            // save links_to information to db
            this.db[note.path].links_to = this_links_to;
            // add a "linked_from" reference to the db entry of all notes that are linked to from this note
            this_links_to.forEach((link) => {
                if (!this.db[link].linked_from.includes(note.path)) {
                    this.db[link].linked_from.push(note.path);
                }
            });
        });
    }
    /** starting from the CN, follow all paths and store the information on how long the shortest path to each note is*/
    updateDepthInformation() {
        Log("Analyzing distance from Central Note. CN path: " + this.settings.get("CN_path"));
        let depth = 0; // distance from the CN. starts at zero 
        let checked_links = []; // all the notes that have already been visited. dont visit them again to prevent endless loops
        let do_continue = true;
        // start at the the CN
        let links = [this.settings.get("CN_path")];
        while (do_continue) {
            let next_links = [];
            links.forEach((link) => {
                // extract all active and passive connections (linked to or from) for the next iteration of link-following
                let note = this.getNoteFromPath(link);
                note.links_to.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                note.linked_from.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                // update the info on how far the note is removed from CN
                if (note.distance_from_CN == null || note.distance_from_CN > depth) {
                    note.distance_from_CN = depth;
                }
                checked_links.push(link);
            });
            links = next_links.slice();
            if (links.length == 0) {
                do_continue = false;
            }
            depth += 1;
        }
    }
    /**
     * Recursive function that follows all possible paths from the CN that aren't unreasonably long or circular and stores them
     * @param path_so_far the path to be extended in this iteration
     */
    followPaths(path_so_far) {
        // logging
        this.get_paths_ran += 1;
        if (this.get_paths_ran % 10000 == 0) {
            Log("get paths ran " + String(this.get_paths_ran));
        }
        let note = this.db[path_so_far.all_members.last()];
        let all_members = path_so_far.all_members;
        let items = path_so_far.items;
        let new_paths_to_follow = [];
        let note_links_to = note.links_to.slice();
        let note_linked_from = note.linked_from.slice();
        note_links_to.forEach((link) => {
            // check whether the linked note also links to the current note
            let linked_to_or_both_ways = LINKED_TO;
            if (note_linked_from.contains(link)) {
                // remove it from the passive links to be followed later
                let index = note_linked_from.indexOf(link, 0);
                note_linked_from.splice(index, 1);
                linked_to_or_both_ways = LINKED_BOTH;
            }
            let new_path = { all_members: all_members.concat(link), items: items.concat([[link, linked_to_or_both_ways]]) };
            new_paths_to_follow.push(new_path);
        });
        note_linked_from.forEach((link) => {
            let new_path = { all_members: all_members.concat(link), items: items.concat([[link, LINKED_FROM]]) };
            new_paths_to_follow.push(new_path);
        });
        let called_itself = false; // whether the function called itself
        // function calls itself to explore every new path  
        new_paths_to_follow.forEach((path) => {
            // the path without the next note that is to be explored
            let all_items_so_far = path.all_members.slice(0, -1);
            let last_item_path = path.all_members.last();
            let last_item = this.getNoteFromPath(last_item_path);
            // stop if this note is already part of the explored path
            if (all_items_so_far.includes(last_item_path)) {
                return;
            }
            // stop if the path meanders too much 
            if ((path.all_members.length - last_item.distance_from_CN) > 1) {
                return;
            }
            this.followPaths(path);
            called_itself = true;
        });
        if (!called_itself) {
            // only add the path if it does't lead anywhere else. No need to have paths that are parts of other paths
            this.all_paths.push(path_so_far);
        }
    }
    /** for every note, store all notes that come right after it in any path. this is for generating the Map Of Content later on */
    updateDescendants() {
        // delete old Information
        this.descendants = new Map();
        this.all_paths.forEach((p) => {
            p.all_members.forEach((note_path, index) => {
                // make sure it's not the last member of the path
                if (!(index == p.all_members.length - 1)) {
                    // create entry in descendants if it doesn't exist
                    if (!this.descendants.has(note_path)) {
                        this.descendants.set(note_path, []);
                    }
                    let next_path_member = p.all_members[index + 1];
                    // add note as descendant if it isn't already stored in array
                    if (!this.descendants.get(note_path).includes(next_path_member)) {
                        this.descendants.set(note_path, this.descendants.get(note_path).concat(next_path_member));
                    }
                }
            });
        });
    }
    getLinksFromNote(path, contained_in_db = false) {
        let linkcache = this.app.metadataCache.getCache(path).links;
        let all_links = [];
        if (linkcache) {
            linkcache.forEach((val) => {
                // check if the link is valid 
                let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                //TODO is it neccessary to avoid including links multiple times? maybe they can't even be duplicate in the linkcache
                if (link_dest && !all_links.includes(link_dest.path) && (!contained_in_db || this.db_keys.contains(link_dest.path))) {
                    all_links.push(link_dest.path);
                }
            });
        }
        return all_links;
    }
}

function noop() { }
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root.host) {
        return root;
    }
    return document;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.1' }, detail), true));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

/* src/svelte/NoLinkImage.svelte generated by Svelte v3.42.1 */

const file$6 = "src/svelte/NoLinkImage.svelte";

function add_css$6(target) {
	append_styles(target, "svelte-1ln8ix3", "div#broken-link-container.svelte-1ln8ix3{position:fixed;bottom:5%;width:100%;height:25%;max-height:200px;align-content:center}svg.svelte-1ln8ix3{display:block;width:100%;height:100%;opacity:60%;position:relative;margin-left:auto;margin-right:auto}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9MaW5rSW1hZ2Uuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTBEQSxHQUFHLHNCQUFzQixlQUFDLENBQUEsQUFDbEIsUUFBUSxDQUFFLEtBQUssQ0FDZixNQUFNLENBQUUsRUFBRSxDQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLEdBQUcsQ0FDWCxVQUFVLENBQUUsS0FBSyxDQUNqQixhQUFhLENBQUUsTUFBTSxBQUN6QixDQUFBLEFBQ0EsR0FBRyxlQUFFLENBQUEsQUFDRCxPQUFPLENBQUUsS0FBSyxDQUNkLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixPQUFPLENBQUUsR0FBRyxDQUNaLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFlBQVksQ0FBRSxJQUFJLEFBQ3RCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiTm9MaW5rSW1hZ2Uuc3ZlbHRlIl19 */");
}

function create_fragment$6(ctx) {
	let div;
	let svg;
	let g;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let path6;
	let path7;
	let path8;
	let path9;
	let path10;
	let path11;
	let path12;
	let path13;

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			path8 = svg_element("path");
			path9 = svg_element("path");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			path13 = svg_element("path");
			set_style(path0, "fill", "#B3404A");
			attr_dev(path0, "d", "M383.112,223.342c-3.162,0-6.347-1.034-9.008-3.162c-6.227-4.981-7.238-14.067-2.257-20.294\n\t\tl23.098-28.877c4.982-6.226,14.067-7.238,20.294-2.257c6.227,4.981,7.238,14.067,2.257,20.294l-23.098,28.877\n\t\tC391.545,221.487,387.348,223.342,383.112,223.342z");
			add_location(path0, file$6, 6, 1, 315);
			set_style(path1, "fill", "#B3404A");
			attr_dev(path1, "d", "M435.095,270.439h-37.537c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th37.537c7.973,0,14.438,6.465,14.438,14.438C449.533,263.973,443.069,270.439,435.095,270.439z");
			add_location(path1, file$6, 9, 1, 599);
			set_style(path2, "fill", "#B3404A");
			attr_dev(path2, "d", "M406.229,346.41c-4.237,0-8.433-1.854-11.285-5.42l-23.098-28.877\n\t\tc-4.98-6.227-3.97-15.311,2.257-20.294c6.228-4.98,15.313-3.969,20.294,2.257l23.098,28.877c4.98,6.227,3.97,15.311-2.257,20.294\n\t\tC412.576,345.376,409.393,346.41,406.229,346.41z");
			add_location(path2, file$6, 11, 1, 824);
			set_style(path3, "fill", "#B3404A");
			attr_dev(path3, "d", "M128.887,223.342c-4.237,0-8.433-1.854-11.285-5.42l-23.098-28.877\n\t\tc-4.98-6.227-3.97-15.311,2.257-20.294c6.228-4.981,15.311-3.97,20.294,2.257l23.098,28.877c4.98,6.227,3.97,15.311-2.257,20.294\n\t\tC135.232,222.31,132.049,223.342,128.887,223.342z");
			add_location(path3, file$6, 14, 1, 1100);
			set_style(path4, "fill", "#B3404A");
			attr_dev(path4, "d", "M114.44,270.439H76.904c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th37.537c7.973,0,14.438,6.465,14.438,14.438C128.878,263.973,122.413,270.439,114.44,270.439z");
			add_location(path4, file$6, 17, 1, 1378);
			set_style(path5, "fill", "#B3404A");
			attr_dev(path5, "d", "M105.769,346.41c-3.162,0-6.347-1.034-9.008-3.162c-6.227-4.981-7.238-14.067-2.257-20.294\n\t\tl23.098-28.877c4.982-6.226,14.067-7.236,20.294-2.257c6.227,4.981,7.238,14.067,2.257,20.294l-23.098,28.877\n\t\tC114.202,344.553,110.004,346.41,105.769,346.41z");
			add_location(path5, file$6, 19, 1, 1600);
			set_style(path6, "fill", "#B3404A");
			attr_dev(path6, "d", "M471.123,176.32c-7.973,0-14.438-6.465-14.438-14.438v-53.826c0-29.082-23.661-52.741-52.741-52.741\n\t\th-24.949c-7.973,0-14.438-6.465-14.438-14.438s6.465-14.438,14.438-14.438h24.949c45.004,0,81.617,36.613,81.617,81.617v53.826\n\t\tC485.561,169.855,479.096,176.32,471.123,176.32z");
			add_location(path6, file$6, 22, 1, 1881);
			set_style(path7, "fill", "#B3404A");
			attr_dev(path7, "d", "M40.877,176.32c-7.973,0-14.438-6.465-14.438-14.438v-53.826c0-45.004,36.613-81.617,81.617-81.617\n\t\th24.948c7.973,0,14.438,6.465,14.438,14.438s-6.465,14.438-14.438,14.438h-24.948c-29.082,0-52.741,23.661-52.741,52.741v53.826\n\t\tC55.315,169.855,48.85,176.32,40.877,176.32z");
			add_location(path7, file$6, 25, 1, 2188);
			set_style(path8, "fill", "#B3404A");
			attr_dev(path8, "d", "M403.943,485.561h-24.948c-7.973,0-14.438-6.465-14.438-14.438c0-7.973,6.465-14.438,14.438-14.438\n\t\th24.948c29.082,0,52.741-23.661,52.741-52.741v-53.826c0-7.973,6.465-14.438,14.438-14.438c7.973,0,14.438,6.465,14.438,14.438\n\t\tv53.826C485.561,448.947,448.947,485.561,403.943,485.561z");
			add_location(path8, file$6, 28, 1, 2491);
			set_style(path9, "fill", "#B3404A");
			attr_dev(path9, "d", "M133.005,485.561h-24.948c-45.004,0-81.617-36.613-81.617-81.617v-53.826\n\t\tc0-7.973,6.465-14.438,14.438-14.438s14.438,6.465,14.438,14.438v53.826c0,29.082,23.661,52.741,52.741,52.741h24.948\n\t\tc7.973,0,14.438,6.465,14.438,14.438C147.442,479.096,140.979,485.561,133.005,485.561z");
			add_location(path9, file$6, 31, 1, 2806);
			add_location(g, file$6, 5, 0, 310);
			set_style(path10, "fill", "#EBAFAE");
			attr_dev(path10, "d", "M202.039,208.49c12.894,0,23.349-10.453,23.349-23.349V91.748c0-16.593,14.019-30.612,30.612-30.612\n\tc16.593,0,30.612,14.019,30.612,30.612v93.395c0,12.894,10.453,23.349,23.349,23.349l0,0c12.894,0,23.349-10.453,23.349-23.349\n\tV91.748c0-42.521-34.789-77.31-77.31-77.31l0,0c-42.521,0-77.31,34.789-77.31,77.31v93.395\n\tC178.69,198.037,189.143,208.49,202.039,208.49L202.039,208.49z");
			add_location(path10, file$6, 35, 0, 3119);
			set_style(path11, "fill", "#B1404A");
			attr_dev(path11, "d", "M309.961,222.928c-20.837,0-37.787-16.95-37.787-37.787V91.748c0-8.616-7.558-16.175-16.175-16.175\n\tc-8.616,0-16.175,7.558-16.175,16.175v93.395c0,20.837-16.95,37.787-37.787,37.787s-37.787-16.95-37.787-37.787V91.748\n\tC164.252,41.158,205.409,0,256,0s91.748,41.158,91.748,91.748v93.395C347.746,205.978,330.796,222.928,309.961,222.928z M256,46.698\n\tc24.42,0,45.05,20.63,45.05,45.05v93.395c0,4.913,3.998,8.911,8.911,8.911s8.911-3.998,8.911-8.911V91.748\n\tc0-34.668-28.204-62.872-62.872-62.872c-34.668,0-62.872,28.204-62.872,62.872v93.395c0,4.913,3.998,8.911,8.911,8.911\n\ts8.911-3.998,8.911-8.911V91.748C210.948,67.328,231.578,46.698,256,46.698z");
			add_location(path11, file$6, 39, 0, 3526);
			set_style(path12, "fill", "#EBAFAE");
			attr_dev(path12, "d", "M309.96,303.51c-12.894,0-23.349,10.453-23.349,23.349v93.395c0,16.593-14.019,30.612-30.612,30.612\n\tc-16.593,0-30.612-14.019-30.612-30.612v-93.395c0-12.894-10.453-23.349-23.349-23.349l0,0c-12.894,0-23.349,10.453-23.349,23.349\n\tv93.395c0,42.521,34.789,77.31,77.31,77.31l0,0c42.521,0,77.31-34.789,77.31-77.31v-93.395\n\tC333.309,313.963,322.856,303.51,309.96,303.51L309.96,303.51z");
			add_location(path12, file$6, 45, 0, 4196);
			set_style(path13, "fill", "#B1404A");
			attr_dev(path13, "d", "M256,512c-50.59,0-91.748-41.158-91.748-91.748v-93.395c0-20.837,16.95-37.787,37.787-37.787\n\ts37.787,16.95,37.787,37.787v93.395c0,8.616,7.558,16.175,16.175,16.175c8.616,0,16.175-7.558,16.175-16.175v-93.395\n\tc0-20.837,16.95-37.787,37.787-37.787s37.787,16.95,37.787,37.787v93.395C347.746,470.842,306.59,512,256,512z M202.039,317.947\n\tc-4.913,0-8.911,3.998-8.911,8.911v93.395c0,34.668,28.204,62.872,62.872,62.872c34.668,0,62.872-28.204,62.872-62.872v-93.395\n\tc0-4.913-3.998-8.911-8.911-8.911s-8.911,3.998-8.911,8.911v93.395c0,24.42-20.63,45.05-45.05,45.05s-45.05-20.63-45.05-45.05\n\tv-93.395C210.948,321.944,206.952,317.947,202.039,317.947z");
			add_location(path13, file$6, 49, 0, 4605);
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "id", "Layer_1");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "x", "0px");
			attr_dev(svg, "y", "0px");
			attr_dev(svg, "viewBox", "0 0 512 512");
			set_style(svg, "enable-background", "new 0 0 512 512");
			attr_dev(svg, "xml:space", "preserve");
			attr_dev(svg, "class", "svelte-1ln8ix3");
			add_location(svg, file$6, 3, 4, 95);
			attr_dev(div, "id", "broken-link-container");
			attr_dev(div, "class", "svelte-1ln8ix3");
			add_location(div, file$6, 1, 0, 2);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, g);
			append_dev(g, path0);
			append_dev(g, path1);
			append_dev(g, path2);
			append_dev(g, path3);
			append_dev(g, path4);
			append_dev(g, path5);
			append_dev(g, path6);
			append_dev(g, path7);
			append_dev(g, path8);
			append_dev(g, path9);
			append_dev(svg, path10);
			append_dev(svg, path11);
			append_dev(svg, path12);
			append_dev(svg, path13);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('NoLinkImage', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NoLinkImage> was created with unknown prop '${key}'`);
	});

	return [];
}

class NoLinkImage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, {}, add_css$6);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NoLinkImage",
			options,
			id: create_fragment$6.name
		});
	}
}

/* src/svelte/Descendants.svelte generated by Svelte v3.42.1 */
const file$5 = "src/svelte/Descendants.svelte";

function add_css$5(target) {
	append_styles(target, "svelte-19blxph", "a.link.svelte-19blxph.svelte-19blxph{cursor:pointer}ul.svelte-19blxph.svelte-19blxph{list-style:none;margin:0;padding:0}li.svelte-19blxph.svelte-19blxph{list-style:none;margin:0;padding:0}ul.svelte-19blxph.svelte-19blxph{padding-left:1em}li.svelte-19blxph.svelte-19blxph{padding-left:1em;border:5px dotted black;border-width:0 0 1px 1px}li.dark-mode.svelte-19blxph.svelte-19blxph{padding-left:1em;border:5px dotted lightgray;border-width:0 0 1px 1px}li.container.svelte-19blxph.svelte-19blxph{border-bottom:0px}li.svelte-19blxph p.svelte-19blxph{margin:0;position:relative;top:0em}li.svelte-19blxph ul.svelte-19blxph{border-top:1px dotted black;margin-left:-1em;padding-left:2em}li.dark-mode.svelte-19blxph ul.svelte-19blxph{border-top:1px dotted lightgray}ul li.svelte-19blxph:last-child ul.svelte-19blxph{border-left:none;margin-left:-17px}.expand-arrow.svelte-19blxph.svelte-19blxph{color:darkgrey}.expand-arrow.svelte-19blxph.svelte-19blxph:hover{color:gray}div.expand_button.svelte-19blxph.svelte-19blxph{display:inline}div.expand_button.svelte-19blxph svg.svg.svelte-19blxph{width:14px;height:14px;margin-top:5px}li.light-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph{fill:darkgrey}li.light-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph:hover{fill:gray}li.dark-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph{fill:gray}li.dark-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph:hover{fill:lightgray}div.expand_button.svelte-19blxph svg.svg.expanded.svelte-19blxph{transform:rotate(90deg)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzY2VuZGFudHMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXNHRSxDQUFDLEtBQUssOEJBQUMsQ0FBQSxBQUNMLE1BQU0sQ0FBRSxPQUFPLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDhCQUFDLENBQUEsQUFDRCxVQUFVLENBQUUsSUFBSSxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLEFBQ1osQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQUFDWixDQUFBLEFBRUEsRUFBRSw4QkFBQyxDQUFBLEFBQ0QsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFlBQVksQ0FBRSxHQUFHLENBQ2pCLE1BQU0sQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDeEIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQUFDM0IsQ0FBQSxBQUNBLEVBQUUsVUFBVSw4QkFBQyxDQUFBLEFBQ1gsWUFBWSxDQUFFLEdBQUcsQ0FDakIsTUFBTSxDQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUM1QixZQUFZLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxBQUMzQixDQUFBLEFBQ0EsRUFBRSxVQUFVLDhCQUFDLENBQUEsQUFDWCxhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxDQUFDLGVBQUMsQ0FBQSxBQUNILE1BQU0sQ0FBRSxDQUFDLENBQ1QsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLEdBQUcsQUFDVixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNKLFVBQVUsQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDNUIsV0FBVyxDQUFFLElBQUksQ0FDakIsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUseUJBQVUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNkLFVBQVUsQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQUFDbEMsQ0FBQSxBQUVBLEVBQUUsQ0FBQyxpQkFBRSxXQUFXLENBQUMsRUFBRSxlQUFDLENBQUEsQUFDbEIsV0FBVyxDQUFFLElBQUksQ0FDakIsV0FBVyxDQUFFLEtBQUssQUFDcEIsQ0FBQSxBQUVBLGFBQWEsOEJBQUMsQ0FBQSxBQUNaLEtBQUssQ0FBRSxRQUFRLEFBQ2pCLENBQUEsQUFFQSwyQ0FBYSxNQUFNLEFBQUMsQ0FBQSxBQUNsQixLQUFLLENBQUUsSUFBSSxBQUNiLENBQUEsQUFFQSxHQUFHLGNBQWMsOEJBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsTUFBTSxBQUNqQixDQUFBLEFBRUEsR0FBRyw2QkFBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDeEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxHQUFHLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDBCQUFXLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxJQUFJLGVBQUMsQ0FBQSxBQUN0QyxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsRUFBRSwwQkFBVyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDNUMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBRUEsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDckMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBQ0EsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDM0MsSUFBSSxDQUFFLFNBQVMsQUFDakIsQ0FBQSxBQUVBLEdBQUcsNkJBQWMsQ0FBQyxHQUFHLElBQUksU0FBUyxlQUFDLENBQUEsQUFDakMsU0FBUyxDQUFFLE9BQU8sS0FBSyxDQUFDLEFBQzFCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRGVzY2VuZGFudHMuc3ZlbHRlIl19 */");
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (45:0) {:else}
function create_else_block$1(ctx) {
	let li;
	let p;
	let t;
	let ul;
	let current;

	function select_block_type_1(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0) return create_if_block_2$1;
		return create_else_block_1$1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*children*/ ctx[7].length > 0 && /*expanded*/ ctx[6] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			li = element("li");
			p = element("p");
			if_block0.c();
			t = space();
			ul = element("ul");
			if (if_block1) if_block1.c();
			attr_dev(p, "class", "svelte-19blxph");
			add_location(p, file$5, 46, 4, 1185);
			attr_dev(ul, "class", "svelte-19blxph");
			add_location(ul, file$5, 77, 4, 2032);
			attr_dev(li, "class", "container " + /*dark_mode*/ ctx[8] + " svelte-19blxph");
			add_location(li, file$5, 45, 2, 1146);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, p);
			if_block0.m(p, null);
			append_dev(li, t);
			append_dev(li, ul);
			if (if_block1) if_block1.m(ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(p, null);
				}
			}

			if (/*children*/ ctx[7].length > 0 && /*expanded*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*children, expanded*/ 192) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(45:0) {:else}",
		ctx
	});

	return block;
}

// (43:0) {#if indentation == 0 && children.length == 0}
function create_if_block$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No descendants");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(43:0) {#if indentation == 0 && children.length == 0}",
		ctx
	});

	return block;
}

// (50:6) {:else}
function create_else_block_1$1(ctx) {
	let t0;
	let a;
	let t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t1;
	let mounted;
	let dispose;
	let if_block = /*children*/ ctx[7].length > 0 && create_if_block_3$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			attr_dev(a, "class", "link svelte-19blxph");
			attr_dev(a, "title", /*note_path*/ ctx[0]);
			add_location(a, file$5, 66, 8, 1791);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler_1*/ ctx[11], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*children*/ ctx[7].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$1(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*note_path, db*/ 3 && t1_value !== (t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t1, t1_value);

			if (dirty & /*note_path*/ 1) {
				attr_dev(a, "title", /*note_path*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(50:6) {:else}",
		ctx
	});

	return block;
}

// (48:6) {#if indentation == 0}
function create_if_block_2$1(ctx) {
	let t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*note_path, db*/ 3 && t_value !== (t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(48:6) {#if indentation == 0}",
		ctx
	});

	return block;
}

// (50:13) {#if children.length > 0}
function create_if_block_3$1(ctx) {
	let span;
	let div;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*expanded*/ ctx[6]) return create_if_block_4$1;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			span = element("span");
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "expand_button svelte-19blxph");
			add_location(div, file$5, 55, 13, 1434);
			attr_dev(span, "class", "expand-arrow svelte-19blxph");
			add_location(span, file$5, 50, 10, 1307);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, div);
			if_block.m(div, null);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[10], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(50:13) {#if children.length > 0}",
		ctx
	});

	return block;
}

// (61:14) {:else}
function create_else_block_2(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$5, 61, 18, 1665);
			attr_dev(svg, "class", "svg svelte-19blxph");
			add_location(svg, file$5, 60, 21, 1629);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(61:14) {:else}",
		ctx
	});

	return block;
}

// (57:14) {#if expanded}
function create_if_block_4$1(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$5, 58, 18, 1552);
			attr_dev(svg, "class", "svg expanded svelte-19blxph");
			add_location(svg, file$5, 57, 16, 1507);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(57:14) {#if expanded}",
		ctx
	});

	return block;
}

// (79:6) {#if children.length > 0 && expanded}
function create_if_block_1$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*children*/ ctx[7];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*db, app, children, indentation, view, expandMan*/ 190) {
				each_value = /*children*/ ctx[7];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(79:6) {#if children.length > 0 && expanded}",
		ctx
	});

	return block;
}

// (80:8) {#each children as child}
function create_each_block$4(ctx) {
	let descendants;
	let current;

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[1],
				app: /*app*/ ctx[4],
				note_path: /*child*/ ctx[13],
				indentation: /*indentation*/ ctx[2] + 1,
				view: /*view*/ ctx[3],
				expandMan: /*expandMan*/ ctx[5]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(descendants.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(descendants, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const descendants_changes = {};
			if (dirty & /*db*/ 2) descendants_changes.db = /*db*/ ctx[1];
			if (dirty & /*app*/ 16) descendants_changes.app = /*app*/ ctx[4];
			if (dirty & /*children*/ 128) descendants_changes.note_path = /*child*/ ctx[13];
			if (dirty & /*indentation*/ 4) descendants_changes.indentation = /*indentation*/ ctx[2] + 1;
			if (dirty & /*view*/ 8) descendants_changes.view = /*view*/ ctx[3];
			if (dirty & /*expandMan*/ 32) descendants_changes.expandMan = /*expandMan*/ ctx[5];
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(descendants, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(80:8) {#each children as child}",
		ctx
	});

	return block;
}

function create_fragment$5(ctx) {
	let svg;
	let symbol;
	let path;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0 && /*children*/ ctx[7].length == 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			symbol = svg_element("symbol");
			path = svg_element("path");
			t = space();
			if_block.c();
			if_block_anchor = empty();
			attr_dev(path, "d", "M22 12l-20 12 5-12-5-12z");
			add_location(path, file$5, 38, 5, 985);
			attr_dev(symbol, "id", "expand-arrow-svg");
			attr_dev(symbol, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol, "viewBox", "0 0 24 24");
			add_location(symbol, file$5, 34, 2, 883);
			attr_dev(svg, "display", "none");
			add_location(svg, file$5, 33, 0, 860);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, symbol);
			append_dev(symbol, path);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Descendants', slots, []);
	
	
	
	let { note_path } = $$props;
	let { db } = $$props;
	let { indentation } = $$props;
	let { view } = $$props;
	let { app } = $$props;
	let { expandMan } = $$props;
	expandMan.logIndent(indentation);

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	let expanded = indentation < expandMan.initial_max_indent
	;

	let children = [];

	if (db.descendants.has(note_path)) {
		children = db.descendants.get(note_path).slice();
	}

	function redraw(new_max_indent) {
		$$invalidate(6, expanded = indentation < new_max_indent );
	}

	function toggleExpand() {
		$$invalidate(6, expanded = !expanded);

		if (expanded) {
			expandMan.onManualExpand();
			expandMan.logIndent(indentation + 1);
		}
	}

	expandMan.registerRedrawDescendantCallback(redraw);
	const writable_props = ['note_path', 'db', 'indentation', 'view', 'app', 'expandMan'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Descendants> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		toggleExpand();
	};

	const click_handler_1 = event => {
		NavigateToFile(app, note_path, event);
	};

	$$self.$$set = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('view' in $$props) $$invalidate(3, view = $$props.view);
		if ('app' in $$props) $$invalidate(4, app = $$props.app);
		if ('expandMan' in $$props) $$invalidate(5, expandMan = $$props.expandMan);
	};

	$$self.$capture_state = () => ({
		GetDisplayName,
		NavigateToFile,
		note_path,
		db,
		indentation,
		view,
		app,
		expandMan,
		dark_mode,
		expanded,
		children,
		redraw,
		toggleExpand
	});

	$$self.$inject_state = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('view' in $$props) $$invalidate(3, view = $$props.view);
		if ('app' in $$props) $$invalidate(4, app = $$props.app);
		if ('expandMan' in $$props) $$invalidate(5, expandMan = $$props.expandMan);
		if ('dark_mode' in $$props) $$invalidate(8, dark_mode = $$props.dark_mode);
		if ('expanded' in $$props) $$invalidate(6, expanded = $$props.expanded);
		if ('children' in $$props) $$invalidate(7, children = $$props.children);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		note_path,
		db,
		indentation,
		view,
		app,
		expandMan,
		expanded,
		children,
		dark_mode,
		toggleExpand,
		click_handler,
		click_handler_1
	];
}

class Descendants extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$5,
			create_fragment$5,
			safe_not_equal,
			{
				note_path: 0,
				db: 1,
				indentation: 2,
				view: 3,
				app: 4,
				expandMan: 5
			},
			add_css$5
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Descendants",
			options,
			id: create_fragment$5.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*note_path*/ ctx[0] === undefined && !('note_path' in props)) {
			console.warn("<Descendants> was created without expected prop 'note_path'");
		}

		if (/*db*/ ctx[1] === undefined && !('db' in props)) {
			console.warn("<Descendants> was created without expected prop 'db'");
		}

		if (/*indentation*/ ctx[2] === undefined && !('indentation' in props)) {
			console.warn("<Descendants> was created without expected prop 'indentation'");
		}

		if (/*view*/ ctx[3] === undefined && !('view' in props)) {
			console.warn("<Descendants> was created without expected prop 'view'");
		}

		if (/*app*/ ctx[4] === undefined && !('app' in props)) {
			console.warn("<Descendants> was created without expected prop 'app'");
		}

		if (/*expandMan*/ ctx[5] === undefined && !('expandMan' in props)) {
			console.warn("<Descendants> was created without expected prop 'expandMan'");
		}
	}

	get note_path() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set note_path(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get db() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set db(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get indentation() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set indentation(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get view() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get expandMan() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set expandMan(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/UpdateNotice.svelte generated by Svelte v3.42.1 */
const file$4 = "src/svelte/UpdateNotice.svelte";

function add_css$4(target) {
	append_styles(target, "svelte-1afhixd", "div#all-container.svelte-1afhixd{display:flex;flex-direction:column;height:100%}div#main_moc_div.svelte-1afhixd{padding:initial;width:initial;height:initial;position:initial;overflow:auto;flex:1}div#main_moc_div.dark-mode.svelte-1afhixd{color:#dcddde}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXBkYXRlTm90aWNlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUE4Q0ksR0FBRyxjQUFjLGVBQUMsQ0FBQSxBQUNkLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLE1BQU0sQ0FDdEIsTUFBTSxDQUFFLElBQUksQUFDaEIsQ0FBQSxBQUVBLEdBQUcsYUFBYSxlQUFDLENBQUEsQUFDYixPQUFPLENBQUUsT0FBTyxDQUNoQixLQUFLLENBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBRSxPQUFPLENBQ2YsUUFBUSxDQUFFLE9BQU8sQ0FDakIsUUFBUSxDQUFFLElBQUksQ0FDZCxJQUFJLENBQUUsQ0FBQyxBQUNYLENBQUEsQUFFQSxHQUFHLGFBQWEsVUFBVSxlQUFDLENBQUEsQUFDdkIsS0FBSyxDQUFFLE9BQU8sQUFDbEIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJVcGRhdGVOb3RpY2Uuc3ZlbHRlIl19 */");
}

function create_fragment$4(ctx) {
	let div1;
	let div0;
	let h3;
	let t1;
	let ul;
	let li0;
	let br0;
	let t3;
	let li1;
	let t5;
	let br1;
	let t6;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h3 = element("h3");
			h3.textContent = "The Map of Content plugin has been updated";
			t1 = text(" \n\n        The latest changes are:\n        ");
			ul = element("ul");
			li0 = element("li");
			li0.textContent = "Your Map of Content will be updated automatically when you\n                switch between notes, if you've changed any links\n            ";
			br0 = element("br");
			t3 = space();
			li1 = element("li");
			li1.textContent = "There's a new top bar with buttons to show or hide more\n                descendants in the tree, and to update the Map of Content";
			t5 = space();
			br1 = element("br");
			t6 = space();
			button = element("button");
			button.textContent = "Close";
			set_style(h3, "text-align", "center");
			add_location(h3, file$4, 22, 8, 543);
			add_location(li0, file$4, 26, 12, 680);
			add_location(br0, file$4, 29, 17, 843);
			add_location(li1, file$4, 30, 12, 860);
			add_location(ul, file$4, 25, 8, 663);
			add_location(br1, file$4, 35, 8, 1051);
			set_style(button, "display", "block");
			set_style(button, "margin", "auto");
			add_location(button, file$4, 36, 8, 1066);
			attr_dev(div0, "id", "main_moc_div");
			attr_dev(div0, "class", "" + (null_to_empty(/*dark_mode*/ ctx[1]) + " svelte-1afhixd"));
			add_location(div0, file$4, 21, 4, 472);
			attr_dev(div1, "id", "all-container");
			attr_dev(div1, "class", "svelte-1afhixd");
			add_location(div1, file$4, 20, 0, 443);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h3);
			append_dev(div0, t1);
			append_dev(div0, ul);
			append_dev(ul, li0);
			append_dev(ul, br0);
			append_dev(ul, t3);
			append_dev(ul, li1);
			append_dev(div0, t5);
			append_dev(div0, br1);
			append_dev(div0, t6);
			append_dev(div0, button);
			/*div0_binding*/ ctx[6](div0);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*acceptNotice*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			/*div0_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('UpdateNotice', slots, []);
	
	
	
	let { app } = $$props;
	let { view } = $$props;
	let { plugin } = $$props;
	let settings = plugin.settings;
	let main_div;

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	/** Scroll the whole view to the top*/
	function acceptNotice() {
		settings.set({ "do_show_update_notice": false });
		view.rerender();
	}

	const writable_props = ['app', 'view', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UpdateNotice> was created with unknown prop '${key}'`);
	});

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			main_div = $$value;
			$$invalidate(0, main_div);
		});
	}

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(3, app = $$props.app);
		if ('view' in $$props) $$invalidate(4, view = $$props.view);
		if ('plugin' in $$props) $$invalidate(5, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		Log,
		onMount,
		app,
		view,
		plugin,
		settings,
		main_div,
		dark_mode,
		acceptNotice
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(3, app = $$props.app);
		if ('view' in $$props) $$invalidate(4, view = $$props.view);
		if ('plugin' in $$props) $$invalidate(5, plugin = $$props.plugin);
		if ('settings' in $$props) settings = $$props.settings;
		if ('main_div' in $$props) $$invalidate(0, main_div = $$props.main_div);
		if ('dark_mode' in $$props) $$invalidate(1, dark_mode = $$props.dark_mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [main_div, dark_mode, acceptNotice, app, view, plugin, div0_binding];
}

class UpdateNotice extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { app: 3, view: 4, plugin: 5 }, add_css$4);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "UpdateNotice",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[3] === undefined && !('app' in props)) {
			console.warn("<UpdateNotice> was created without expected prop 'app'");
		}

		if (/*view*/ ctx[4] === undefined && !('view' in props)) {
			console.warn("<UpdateNotice> was created without expected prop 'view'");
		}

		if (/*plugin*/ ctx[5] === undefined && !('plugin' in props)) {
			console.warn("<UpdateNotice> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<UpdateNotice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<UpdateNotice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get view() {
		throw new Error("<UpdateNotice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<UpdateNotice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<UpdateNotice>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<UpdateNotice>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class expandManager {
    constructor() {
        this.initial_max_indent = 3;
        this.redrawCallbacks = [];
        this.manually_expanded = false;
    }
    expand() {
        if (this.manually_expanded) {
            this.rerenderDescendants(this.initial_max_indent);
            this.manually_expanded = false;
        }
        else {
            this.rerenderDescendants(this.initial_max_indent + 1);
        }
    }
    contract() {
        if (this.initial_max_indent > 1) {
            this.rerenderDescendants(this.initial_max_indent - 1);
            this.initial_max_indent -= 1;
        }
    }
    rerenderDescendants(new_max_indent) {
        for (let func of this.redrawCallbacks) {
            func(new_max_indent);
        }
    }
    registerRedrawDescendantCallback(redraw) {
        this.redrawCallbacks.push(redraw);
    }
    logIndent(indent) {
        if (indent > this.initial_max_indent) {
            this.initial_max_indent = indent;
        }
    }
    onManualExpand() {
        this.manually_expanded = true;
    }
}

/* src/svelte/View.svelte generated by Svelte v3.42.1 */
const file$3 = "src/svelte/View.svelte";

function add_css$3(target) {
	append_styles(target, "svelte-1t1mrw2", "div#all-container.svelte-1t1mrw2.svelte-1t1mrw2{display:flex;flex-direction:column;height:100%}div#top-bar.svelte-1t1mrw2.svelte-1t1mrw2{min-height:30px;width:100%;margin-bottom:10px;display:flex;justify-content:center;flex-wrap:wrap}div#top-bar.svelte-1t1mrw2 div.action.svelte-1t1mrw2{height:20px;width:20px;margin:5px}div#top-bar.svelte-1t1mrw2 div.action svg.svelte-1t1mrw2{height:20px;width:20px;fill:darkgrey}div#top-bar.svelte-1t1mrw2 div.action:hover svg.svelte-1t1mrw2{fill:grey}div.dark-mode.svelte-1t1mrw2 div#top-bar div.action svg.svelte-1t1mrw2{height:20px;width:20px;fill:grey}div.dark-mode.svelte-1t1mrw2 div#top-bar div.action:hover svg.svelte-1t1mrw2{fill:darkgrey}div#main_moc_div.svelte-1t1mrw2.svelte-1t1mrw2{padding:initial;width:initial;height:initial;position:initial;overflow:auto;flex:1}div.dark-mode.svelte-1t1mrw2.svelte-1t1mrw2{color:#dcddde}div#scroll_up.svelte-1t1mrw2.svelte-1t1mrw2{color:gray;display:none;text-align:center;height:30px;width:30px;background-color:transparent;position:fixed;margin-right:20px;margin-top:20px;right:5px;top:4px}div#scroll_up.svelte-1t1mrw2.svelte-1t1mrw2{cursor:pointer;font-size:25px;color:darkgrey}div#scroll_up.svelte-1t1mrw2 svg.svelte-1t1mrw2{transform:rotate(-90deg)}div.light-mode.svelte-1t1mrw2 div#scroll_up svg.svelte-1t1mrw2{fill:lightgray}div.light-mode.svelte-1t1mrw2 div#scroll_up:hover svg.svelte-1t1mrw2{fill:gray}div.dark-mode.svelte-1t1mrw2 div#scroll_up svg.svelte-1t1mrw2{fill:gray}div.dark-mode.svelte-1t1mrw2 div#scroll_up:hover svg.svelte-1t1mrw2{fill:lightgray}a.link.svelte-1t1mrw2.svelte-1t1mrw2{cursor:pointer}ul.svelte-1t1mrw2.svelte-1t1mrw2{padding-left:0}svg.path-arrow.svelte-1t1mrw2.svelte-1t1mrw2{margin-right:2px;margin-left:2px;display:inline;width:24px;height:0.7em}div.dark-mode.svelte-1t1mrw2 svg.path-arrow.svelte-1t1mrw2{fill:lightgray}.errors.svelte-1t1mrw2.svelte-1t1mrw2{padding:10px;width:initial;height:initial;position:initial;overflow-y:initial;overflow-wrap:initial}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlldy5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBb05JLEdBQUcsY0FBYyw4QkFBQyxDQUFBLEFBQ2QsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsTUFBTSxDQUN0QixNQUFNLENBQUUsSUFBSSxBQUNoQixDQUFBLEFBQ0EsR0FBRyxRQUFRLDhCQUFDLENBQUEsQUFDUixVQUFVLENBQUUsSUFBSSxDQUNoQixLQUFLLENBQUUsSUFBSSxDQUNYLGFBQWEsQ0FBRSxJQUFJLENBQ25CLE9BQU8sQ0FBRSxJQUFJLENBQ2IsZUFBZSxDQUFFLE1BQU0sQ0FDdkIsU0FBUyxDQUFFLElBQUksQUFDbkIsQ0FBQSxBQUNBLEdBQUcsdUJBQVEsQ0FBQyxHQUFHLE9BQU8sZUFBQyxDQUFBLEFBQ25CLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsR0FBRyxBQUNmLENBQUEsQUFDQSxHQUFHLHVCQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDdkIsTUFBTSxDQUFFLElBQUksQ0FDWixLQUFLLENBQUUsSUFBSSxDQUNYLElBQUksQ0FBRSxRQUFRLEFBQ2xCLENBQUEsQUFDQSxHQUFHLHVCQUFRLENBQUMsR0FBRyxPQUFPLE1BQU0sQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUM3QixJQUFJLENBQUUsSUFBSSxBQUNkLENBQUEsQUFDQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDckMsTUFBTSxDQUFFLElBQUksQ0FDWixLQUFLLENBQUUsSUFBSSxDQUNYLElBQUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQSxBQUNBLEdBQUcseUJBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLE9BQU8sTUFBTSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQzNDLElBQUksQ0FBRSxRQUFRLEFBQ2xCLENBQUEsQUFDQSxHQUFHLGFBQWEsOEJBQUMsQ0FBQSxBQUNiLE9BQU8sQ0FBRSxPQUFPLENBQ2hCLEtBQUssQ0FBRSxPQUFPLENBQ2QsTUFBTSxDQUFFLE9BQU8sQ0FDZixRQUFRLENBQUUsT0FBTyxDQUNqQixRQUFRLENBQUUsSUFBSSxDQUNkLElBQUksQ0FBRSxDQUFDLEFBQ1gsQ0FBQSxBQUVBLEdBQUcsVUFBVSw4QkFBQyxDQUFBLEFBQ1YsS0FBSyxDQUFFLE9BQU8sQUFDbEIsQ0FBQSxBQUVBLEdBQUcsVUFBVSw4QkFBQyxDQUFBLEFBQ1YsS0FBSyxDQUFFLElBQUksQ0FDWCxPQUFPLENBQUUsSUFBSSxDQUNiLFVBQVUsQ0FBRSxNQUFNLENBQ2xCLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQ0FDWCxnQkFBZ0IsQ0FBRSxXQUFXLENBQzdCLFFBQVEsQ0FBRSxLQUFLLENBQ2YsWUFBWSxDQUFFLElBQUksQ0FDbEIsVUFBVSxDQUFFLElBQUksQ0FDaEIsS0FBSyxDQUFFLEdBQUcsQ0FDVixHQUFHLENBQUUsR0FBRyxBQUNaLENBQUEsQUFFQSxHQUFHLFVBQVUsOEJBQUMsQ0FBQSxBQUNWLE1BQU0sQ0FBRSxPQUFPLENBQ2YsU0FBUyxDQUFFLElBQUksQ0FDZixLQUFLLENBQUUsUUFBUSxBQUNuQixDQUFBLEFBRUEsR0FBRyx5QkFBVSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ2QsU0FBUyxDQUFFLE9BQU8sTUFBTSxDQUFDLEFBQzdCLENBQUEsQUFFQSxHQUFHLDBCQUFXLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDN0IsSUFBSSxDQUFFLFNBQVMsQUFDbkIsQ0FBQSxBQUNBLEdBQUcsMEJBQVcsQ0FBQyxHQUFHLFVBQVUsTUFBTSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQ25DLElBQUksQ0FBRSxJQUFJLEFBQ2QsQ0FBQSxBQUVBLEdBQUcseUJBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUM1QixJQUFJLENBQUUsSUFBSSxBQUNkLENBQUEsQUFDQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxVQUFVLE1BQU0sQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUNsQyxJQUFJLENBQUUsU0FBUyxBQUNuQixDQUFBLEFBQ0EsQ0FBQyxLQUFLLDhCQUFDLENBQUEsQUFDSCxNQUFNLENBQUUsT0FBTyxBQUNuQixDQUFBLEFBQ0EsRUFBRSw4QkFBQyxDQUFBLEFBQ0MsWUFBWSxDQUFFLENBQUMsQUFDbkIsQ0FBQSxBQUVBLEdBQUcsV0FBVyw4QkFBQyxDQUFBLEFBQ1gsWUFBWSxDQUFFLEdBQUcsQ0FDakIsV0FBVyxDQUFFLEdBQUcsQ0FDaEIsT0FBTyxDQUFFLE1BQU0sQ0FDZixLQUFLLENBQUUsSUFBSSxDQUNYLE1BQU0sQ0FBRSxLQUFLLEFBQ2pCLENBQUEsQUFDQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxXQUFXLGVBQUMsQ0FBQSxBQUN6QixJQUFJLENBQUUsU0FBUyxBQUNuQixDQUFBLEFBQ0EsT0FBTyw4QkFBQyxDQUFBLEFBQ0osT0FBTyxDQUFFLElBQUksQ0FDYixLQUFLLENBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBRSxPQUFPLENBQ2YsUUFBUSxDQUFFLE9BQU8sQ0FDakIsVUFBVSxDQUFFLE9BQU8sQ0FDbkIsYUFBYSxDQUFFLE9BQU8sQUFDMUIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJWaWV3LnN2ZWx0ZSJdfQ== */");
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i];
	child_ctx[27] = i;
	return child_ctx;
}

// (120:8) {:else}
function create_else_block(ctx) {
	let t0;
	let br;
	let t1;
	let ul;
	let descendants;
	let t2;
	let div;
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	let each_value = /*paths*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[8],
				app: /*app*/ ctx[7],
				view: /*view*/ ctx[0],
				note_path: /*view*/ ctx[0].open_file_path,
				indentation: 0,
				expandMan: /*expandMan*/ ctx[10]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			ul = element("ul");
			create_component(descendants.$$.fragment);
			t2 = space();
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			add_location(br, file$3, 174, 12, 6980);
			attr_dev(ul, "class", "svelte-1t1mrw2");
			add_location(ul, file$3, 175, 12, 6999);
			attr_dev(path, "d", "M24 12l-12-9v5h-12v8h12v5l12-9z");
			add_location(path, file$3, 198, 21, 7707);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "class", "svelte-1t1mrw2");
			add_location(svg, file$3, 193, 16, 7523);
			attr_dev(div, "id", "scroll_up");
			attr_dev(div, "title", "Scroll to top");
			attr_dev(div, "class", "svelte-1t1mrw2");
			add_location(div, file$3, 185, 12, 7280);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);
			mount_component(descendants, ul, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, path);
			/*div_binding*/ ctx[18](div);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler_6*/ ctx[19], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths, LINKED_FROM, LINKED_TO, LINKED_BOTH, GetDisplayName, db, NavigateToFile, app*/ 386) {
				each_value = /*paths*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const descendants_changes = {};
			if (dirty & /*view*/ 1) descendants_changes.view = /*view*/ ctx[0];
			if (dirty & /*view*/ 1) descendants_changes.note_path = /*view*/ ctx[0].open_file_path;
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_component(descendants);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[18](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(120:8) {:else}",
		ctx
	});

	return block;
}

// (103:36) 
function create_if_block_2(ctx) {
	let t0;
	let a0;
	let t1_value = GetDisplayName(/*cn_path*/ ctx[9], /*db*/ ctx[8]) + "";
	let t1;
	let t2;
	let br0;
	let br1;
	let t3;
	let a1;
	let t5;
	let br2;
	let t6;
	let nolinkimage;
	let current;
	let mounted;
	let dispose;
	nolinkimage = new NoLinkImage({ $$inline: true });

	const block = {
		c: function create() {
			t0 = text("This file doesn't have any connections to ");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = text(".");
			br0 = element("br");
			br1 = element("br");
			t3 = text(" Link it to a file that is part of your Map of\n            Content. Then\n            ");
			a1 = element("a");
			a1.textContent = "update";
			t5 = text("\n            your Map of Content and watch it grow!");
			br2 = element("br");
			t6 = space();
			create_component(nolinkimage.$$.fragment);
			attr_dev(a0, "class", "link svelte-1t1mrw2");
			attr_dev(a0, "title", /*cn_path*/ ctx[9]);
			add_location(a0, file$3, 103, 54, 3827);
			add_location(br0, file$3, 109, 14, 4042);
			add_location(br1, file$3, 109, 20, 4048);
			attr_dev(a1, "class", "link svelte-1t1mrw2");
			add_location(a1, file$3, 111, 12, 4139);
			add_location(br2, file$3, 117, 50, 4331);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, a1, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t6, anchor);
			mount_component(nolinkimage, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*click_handler_3*/ ctx[15], false, false, false),
					listen_dev(a1, "click", /*click_handler_4*/ ctx[16], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(nolinkimage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(nolinkimage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t6);
			destroy_component(nolinkimage, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(103:36) ",
		ctx
	});

	return block;
}

// (99:32) 
function create_if_block_1(ctx) {
	let div;
	let raw_value = /*errors*/ ctx[2][0] + "";

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "errors svelte-1t1mrw2");
			add_location(div, file$3, 99, 12, 3662);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errors*/ 4 && raw_value !== (raw_value = /*errors*/ ctx[2][0] + "")) div.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(99:32) ",
		ctx
	});

	return block;
}

// (97:8) {#if settings.get("do_show_update_notice")}
function create_if_block(ctx) {
	let updatenotice;
	let current;

	updatenotice = new UpdateNotice({
			props: {
				app: /*app*/ ctx[7],
				view: /*view*/ ctx[0],
				plugin: /*plugin*/ ctx[6]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(updatenotice.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(updatenotice, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const updatenotice_changes = {};
			if (dirty & /*view*/ 1) updatenotice_changes.view = /*view*/ ctx[0];
			updatenotice.$set(updatenotice_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(updatenotice.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(updatenotice.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(updatenotice, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(97:8) {#if settings.get(\\\"do_show_update_notice\\\")}",
		ctx
	});

	return block;
}

// (128:24) {:else}
function create_else_block_1(ctx) {
	let a;
	let t_value = GetDisplayName(/*pathitem*/ ctx[25][0], /*db*/ ctx[8]) + "";
	let t;
	let a_title_value;
	let mounted;
	let dispose;

	function click_handler_5(...args) {
		return /*click_handler_5*/ ctx[17](/*pathitem*/ ctx[25], ...args);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "link svelte-1t1mrw2");
			attr_dev(a, "title", a_title_value = /*pathitem*/ ctx[25][0]);
			add_location(a, file$3, 128, 28, 4763);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", click_handler_5, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[25][0], /*db*/ ctx[8]) + "")) set_data_dev(t, t_value);

			if (dirty & /*paths*/ 2 && a_title_value !== (a_title_value = /*pathitem*/ ctx[25][0])) {
				attr_dev(a, "title", a_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(128:24) {:else}",
		ctx
	});

	return block;
}

// (124:24) {#if i == 0}
function create_if_block_6(ctx) {
	let span;
	let t_value = GetDisplayName(/*pathitem*/ ctx[25][0], /*db*/ ctx[8]) + "";
	let t;
	let span_title_value;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "title", span_title_value = /*pathitem*/ ctx[25][0]);
			add_location(span, file$3, 124, 28, 4574);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths*/ 2 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[25][0], /*db*/ ctx[8]) + "")) set_data_dev(t, t_value);

			if (dirty & /*paths*/ 2 && span_title_value !== (span_title_value = /*pathitem*/ ctx[25][0])) {
				attr_dev(span, "title", span_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(124:24) {#if i == 0}",
		ctx
	});

	return block;
}

// (159:61) 
function create_if_block_5(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 9 0 L 0 7.5214844 L 9 15 L 9.6445312 14.236328 L 2.1152344 8 L 21.882812 8 L 14.355469 14.234375 L 15 15 L 24 7.4785156 L 15 0 L 14.355469 0.76367188 L 21.884766 7 L 2.1171875 7 L 9.6445312 0.765625 L 9 0 z ");
			add_location(path, file$3, 164, 32, 6517);
			attr_dev(svg, "class", "path-arrow svelte-1t1mrw2");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 159, 28, 6277);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(159:61) ",
		ctx
	});

	return block;
}

// (149:59) 
function create_if_block_4(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", "M 2.117,7 9.644,0.765 9,0 0,7.521 9,15 9.645,14.236 2.116,8 H 24 V 7 Z");
			add_location(path, file$3, 154, 32, 6000);
			attr_dev(svg, "class", "path-arrow svelte-1t1mrw2");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 149, 28, 5760);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(149:59) ",
		ctx
	});

	return block;
}

// (139:24) {#if pathitem[1] == LINKED_FROM}
function create_if_block_3(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "d", " M 21.883,8 14.356,14.235 15,15 24,7.479 15,0 14.355,0.764 21.884,7 H 0 v 1 z");
			add_location(path, file$3, 144, 32, 5478);
			attr_dev(svg, "class", "path-arrow svelte-1t1mrw2");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 24 15.05");
			add_location(svg, file$3, 139, 28, 5238);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(139:24) {#if pathitem[1] == LINKED_FROM}",
		ctx
	});

	return block;
}

// (123:20) {#each path.reverse() as pathitem, i}
function create_each_block_1$1(ctx) {
	let t;
	let if_block1_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*i*/ ctx[27] == 0) return create_if_block_6;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*pathitem*/ ctx[25][1] == LINKED_FROM) return create_if_block_3;
		if (/*pathitem*/ ctx[25][1] == LINKED_TO) return create_if_block_4;
		if (/*pathitem*/ ctx[25][1] == LINKED_BOTH) return create_if_block_5;
	}

	let current_block_type_1 = select_block_type_2(ctx);
	let if_block1 = current_block_type_1 && current_block_type_1(ctx);

	const block = {
		c: function create() {
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block0.p(ctx, dirty);

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_2(ctx))) {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block0.d(detaching);
			if (detaching) detach_dev(t);

			if (if_block1) {
				if_block1.d(detaching);
			}

			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(123:20) {#each path.reverse() as pathitem, i}",
		ctx
	});

	return block;
}

// (121:12) {#each paths as path}
function create_each_block$3(ctx) {
	let div;
	let t;
	let br;
	let each_value_1 = /*path*/ ctx[22].reverse();
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			br = element("br");
			attr_dev(div, "class", "path");
			add_location(div, file$3, 121, 16, 4432);
			add_location(br, file$3, 171, 16, 6940);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths, LINKED_FROM, LINKED_TO, LINKED_BOTH, GetDisplayName, db, NavigateToFile, app*/ 386) {
				each_value_1 = /*path*/ ctx[22].reverse();
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(121:12) {#each paths as path}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let div5;
	let div3;
	let div0;
	let svg0;
	let path0;
	let t0;
	let div1;
	let svg1;
	let path1;
	let t1;
	let div2;
	let svg2;
	let path2;
	let t2;
	let div4;
	let show_if;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (show_if == null) show_if = !!/*settings*/ ctx[11].get("do_show_update_notice");
		if (show_if) return 0;
		if (/*errors*/ ctx[2].length) return 1;
		if (/*paths*/ ctx[1].length == 0) return 2;
		return 3;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div5 = element("div");
			div3 = element("div");
			div0 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t0 = space();
			div1 = element("div");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t1 = space();
			div2 = element("div");
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t2 = space();
			div4 = element("div");
			if_block.c();
			attr_dev(path0, "d", "M23 12c0 1.042-.154 2.045-.425 3h-2.101c.335-.94.526-1.947.526-3 0-4.962-4.037-9-9-9-1.706 0-3.296.484-4.655 1.314l1.858 2.686h-6.994l2.152-7 1.849 2.673c1.684-1.049 3.659-1.673 5.79-1.673 6.074 0 11 4.925 11 11zm-6.354 7.692c-1.357.826-2.944 1.308-4.646 1.308-4.962 0-9-4.038-9-9 0-1.053.191-2.06.525-3h-2.1c-.271.955-.425 1.958-.425 3 0 6.075 4.925 11 11 11 2.127 0 4.099-.621 5.78-1.667l1.853 2.667 2.152-6.989h-6.994l1.855 2.681z");
			add_location(path0, file$3, 38, 16, 1141);
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			attr_dev(svg0, "class", "svelte-1t1mrw2");
			add_location(svg0, file$3, 37, 12, 1064);
			attr_dev(div0, "id", "update-moc");
			attr_dev(div0, "class", "action svelte-1t1mrw2");
			attr_dev(div0, "title", "Update the Map of Content");
			add_location(div0, file$3, 29, 8, 862);
			attr_dev(path1, "d", "M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-12v-2h12v2z");
			add_location(path1, file$3, 53, 16, 1954);
			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			attr_dev(svg1, "class", "svelte-1t1mrw2");
			add_location(svg1, file$3, 52, 12, 1877);
			attr_dev(div1, "id", "minus-expand");
			attr_dev(div1, "class", "action svelte-1t1mrw2");
			attr_dev(div1, "title", "Show fewer descendants");
			add_location(div1, file$3, 44, 8, 1667);
			attr_dev(path2, "d", "M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z");
			add_location(path2, file$3, 72, 16, 2613);
			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg2, "viewBox", "0 0 24 24");
			attr_dev(svg2, "fill-rule", "evenodd");
			attr_dev(svg2, "clip-rule", "evenodd");
			attr_dev(svg2, "class", "svelte-1t1mrw2");
			add_location(svg2, file$3, 66, 12, 2419);
			attr_dev(div2, "id", "plus-expand");
			attr_dev(div2, "class", "action svelte-1t1mrw2");
			attr_dev(div2, "title", "Show more descendants");
			add_location(div2, file$3, 58, 8, 2213);
			attr_dev(div3, "id", "top-bar");
			attr_dev(div3, "class", "svelte-1t1mrw2");
			add_location(div3, file$3, 28, 4, 835);
			attr_dev(div4, "id", "main_moc_div");
			attr_dev(div4, "class", "svelte-1t1mrw2");
			add_location(div4, file$3, 78, 4, 2897);
			attr_dev(div5, "id", "all-container");

			attr_dev(div5, "class", "" + (null_to_empty(document.body.classList.contains("theme-dark")
			? "dark-mode"
			: "light-mode") + " svelte-1t1mrw2"));

			add_location(div5, file$3, 22, 0, 697);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div3);
			append_dev(div3, div0);
			append_dev(div0, svg0);
			append_dev(svg0, path0);
			append_dev(div3, t0);
			append_dev(div3, div1);
			append_dev(div1, svg1);
			append_dev(svg1, path1);
			append_dev(div3, t1);
			append_dev(div3, div2);
			append_dev(div2, svg2);
			append_dev(svg2, path2);
			append_dev(div5, t2);
			append_dev(div5, div4);
			if_blocks[current_block_type_index].m(div4, null);
			/*div4_binding*/ ctx[20](div4);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(div1, "click", /*click_handler_1*/ ctx[13], false, false, false),
					listen_dev(div2, "click", /*click_handler_2*/ ctx[14], false, false, false),
					listen_dev(div4, "scroll", /*scroll_handler*/ ctx[21], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div4, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			if_blocks[current_block_type_index].d();
			/*div4_binding*/ ctx[20](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('View', slots, []);
	
	
	let { view } = $$props;
	let { paths } = $$props;
	let { errors } = $$props;
	let plugin = view.plugin;
	let app = plugin.app;
	let db = plugin.db;
	let cn_path = plugin.settings.get("CN_path");
	let expandMan = new expandManager();
	let scroll_up_div;
	let settings = plugin.settings;
	let main_div;
	let scroll_up_div_already_visible = false;
	const writable_props = ['view', 'paths', 'errors'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<View> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		db.update();
	};

	const click_handler_1 = () => {
		expandMan.contract();
	};

	const click_handler_2 = () => {
		expandMan.expand();
	};

	const click_handler_3 = event => NavigateToFile(app, cn_path, event);

	const click_handler_4 = () => {
		db.update();
	};

	const click_handler_5 = (pathitem, event) => NavigateToFile(app, pathitem[0], event);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scroll_up_div = $$value;
			$$invalidate(3, scroll_up_div);
		});
	}

	const click_handler_6 = () => {
		$$invalidate(4, main_div.scrollTop = 0, main_div);
	};

	function div4_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			main_div = $$value;
			$$invalidate(4, main_div);
		});
	}

	const scroll_handler = e => {
		if (e.target.scrollTop > 30 && !scroll_up_div_already_visible) {
			$$invalidate(3, scroll_up_div.style.display = "block", scroll_up_div);
			$$invalidate(5, scroll_up_div_already_visible = true);
		} else //hide the arrow if user scrolls back to the top
		if (e.target.scrollTop <= 30 && scroll_up_div_already_visible) {
			$$invalidate(3, scroll_up_div.style.display = "none", scroll_up_div);
			$$invalidate(5, scroll_up_div_already_visible = false);
		}
	};

	$$self.$$set = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('paths' in $$props) $$invalidate(1, paths = $$props.paths);
		if ('errors' in $$props) $$invalidate(2, errors = $$props.errors);
	};

	$$self.$capture_state = () => ({
		LINKED_BOTH,
		LINKED_TO,
		LINKED_FROM,
		GetDisplayName,
		IsCtrlPressed,
		NavigateToFile,
		Log,
		NoLinkImage,
		Descendants,
		UpdateNotice,
		expandManager,
		view,
		paths,
		errors,
		plugin,
		app,
		db,
		cn_path,
		expandMan,
		scroll_up_div,
		settings,
		main_div,
		scroll_up_div_already_visible
	});

	$$self.$inject_state = $$props => {
		if ('view' in $$props) $$invalidate(0, view = $$props.view);
		if ('paths' in $$props) $$invalidate(1, paths = $$props.paths);
		if ('errors' in $$props) $$invalidate(2, errors = $$props.errors);
		if ('plugin' in $$props) $$invalidate(6, plugin = $$props.plugin);
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('db' in $$props) $$invalidate(8, db = $$props.db);
		if ('cn_path' in $$props) $$invalidate(9, cn_path = $$props.cn_path);
		if ('expandMan' in $$props) $$invalidate(10, expandMan = $$props.expandMan);
		if ('scroll_up_div' in $$props) $$invalidate(3, scroll_up_div = $$props.scroll_up_div);
		if ('settings' in $$props) $$invalidate(11, settings = $$props.settings);
		if ('main_div' in $$props) $$invalidate(4, main_div = $$props.main_div);
		if ('scroll_up_div_already_visible' in $$props) $$invalidate(5, scroll_up_div_already_visible = $$props.scroll_up_div_already_visible);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		view,
		paths,
		errors,
		scroll_up_div,
		main_div,
		scroll_up_div_already_visible,
		plugin,
		app,
		db,
		cn_path,
		expandMan,
		settings,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		div_binding,
		click_handler_6,
		div4_binding,
		scroll_handler
	];
}

class View extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { view: 0, paths: 1, errors: 2 }, add_css$3);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "View",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*view*/ ctx[0] === undefined && !('view' in props)) {
			console.warn("<View> was created without expected prop 'view'");
		}

		if (/*paths*/ ctx[1] === undefined && !('paths' in props)) {
			console.warn("<View> was created without expected prop 'paths'");
		}

		if (/*errors*/ ctx[2] === undefined && !('errors' in props)) {
			console.warn("<View> was created without expected prop 'errors'");
		}
	}

	get view() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set view(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get paths() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set paths(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class MOCView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.max_indent = 5;
        this.plugin = plugin;
        this.db = this.plugin.db;
        this.settings = plugin.settings;
        this.app = this.plugin.app;
        // register with the main class
        this.plugin.registerViewInstance(this);
        this.plugin.app.workspace.onLayoutReady(() => this.init());
        // rerender on css change to adapt to dark/light mode changes
        // TODO pass command to svelte, not recreate it
        this.plugin.app.workspace.on("css-change", () => {
            this.rerender();
        });
    }
    init() {
        // update the path view every time a file is opened
        this.registerEvent(this.app.workspace.on("file-open", (file) => { this.monitorNote(); this.rerender(); }));
        this.monitorNote();
        this.rerender();
    }
    async onOpen() {
    }
    /** reload paths and recreate the svelte instance */
    rerender() {
        // destroy old pathview/errorview instance
        // set symbol to undefined to avoid "This component has already been destroyed" message
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        let errors = [];
        if (this.db.database_updating) {
            errors.push("Updating...");
        }
        else if (!this.db.database_complete) {
            errors.push(`Your Map of Content couldn't be created.<br><br> Make sure your Central Note path '${this.settings.get("CN_path")}' is correct. You can change this path in the settings tab.`);
        }
        else if (this.app.workspace.getActiveFile() == null) {
            errors.push("No file is open");
        }
        else if (this.settings.isExludedFile(this.app.workspace.getActiveFile())) {
            errors.push("This file has been excluded from the Map of Content.");
        }
        else {
            this.open_file_path = this.app.workspace.getActiveFile().path;
            if (this.db.getNoteFromPath(this.open_file_path) == undefined) {
                errors.push("Updating...");
                this.db.update(true);
            }
        }
        let paths = [];
        if (errors.length == 0) {
            let all_paths = this.db.findPaths(this.open_file_path);
            if (all_paths.length == 0) ;
            paths = all_paths.map((p) => p.items.slice());
        }
        else {
            this.open_file_path = "None";
            paths = [];
        }
        this._app = new View({
            target: this.contentEl,
            props: { view: this, paths: paths, errors: errors },
        });
    }
    onClose() {
        if (this._app) {
            this._app.$destroy();
            this._app = undefined; // set symbol to undefined to avoid "This component has already been destroyed" message
        }
        this.plugin.unregisterViewInstance(this);
        return Promise.resolve();
    }
    async monitorNote() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file == null) {
            return;
        }
        if (!this.settings.get("auto_update_on_file_change")) {
            return;
        }
        if (active_file == null || this.settings.isExludedFile(active_file)) {
            return;
        }
        if (this.monitoring_note && this.app.metadataCache.getCache(this.monitoring_note) == undefined) ;
        let path = active_file.path;
        Log("Old monitoring note: " + this.monitoring_note);
        let rerender = false;
        if (this.monitoring_note && this.app.metadataCache.getCache(this.monitoring_note)) {
            if (!(path === this.monitoring_note)) {
                let now_links = this.db.getLinksFromNote(this.monitoring_note);
                if (!(JSON.stringify(now_links) == JSON.stringify(this.monitoring_note_links))) {
                    rerender = true;
                }
            }
        }
        this.monitoring_note = path;
        this.monitoring_note_links = this.db.getLinksFromNote(path);
        if (rerender) {
            this.db.update(true);
        }
    }
    getViewType() {
        return MOC_VIEW_TYPE;
    }
    getDisplayText() {
        return "Map of Content";
    }
    getIcon() {
        return "stacked-levels";
    }
}

/* src/svelte/settings/ExcludedFolders.svelte generated by Svelte v3.42.1 */
const file$2 = "src/svelte/settings/ExcludedFolders.svelte";

function add_css$2(target) {
	append_styles(target, "svelte-1a0h8f5", ".svelte-1a0h8f5{font-size:1em}h2.svelte-1a0h8f5{text-align:left}div#exluded-folders.svelte-1a0h8f5{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-1a0h8f5{width:300px}#excluded-select.svelte-1a0h8f5{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-1a0h8f5{height:300px;width:300px}div#currently-excluded.svelte-1a0h8f5{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-1a0h8f5{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGb2xkZXJzLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUEyS0ksZUFBRSxDQUFBLEFBQ0UsU0FBUyxDQUFFLEdBQUcsQUFDbEIsQ0FBQSxBQUVBLEVBQUUsZUFBQyxDQUFBLEFBQ0MsVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQSxBQUVBLEdBQUcsZ0JBQWdCLGVBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsSUFBSSxDQUNiLFNBQVMsQ0FBRSxJQUFJLENBQ2YsVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQSxBQUVBLEdBQUcsY0FBYyxlQUFDLENBQUEsQUFDZCxLQUFLLENBQUUsS0FBSyxBQUNoQixDQUFBLEFBRUEsZ0JBQWdCLGVBQUMsQ0FBQSxBQUNiLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQ0FDWixTQUFTLENBQUUsR0FBRyxDQUNkLFFBQVEsQ0FBRSxJQUFJLEFBQ2xCLENBQUEsQUFFQSxtQkFBbUIsZUFBQyxDQUFBLEFBQ2hCLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQUFDaEIsQ0FBQSxBQUNBLEdBQUcsbUJBQW1CLGVBQUMsQ0FBQSxBQUNuQixLQUFLLENBQUUsS0FBSyxDQUNaLFVBQVUsQ0FBRSxLQUFLLENBQ2pCLFFBQVEsQ0FBRSxNQUFNLEFBQ3BCLENBQUEsQUFDQSxHQUFHLHdCQUF3QixlQUFDLENBQUEsQUFDeEIsUUFBUSxDQUFFLElBQUksQ0FDZCxVQUFVLENBQUUsS0FBSyxBQUNyQixDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkV4Y2x1ZGVkRm9sZGVycy5zdmVsdGUiXX0= */");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

// (107:12) {#each all_folders as folder_path}
function create_each_block_1(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*folder_path*/ ctx[23];
			option.value = option.__value;
			attr_dev(option, "class", "svelte-1a0h8f5");
			add_location(option, file$2, 107, 16, 3303);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(107:12) {#each all_folders as folder_path}",
		ctx
	});

	return block;
}

// (144:16) {#each excluded_files as file_path}
function create_each_block$2(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-1a0h8f5");
			add_location(li, file$2, 144, 20, 4334);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(144:16) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let h2;
	let t1;
	let div4;
	let div0;
	let select;
	let t2;
	let div1;
	let label;
	let t4;
	let input0;
	let t5;
	let datalist;
	let br0;
	let t6;
	let br1;
	let t7;
	let input1;
	let br2;
	let t8;
	let input2;
	let br3;
	let br4;
	let t9;
	let div3;
	let t10;
	let t11_value = /*excluded_files*/ ctx[1].length + "";
	let t11;
	let t12;
	let input3;
	let input3_value_value;
	let t13;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value_1 = /*all_folders*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded folders";
			t1 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t2 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a folder:";
			t4 = space();
			input0 = element("input");
			t5 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			br0 = element("br");
			t6 = space();
			br1 = element("br");
			t7 = space();
			input1 = element("input");
			br2 = element("br");
			t8 = space();
			input2 = element("input");
			br3 = element("br");
			br4 = element("br");
			t9 = space();
			div3 = element("div");
			t10 = text("Currently excluded files: ");
			t11 = text(t11_value);
			t12 = space();
			input3 = element("input");
			t13 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-1a0h8f5");
			add_location(h2, file$2, 82, 0, 2549);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-1a0h8f5");
			add_location(select, file$2, 86, 8, 2640);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-1a0h8f5");
			add_location(div0, file$2, 85, 4, 2607);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-1a0h8f5");
			add_location(label, file$2, 95, 8, 2855);
			attr_dev(input0, "list", "exlude-folder");
			attr_dev(input0, "id", "Exluded-folders");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Start typing to see suggestions...");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-1a0h8f5");
			add_location(input0, file$2, 96, 8, 2909);
			attr_dev(datalist, "id", "exlude-folder");
			attr_dev(datalist, "class", "svelte-1a0h8f5");
			add_location(datalist, file$2, 105, 8, 3210);
			attr_dev(br0, "class", "svelte-1a0h8f5");
			add_location(br0, file$2, 109, 19, 3373);
			attr_dev(br1, "class", "svelte-1a0h8f5");
			add_location(br1, file$2, 110, 8, 3388);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-1a0h8f5");
			add_location(input1, file$2, 111, 8, 3403);
			attr_dev(br2, "class", "svelte-1a0h8f5");
			add_location(br2, file$2, 118, 10, 3566);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-1a0h8f5");
			add_location(input2, file$2, 119, 8, 3581);
			attr_dev(br3, "class", "svelte-1a0h8f5");
			add_location(br3, file$2, 126, 10, 3753);
			attr_dev(br4, "class", "svelte-1a0h8f5");
			add_location(br4, file$2, 126, 16, 3759);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-1a0h8f5");
			add_location(div1, file$2, 94, 4, 2817);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-1a0h8f5");
			add_location(input3, file$2, 130, 8, 3877);
			attr_dev(ul, "class", "svelte-1a0h8f5");
			add_location(ul, file$2, 142, 12, 4257);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-1a0h8f5");
			add_location(div2, file$2, 138, 8, 4118);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-1a0h8f5");
			add_location(div3, file$2, 128, 4, 3781);
			attr_dev(div4, "id", "exluded-folders");
			attr_dev(div4, "class", "svelte-1a0h8f5");
			add_location(div4, file$2, 84, 0, 2576);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[10](select);
			append_dev(div4, t2);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t4);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[11](input0);
			set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			append_dev(div1, t5);
			append_dev(div1, datalist);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(datalist, null);
			}

			append_dev(div1, br0);
			append_dev(div1, t6);
			append_dev(div1, br1);
			append_dev(div1, t7);
			append_dev(div1, input1);
			append_dev(div1, br2);
			append_dev(div1, t8);
			append_dev(div1, input2);
			append_dev(div1, br3);
			append_dev(div1, br4);
			append_dev(div4, t9);
			append_dev(div4, div3);
			append_dev(div3, t10);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, input3);
			append_dev(div3, t13);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[12]),
					listen_dev(input1, "click", /*click_handler*/ ctx[13], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[14], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exlude_path_input_value*/ 4 && input0.value !== /*exlude_path_input_value*/ ctx[2]) {
				set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			}

			if (dirty & /*all_folders*/ 32) {
				each_value_1 = /*all_folders*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(datalist, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*excluded_files*/ 2 && t11_value !== (t11_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t11, t11_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[10](null);
			/*input0_binding*/ ctx[11](null);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFolders', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let excluded_folders = plugin.settings.get("exluded_folders");

	// TODO show all exluded files in TextEdit not list
	// Select box based on https://www.c-sharpcorner.com/UploadFile/mahakgupta/add-and-remove-listbox-items-in-javascript/
	let all_folders = GetAllFolders(app);

	var list_options_no = 0;
	let excluded_files = allExcludedFiles();

	onMount(() => {
		// create select entries for all already excluded folders
		excluded_folders.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		let all_files = app.vault.getFiles().map(file => file.path);

		return all_files.filter(path_to_file => {
			return excluded_folders.some(path => path_to_file.startsWith(path));
		});
	}

	let exlude_path_input_value;
	let exlude_path_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.settings.set({ exluded_folders: excluded_folders });
	}

	function addValue() {
		if (!exlude_path_input_value) {
			return;
		}

		// Return if folder doesn't exist
		if (!all_folders.contains(exlude_path_input_value)) {
			alert("Please choose a folder from the list");
			return;
		}

		// Return if folder already on list
		if (excluded_folders.contains(exlude_path_input_value)) {
			$$invalidate(3, exlude_path_input.value = "", exlude_path_input);
			$$invalidate(2, exlude_path_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exlude_path_input_value, exlude_path_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		excluded_folders.push(exlude_path_input_value);

		// reset input field
		$$invalidate(3, exlude_path_input.value = "", exlude_path_input);

		$$invalidate(2, exlude_path_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				excluded_folders.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFolders> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exlude_path_input = $$value;
			$$invalidate(3, exlude_path_input);
		});
	}

	function input0_input_handler() {
		exlude_path_input_value = this.value;
		$$invalidate(2, exlude_path_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		Log,
		GetAllFolders,
		app,
		plugin,
		excludedlist,
		excluded_folders,
		all_folders,
		list_options_no,
		excluded_files,
		allExcludedFiles,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('excluded_folders' in $$props) excluded_folders = $$props.excluded_folders;
		if ('all_folders' in $$props) $$invalidate(5, all_folders = $$props.all_folders);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('exlude_path_input_value' in $$props) $$invalidate(2, exlude_path_input_value = $$props.exlude_path_input_value);
		if ('exlude_path_input' in $$props) $$invalidate(3, exlude_path_input = $$props.exlude_path_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		all_folders,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFolders extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { app: 8, plugin: 9 }, add_css$2);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFolders",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[8] === undefined && !('app' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[9] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/settings/ExcludedFilenames.svelte generated by Svelte v3.42.1 */
const file$1 = "src/svelte/settings/ExcludedFilenames.svelte";

function add_css$1(target) {
	append_styles(target, "svelte-1wc77v2", ".svelte-1wc77v2{font-size:1em}h2.svelte-1wc77v2{text-align:left}div#exlude-filenames.svelte-1wc77v2{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-1wc77v2{width:300px}#excluded-select.svelte-1wc77v2{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-1wc77v2{height:300px;width:300px}div#currently-excluded.svelte-1wc77v2{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-1wc77v2{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGaWxlbmFtZXMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXlLSSxlQUFFLENBQUEsQUFDRSxTQUFTLENBQUUsR0FBRyxBQUNsQixDQUFBLEFBRUEsRUFBRSxlQUFDLENBQUEsQUFDQyxVQUFVLENBQUUsSUFBSSxBQUNwQixDQUFBLEFBRUEsR0FBRyxpQkFBaUIsZUFBQyxDQUFBLEFBQ2pCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsU0FBUyxDQUFFLElBQUksQ0FDZixVQUFVLENBQUUsSUFBSSxBQUNwQixDQUFBLEFBRUEsR0FBRyxjQUFjLGVBQUMsQ0FBQSxBQUNkLEtBQUssQ0FBRSxLQUFLLEFBQ2hCLENBQUEsQUFFQSxnQkFBZ0IsZUFBQyxDQUFBLEFBQ2IsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxDQUNaLFNBQVMsQ0FBRSxHQUFHLENBQ2QsUUFBUSxDQUFFLElBQUksQUFDbEIsQ0FBQSxBQUVBLG1CQUFtQixlQUFDLENBQUEsQUFDaEIsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxBQUNoQixDQUFBLEFBQ0EsR0FBRyxtQkFBbUIsZUFBQyxDQUFBLEFBQ25CLEtBQUssQ0FBRSxLQUFLLENBQ1osVUFBVSxDQUFFLEtBQUssQ0FDakIsUUFBUSxDQUFFLE1BQU0sQUFDcEIsQ0FBQSxBQUNBLEdBQUcsd0JBQXdCLGVBQUMsQ0FBQSxBQUN4QixRQUFRLENBQUUsSUFBSSxDQUNkLFVBQVUsQ0FBRSxLQUFLLEFBQ3JCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRXhjbHVkZWRGaWxlbmFtZXMuc3ZlbHRlIl19 */");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (137:16) {#each excluded_files as file_path}
function create_each_block$1(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-1wc77v2");
			add_location(li, file$1, 137, 20, 4077);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(137:16) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let h2;
	let t1;
	let br0;
	let br1;
	let t2;
	let div4;
	let div0;
	let select;
	let t3;
	let div1;
	let label;
	let t5;
	let input0;
	let t6;
	let br2;
	let t7;
	let br3;
	let t8;
	let input1;
	let br4;
	let t9;
	let input2;
	let br5;
	let br6;
	let t10;
	let div3;
	let t11;
	let t12_value = /*excluded_files*/ ctx[1].length + "";
	let t12;
	let t13;
	let input3;
	let input3_value_value;
	let t14;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded filenames";
			t1 = text("\nFilenames that contain these phrases will not be included in the Map of Content.\nThat also includes the file extension.");
			br0 = element("br");
			br1 = element("br");
			t2 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t3 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a phrase:";
			t5 = space();
			input0 = element("input");
			t6 = space();
			br2 = element("br");
			t7 = space();
			br3 = element("br");
			t8 = space();
			input1 = element("input");
			br4 = element("br");
			t9 = space();
			input2 = element("input");
			br5 = element("br");
			br6 = element("br");
			t10 = space();
			div3 = element("div");
			t11 = text("Currently excluded files: ");
			t12 = text(t12_value);
			t13 = space();
			input3 = element("input");
			t14 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-1wc77v2");
			add_location(h2, file$1, 79, 0, 2406);
			attr_dev(br0, "class", "svelte-1wc77v2");
			add_location(br0, file$1, 81, 38, 2553);
			attr_dev(br1, "class", "svelte-1wc77v2");
			add_location(br1, file$1, 81, 44, 2559);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-1wc77v2");
			add_location(select, file$1, 85, 8, 2632);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-1wc77v2");
			add_location(div0, file$1, 84, 4, 2599);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-1wc77v2");
			add_location(label, file$1, 94, 8, 2847);
			attr_dev(input0, "id", "Exluded-filenames");
			attr_dev(input0, "type", "text");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-1wc77v2");
			add_location(input0, file$1, 95, 8, 2901);
			attr_dev(br2, "class", "svelte-1wc77v2");
			add_location(br2, file$1, 102, 8, 3116);
			attr_dev(br3, "class", "svelte-1wc77v2");
			add_location(br3, file$1, 103, 8, 3131);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-1wc77v2");
			add_location(input1, file$1, 104, 8, 3146);
			attr_dev(br4, "class", "svelte-1wc77v2");
			add_location(br4, file$1, 111, 10, 3309);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-1wc77v2");
			add_location(input2, file$1, 112, 8, 3324);
			attr_dev(br5, "class", "svelte-1wc77v2");
			add_location(br5, file$1, 119, 10, 3496);
			attr_dev(br6, "class", "svelte-1wc77v2");
			add_location(br6, file$1, 119, 16, 3502);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-1wc77v2");
			add_location(div1, file$1, 93, 4, 2809);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-1wc77v2");
			add_location(input3, file$1, 123, 8, 3620);
			attr_dev(ul, "class", "svelte-1wc77v2");
			add_location(ul, file$1, 135, 12, 4000);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-1wc77v2");
			add_location(div2, file$1, 131, 8, 3861);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-1wc77v2");
			add_location(div3, file$1, 121, 4, 3524);
			attr_dev(div4, "id", "exlude-filenames");
			attr_dev(div4, "class", "svelte-1wc77v2");
			add_location(div4, file$1, 83, 0, 2567);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[9](select);
			append_dev(div4, t3);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t5);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[10](input0);
			set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			append_dev(div1, t6);
			append_dev(div1, br2);
			append_dev(div1, t7);
			append_dev(div1, br3);
			append_dev(div1, t8);
			append_dev(div1, input1);
			append_dev(div1, br4);
			append_dev(div1, t9);
			append_dev(div1, input2);
			append_dev(div1, br5);
			append_dev(div1, br6);
			append_dev(div4, t10);
			append_dev(div4, div3);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, t13);
			append_dev(div3, input3);
			append_dev(div3, t14);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen_dev(input1, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[13], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exclude_phrase_input_value*/ 4 && input0.value !== /*exclude_phrase_input_value*/ ctx[2]) {
				set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			}

			if (dirty & /*excluded_files*/ 2 && t12_value !== (t12_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t12, t12_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[9](null);
			/*input0_binding*/ ctx[10](null);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFilenames', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let exluded_filename_components = plugin.settings.get("exluded_filename_components");
	let all_files = app.vault.getFiles().map(file => file.basename + "." + file.extension);
	let excluded_files = allExcludedFiles();

	// TODO show all exluded files in TextEdit not list
	// add all existing excluded folders to select element
	var list_options_no = 0;

	onMount(() => {
		// create select entries for all already excluded filename components
		exluded_filename_components.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		return all_files.filter(filename => {
			return exluded_filename_components.some(path => filename.contains(path));
		});
	}

	let exclude_phrase_input_value;
	let exclude_phrase_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.settings.set({ exluded_filename_components });
	}

	function addValue() {
		if (!exclude_phrase_input_value) {
			return;
		}

		// Return if folder already on list
		if (exluded_filename_components.contains(exclude_phrase_input_value)) {
			$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);
			$$invalidate(2, exclude_phrase_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exclude_phrase_input_value, exclude_phrase_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		exluded_filename_components.push(exclude_phrase_input_value);

		// reset input field
		$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);

		$$invalidate(2, exclude_phrase_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				exluded_filename_components.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFilenames> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exclude_phrase_input = $$value;
			$$invalidate(3, exclude_phrase_input);
		});
	}

	function input0_input_handler() {
		exclude_phrase_input_value = this.value;
		$$invalidate(2, exclude_phrase_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		app,
		plugin,
		excludedlist,
		exluded_filename_components,
		all_files,
		excluded_files,
		list_options_no,
		allExcludedFiles,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('exluded_filename_components' in $$props) exluded_filename_components = $$props.exluded_filename_components;
		if ('all_files' in $$props) all_files = $$props.all_files;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('exclude_phrase_input_value' in $$props) $$invalidate(2, exclude_phrase_input_value = $$props.exclude_phrase_input_value);
		if ('exclude_phrase_input' in $$props) $$invalidate(3, exclude_phrase_input = $$props.exclude_phrase_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFilenames extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { app: 7, plugin: 8 }, add_css$1);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFilenames",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[7] === undefined && !('app' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[8] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/Settings.svelte generated by Svelte v3.42.1 */
const file = "src/svelte/Settings.svelte";

function add_css(target) {
	append_styles(target, "svelte-83jj2u", "#settings-container.svelte-83jj2u{position:relative;height:100%;width:100%}#CN_select.svelte-83jj2u{min-width:200px;width:50%;font-size:1em}#update_TLI_path_button.svelte-83jj2u{margin-left:auto;margin-right:auto}h2.svelte-83jj2u{text-align:left}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3Muc3ZlbHRlIiwibWFwcGluZ3MiOiJBQTZGRSxtQkFBbUIsY0FBQyxDQUFBLEFBQ2xCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQUFDYixDQUFBLEFBQ0EsVUFBVSxjQUFDLENBQUEsQUFDVCxTQUFTLENBQUUsS0FBSyxDQUNoQixLQUFLLENBQUUsR0FBRyxDQUNWLFNBQVMsQ0FBRSxHQUFHLEFBQ2hCLENBQUEsQUFDQSx1QkFBdUIsY0FBQyxDQUFBLEFBQ3RCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFlBQVksQ0FBRSxJQUFJLEFBQ3BCLENBQUEsQUFDQSxFQUFFLGNBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLEFBQ2xCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiU2V0dGluZ3Muc3ZlbHRlIl19 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (60:6) {#each all_files as filepath}
function create_each_block(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*filepath*/ ctx[14];
			option.value = option.__value;
			add_location(option, file, 60, 8, 2058);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(60:6) {#each all_files as filepath}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let h20;
	let t1;
	let span;
	let br0;
	let t3;
	let label;
	let t5;
	let input0;
	let t6;
	let datalist;
	let t7;
	let button;
	let t9;
	let br1;
	let t10;
	let div1;
	let h21;
	let t12;
	let input1;
	let t13;
	let br2;
	let t14;
	let excludedfolders;
	let t15;
	let excludedfilenames;
	let current;
	let mounted;
	let dispose;
	let each_value = /*all_files*/ ctx[6];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	excludedfolders = new ExcludedFolders({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	excludedfilenames = new ExcludedFilenames({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			h20 = element("h2");
			h20.textContent = "Path of your Central Note";
			t1 = text("\n    Current path:");
			span = element("span");
			span.textContent = `${/*current_tli*/ ctx[7]}`;
			br0 = element("br");
			t3 = space();
			label = element("label");
			label.textContent = "New path:";
			t5 = space();
			input0 = element("input");
			t6 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			button = element("button");
			button.textContent = "Save";
			t9 = space();
			br1 = element("br");
			t10 = space();
			div1 = element("div");
			h21 = element("h2");
			h21.textContent = "Auto-updating the Map of Content";
			t12 = text("\n    Update when switching between files");
			input1 = element("input");
			t13 = space();
			br2 = element("br");
			t14 = space();
			create_component(excludedfolders.$$.fragment);
			t15 = space();
			create_component(excludedfilenames.$$.fragment);
			attr_dev(h20, "class", "svelte-83jj2u");
			add_location(h20, file, 46, 4, 1645);
			attr_dev(span, "id", "tli_path");
			add_location(span, file, 47, 17, 1697);
			add_location(br0, file, 47, 57, 1737);
			attr_dev(label, "for", "myBrowser");
			add_location(label, file, 48, 4, 1748);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "list", "notes");
			attr_dev(input0, "id", "CN_select");
			attr_dev(input0, "placeholder", "Start typing to see suggestions...");
			attr_dev(input0, "class", "svelte-83jj2u");
			add_location(input0, file, 49, 4, 1794);
			attr_dev(datalist, "id", "notes");
			add_location(datalist, file, 58, 4, 1992);
			attr_dev(button, "id", "update_TLI_path_button");
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-83jj2u");
			add_location(button, file, 63, 4, 2114);
			attr_dev(div0, "class", "path");
			add_location(div0, file, 45, 2, 1622);
			add_location(br1, file, 71, 2, 2263);
			attr_dev(h21, "class", "svelte-83jj2u");
			add_location(h21, file, 73, 4, 2282);
			attr_dev(input1, "type", "checkbox");
			attr_dev(input1, "id", "auto-update-file-switch");
			input1.checked = /*settings*/ ctx[5].get("auto_update_on_file_change");
			add_location(input1, file, 74, 39, 2363);
			add_location(div1, file, 72, 2, 2272);
			add_location(br2, file, 82, 2, 2597);
			attr_dev(div2, "id", "settings-container");
			attr_dev(div2, "class", "svelte-83jj2u");
			add_location(div2, file, 44, 0, 1590);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, h20);
			append_dev(div0, t1);
			append_dev(div0, span);
			append_dev(div0, br0);
			append_dev(div0, t3);
			append_dev(div0, label);
			append_dev(div0, t5);
			append_dev(div0, input0);
			/*input0_binding*/ ctx[10](input0);
			set_input_value(input0, /*cn_path_input_value*/ ctx[3]);
			append_dev(div0, t6);
			append_dev(div0, datalist);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(datalist, null);
			}

			append_dev(div0, t7);
			append_dev(div0, button);
			append_dev(div2, t9);
			append_dev(div2, br1);
			append_dev(div2, t10);
			append_dev(div2, div1);
			append_dev(div1, h21);
			append_dev(div1, t12);
			append_dev(div1, input1);
			/*input1_binding*/ ctx[13](input1);
			append_dev(div2, t13);
			append_dev(div2, br2);
			append_dev(div2, t14);
			mount_component(excludedfolders, div2, null);
			append_dev(div2, t15);
			mount_component(excludedfilenames, div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen_dev(button, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(input1, "click", /*toggleUpdateOnFileSwitch*/ ctx[9], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cn_path_input_value*/ 8 && input0.value !== /*cn_path_input_value*/ ctx[3]) {
				set_input_value(input0, /*cn_path_input_value*/ ctx[3]);
			}

			if (dirty & /*all_files*/ 64) {
				each_value = /*all_files*/ ctx[6];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(datalist, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const excludedfolders_changes = {};
			if (dirty & /*app*/ 1) excludedfolders_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfolders_changes.plugin = /*plugin*/ ctx[1];
			excludedfolders.$set(excludedfolders_changes);
			const excludedfilenames_changes = {};
			if (dirty & /*app*/ 1) excludedfilenames_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfilenames_changes.plugin = /*plugin*/ ctx[1];
			excludedfilenames.$set(excludedfilenames_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(excludedfolders.$$.fragment, local);
			transition_in(excludedfilenames.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(excludedfolders.$$.fragment, local);
			transition_out(excludedfilenames.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			/*input0_binding*/ ctx[10](null);
			destroy_each(each_blocks, detaching);
			/*input1_binding*/ ctx[13](null);
			destroy_component(excludedfolders);
			destroy_component(excludedfilenames);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Settings', slots, []);
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let cn_input;
	let settings = plugin.settings;

	// TODO check the db is complete before allow settings changes (maybe have this svelte only do that and load all other components from other svelte files)
	// TODO lazy load all the file names and folders?
	// get list of all files for dropdown menu
	let all_files = app.vault.getFiles().map(file => file.path);

	Log("Central note path: " + settings.get("CN_path"));
	let cn_path_input_value;
	let current_tli = settings.get("CN_path");

	const updateCNPath = () => {
		if (!cn_path_input_value) {
			return;
		}

		// change TLI path
		settings.set({ CN_path: cn_path_input_value });
		document.getElementById("tli_path").textContent = cn_path_input_value;
		new obsidian.Notice("New Central Note path saved");

		// clear selection dropdown list
		$$invalidate(2, cn_input.value = "", cn_input);

		$$invalidate(3, cn_path_input_value = "");
	};

	let auto_update_file_switch_checkbox;

	const toggleUpdateOnFileSwitch = () => {
		settings.set({
			auto_update_on_file_change: !settings.get("auto_update_on_file_change")
		});

		if (settings.get("auto_update_on_file_change")) {
			$$invalidate(4, auto_update_file_switch_checkbox.checked = true, auto_update_file_switch_checkbox);
		} else {
			$$invalidate(4, auto_update_file_switch_checkbox.checked = false, auto_update_file_switch_checkbox);
		}
	};

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cn_input = $$value;
			$$invalidate(2, cn_input);
		});
	}

	function input0_input_handler() {
		cn_path_input_value = this.value;
		$$invalidate(3, cn_path_input_value);
	}

	const click_handler = () => {
		updateCNPath();
	};

	function input1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			auto_update_file_switch_checkbox = $$value;
			$$invalidate(4, auto_update_file_switch_checkbox);
		});
	}

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		App: obsidian.App,
		Notice: obsidian.Notice,
		TFile: obsidian.TFile,
		Log,
		GetAllFolders,
		ExcludedFolders,
		ExcludedFilenames,
		app,
		plugin,
		cn_input,
		settings,
		all_files,
		cn_path_input_value,
		current_tli,
		updateCNPath,
		auto_update_file_switch_checkbox,
		toggleUpdateOnFileSwitch
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
		if ('cn_input' in $$props) $$invalidate(2, cn_input = $$props.cn_input);
		if ('settings' in $$props) $$invalidate(5, settings = $$props.settings);
		if ('all_files' in $$props) $$invalidate(6, all_files = $$props.all_files);
		if ('cn_path_input_value' in $$props) $$invalidate(3, cn_path_input_value = $$props.cn_path_input_value);
		if ('current_tli' in $$props) $$invalidate(7, current_tli = $$props.current_tli);
		if ('auto_update_file_switch_checkbox' in $$props) $$invalidate(4, auto_update_file_switch_checkbox = $$props.auto_update_file_switch_checkbox);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		app,
		plugin,
		cn_input,
		cn_path_input_value,
		auto_update_file_switch_checkbox,
		settings,
		all_files,
		current_tli,
		updateCNPath,
		toggleUpdateOnFileSwitch,
		input0_binding,
		input0_input_handler,
		click_handler,
		input1_binding
	];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { app: 0, plugin: 1 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[0] === undefined && !('app' in props)) {
			console.warn("<Settings> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[1] === undefined && !('plugin' in props)) {
			console.warn("<Settings> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const DEFAULT_SETTINGS = {
    CN_path: "Central Note.md",
    exluded_folders: [],
    exluded_filename_components: [],
    settings_version: "0.1.12",
    plugin_version: "0.1.12",
    do_show_update_notice: false,
    auto_update_on_file_change: true
};
class SettingsManager {
    constructor(plugin) {
        this.plugin = plugin;
    }
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, this.UpgradeSettingsVersion(await this.plugin.loadData()));
        this.saveSettings();
    }
    async saveSettings() {
        await this.plugin.saveData(this.settings);
    }
    async set(updates) {
        Object.assign(this.settings, updates);
        await this.plugin.saveData(this.settings);
    }
    get(setting) {
        return this.settings[setting];
    }
    UpgradeSettingsVersion(object) {
        try {
            // if fresh install, go with defaults
            if (object == undefined) {
                Log("fresh install, returning empty settings object");
                return {};
            }
            // abort if settings are already in current version format
            if (object["settings_version"] === DEFAULT_SETTINGS["settings_version"]) {
                Log("Settings already in current version");
                return object;
            }
            // clone the object
            object = JSON.parse(JSON.stringify(object));
            let object_keys = Object.keys(object);
            Log("old settings object: " + String(object_keys));
            let old_version = undefined;
            // determine which version the legacy object is from
            if (!object_keys.contains("settings_version")) {
                old_version = "pre-0.1.10";
            }
            else {
                old_version = object["settings_version"];
            }
            Log("old settings version: " + old_version);
            if (old_version === "pre-0.1.10") {
                // extract the CN path from CN_path_per_vault and save it as CN_path
                Log("Converting CN path from pre-0.1.10 to 0.1.10");
                let cn_settings_vault_names = object["CN_path_per_vault"].map((val) => val[0]); // get just the name of all vaults there's a CN stored for
                if (cn_settings_vault_names.contains(this.plugin.app.vault.getName())) {
                    object["CN_path"] = object["CN_path_per_vault"][cn_settings_vault_names.indexOf(this.plugin.app.vault.getName())][1];
                }
                else {
                    delete object["CN_path"];
                }
                delete object["CN_path_per_vault"];
                object["settings_version"] = "0.1.10";
            } // clone the object
            if (old_version === "0.1.10") {
                Log("upgrading settings to 0.1.12");
                object["plugin_version"] = "0.1.12";
                object["settings_version"] = "0.1.12";
            }
            return this.UpgradeSettingsVersion(object);
        }
        catch (_a) {
            return {};
        }
    }
    isExludedFile(file) {
        let path_to_file = file.path;
        let in_excluded_folder = this.get("exluded_folders").some((path) => path_to_file.startsWith(path));
        if (in_excluded_folder) {
            return true;
        }
        let filename = file.basename + "." + file.extension;
        let has_excluded_filename = this.get("exluded_filename_components").some((phrase) => filename.contains(phrase));
        return has_excluded_filename;
    }
}
class MOCSettingTab extends obsidian.PluginSettingTab {
    constructor(plugin) {
        super(plugin.app, plugin);
        this.plugin = plugin;
        this.db = plugin.db;
        this._app = undefined;
    }
    display() {
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        this._app = new Settings({
            target: this.containerEl,
            props: { app: this.app, plugin: this.plugin },
        });
    }
    hide() {
        this.plugin.db.update();
    }
}

class MOCPlugin extends obsidian.Plugin {
    async onload() {
        this.settings = new SettingsManager(this);
        await this.settings.loadSettings();
        this.db = new DBManager(this);
        this.registerView(MOC_VIEW_TYPE, (leaf) => (this.view = new MOCView(leaf, this)));
        this.app.workspace.onLayoutReady(() => this.initializePlugin());
    }
    async initializePlugin() {
        this.addSettingTab(new MOCSettingTab(this));
        this.initLeaf();
        this.db.update(true);
        this.addRibbonIcon('sync', 'Update Map of Content', async () => {
            await this.db.update();
        });
        this.addCommand({
            id: 'rebuild-map-of-content',
            name: 'Update Map of Content',
            callback: () => {
                this.db.update();
            }
        });
        this.addCommand({
            id: 'open-note-as-central-note',
            name: 'Set current note as Central Note',
            callback: () => {
                let errors = [];
                // make sure a file is opened
                if (this.app.workspace.getActiveFile() == null) {
                    errors.push("No file has been opened");
                }
                else if (this.settings.isExludedFile(this.app.workspace.getActiveFile())) {
                    errors.push("This file has been excluded from the Map of Content.");
                }
                if (errors.length) {
                    new obsidian.Notice(errors[0]);
                    return;
                }
                this.settings.set({ CN_path: this.app.workspace.getActiveFile().path });
                this.db.update();
            }
        });
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(MOC_VIEW_TYPE).length) ;
        else {
            this.app.workspace.getRightLeaf(true).setViewState({
                type: MOC_VIEW_TYPE,
                active: true
            });
        }
    }
    rerender() {
        if (this.view) {
            this.view.rerender();
        }
    }
    onunload() {
        if (this.view) {
            this.view.onClose();
        }
        this.app.workspace.detachLeavesOfType(MOC_VIEW_TYPE);
    }
    CNexists() {
        let exists = !(this.app.vault.getAbstractFileByPath(this.settings.get("CN_path")) == null);
        return exists;
    }
    registerViewInstance(view) {
        this.view = view;
    }
    unregisterViewInstance(view) {
        this.view = undefined;
    }
}

module.exports = MOCPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
