/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

const LINKED_TO = " => ";
const LINKED_FROM = " <= ";
const LINKED_CN = "None";
const LINKED_BOTH = " <=> ";
const MOC_VIEW_TYPE = "map-of-content";

class Note {
    constructor(path, extension, links_to, linked_from, distance_from_CN) {
        this.path = path;
        this.extension = extension;
        this.links_to = links_to;
        this.linked_from = linked_from;
        this.distance_from_CN = distance_from_CN;
    }
}

/** log to the console */
const Log = (message, dev = false) => {
    let log_dev = false; // whether to print development log messages
    if (!dev || log_dev)
        console.log("[Map of Content] " + message);
};
/**  remove the given extension (by default ".md") from path  */
const CleanExtension = (path, extension = ".md") => {
    if (path.endsWith(extension)) {
        return path.slice(0, -extension.length);
    }
    return path;
};
/**@returns True if CTRL / Meta is pressed */
const IsCtrlPressed = (e) => {
    return window.navigator.userAgent.includes("Macintosh") ? e.metaKey : e.ctrlKey;
};
/**  Returns only the name of the actual file  */
const FileNameFromPath = (path) => {
    return path.split("/").last();
};
/**  return the full path if there are two or more notes with the same filename and extension, else only the filename
 * @todo only return as many segments (folders) of the path as are neccessary to uniquely differentiate the note
*/
const GetDisplayName = (path, db) => {
    let file_name = FileNameFromPath(path);
    let display_name = null;
    if (db.duplicate_file_status.get(file_name)) {
        display_name = CleanExtension(path);
    }
    else {
        display_name = CleanExtension(file_name);
    }
    return display_name;
};
const NavigateToFile = async (app, path, event) => {
    let file = app.metadataCache.getFirstLinkpathDest(path, "/");
    if (!file)
        return;
    IsCtrlPressed(event)
        ? app.workspace.splitActiveLeaf()
        : app.workspace.getUnpinnedLeaf();
    app.workspace.openLinkText(path, "/");
    //await leaf.openFile(file);
};
/** Get the paths of all folders in the vault, empty or not */
const GetAllFolders = (app) => {
    let vault_files = app.vault.getFiles();
    let all_folder_paths = [];
    vault_files.forEach((file) => {
        // cut of filename
        let folder_path = file.path.slice(0, file.path.length - (file.basename.length + file.extension.length + 1));
        // add path to collected paths
        if (folder_path.length && !all_folder_paths.contains(folder_path)) {
            all_folder_paths.push(folder_path);
        }
    });
    // store all parent folder paths as unique paths if they aren't yet because they don't include any notes directly
    all_folder_paths.forEach((path) => {
        let all_sub_paths = path.split("/");
        for (let i = 1; i < all_sub_paths.length - 1; i++) {
            let partial_path = all_sub_paths.slice(0, i).join("/") + "/";
            if (!all_folder_paths.contains(partial_path)) {
                all_folder_paths.push(partial_path);
            }
        }
    });
    return all_folder_paths;
};

class DBManager {
    constructor(app, plugin) {
        this.database_initialized = false; // false on plugin launch before the first (successful or failed) db update attempt
        this.app = app;
        this.plugin = plugin;
        this.all_paths = [];
        this.db = {};
        this.db_entries = Object.entries(this.db);
    }
    init() {
    }
    async update() {
        this.database_complete = false;
        try {
            // make sure the Central note exists
            if (!this.plugin.CNexists()) {
                new obsidian.Notice("Central note '" + this.plugin.getSettingValue("CN_path") + "' does not exist");
                new obsidian.Notice("You can adjust the path of your Central Note in the settings tab");
            }
            else {
                // save timestamp for tracking duration of rebuilding
                let start_tmsp = Date.now();
                new obsidian.Notice('Updating the Map of Content...');
                Log("Updating the Map of Content...");
                await new Promise(r => setTimeout(r, 0));
                // update db
                this.updateDB();
                await new Promise(r => setTimeout(r, 0));
                this.get_paths_ran = 0;
                this.updateDepthInformation();
                // delete old path information
                this.all_paths.length = 0;
                let path_so_far = { all_members: [this.plugin.getSettingValue("CN_path")], items: [[this.plugin.getSettingValue("CN_path"), LINKED_CN]] };
                await new Promise(r => setTimeout(r, 0));
                this.followPaths(path_so_far);
                await new Promise(r => setTimeout(r, 0));
                this.updateDescendants();
                // mark database as complete
                this.database_complete = true;
                new obsidian.Notice("Update complete");
                Log("Update complete");
                let end_tmsp = Date.now();
                Log("Took " + String((end_tmsp - start_tmsp) / 1000));
            }
        }
        finally {
            this.database_initialized = true;
            this.plugin.rerender();
        }
    }
    /**Return the internal note representation object for a given path */
    getNoteFromPath(path) {
        if (path in this.db) {
            return this.db[path];
        }
    }
    /** return all paths that include a certain note. Only return the path up to that note*/
    findPaths(path) {
        let filtered_paths = [];
        let filtered_paths_json = JSON.stringify(filtered_paths);
        this.all_paths.forEach((p) => {
            if (p.all_members.includes(path)) {
                if (p.all_members.last() == path) {
                    filtered_paths.push(p);
                }
                else {
                    let index = p.all_members.indexOf(path) + 1;
                    let chopped_of_path = p.items.slice(0, index);
                    if (!filtered_paths_json.includes(JSON.stringify(chopped_of_path))) {
                        // return a path element containing only the parts of the path information up to the note in question
                        filtered_paths.push({ all_members: p.all_members.slice(0, index), items: p.items.slice(0, index) });
                        filtered_paths_json = JSON.stringify(filtered_paths);
                    }
                }
            }
        });
        return filtered_paths;
    }
    all_notes() {
        return this.db_entries.map(([key, value]) => value);
    }
    updateDB() {
        // step 1: update the plugins internal representation of all notes in the vault
        Log("Updating the library...", true);
        // delete old state 
        for (let note in this.db) {
            delete this.db[note];
        }
        // read all files
        let vault_files = this.app.vault.getFiles();
        Log("Total number of files in vault: " + String(vault_files.length), true);
        // create new db entries 
        let entries_created = 0;
        vault_files.forEach((file) => {
            // make sure the file isn't in any exluded folders 
            if (!this.plugin.isExludedFile(file)) {
                // logging
                entries_created += 1;
                if (entries_created % 1000 == 0) {
                    Log("Created new db entries: " + String(entries_created), true);
                }
                let new_note = new Note(file.path, file.extension, [], [], null);
                // update the db
                this.db[new_note.path] = new_note;
            }
        });
        // update the db_entries representation of the db
        this.db_entries = Object.entries(this.db);
        this.db_keys = Object.keys(this.db);
        // check for duplicate files
        this.duplicate_file_status = new Map();
        let checked_files = 0;
        this.all_notes().forEach((note) => {
            let file_name = FileNameFromPath(note.path);
            // logging
            checked_files += 1;
            if (checked_files % 1000 == 0) {
                Log("checked for duplicates: " + String(checked_files), true);
            }
            if (this.duplicate_file_status.has(file_name)) { // If the file name is encountered twice or more, set it's duplicate status to true
                this.duplicate_file_status.set(file_name, true);
            }
            else {
                this.duplicate_file_status.set(file_name, false);
            }
        });
        // update the db_entries representation of the db
        this.db_entries = Object.entries(this.db);
        // step 2: analyze links 
        Log("analyzing links", true);
        this.all_notes().forEach((note) => {
            if (note.extension != "md") {
                // skip if it's not an md file. Other file types can't link to anything
                return;
            }
            //  save all the links this note links to
            let this_links_to = [];
            let linkcache = this.app.metadataCache.getCache(note.path).links;
            if (linkcache) {
                linkcache.forEach((val) => {
                    // check if the link is valid 
                    let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                    //TODO is it neccessary to avoid including links multiple times? maybe they can't even be duplicate in the linkcache
                    if (link_dest && !this_links_to.includes(link_dest.path) && this.db_keys.contains(link_dest.path)) {
                        this_links_to.push(link_dest.path);
                    }
                });
            }
            let transclusions = this.app.metadataCache.getCache(note.path).embeds;
            if (transclusions) {
                transclusions.forEach((val) => {
                    // check if the link is valid 
                    let link_dest = this.app.metadataCache.getFirstLinkpathDest(val.link, "/");
                    if (link_dest && !this_links_to.includes(link_dest.path) && this.db_keys.contains(link_dest.path)) {
                        this_links_to.push(link_dest.path);
                    }
                });
            }
            if (!this_links_to.length)
                return; // no links
            // save links_to information to db
            this.db[note.path].links_to = this_links_to;
            // add a "linked_from" reference to the db entry of all notes that are linked to from this note
            this_links_to.forEach((link) => {
                if (!this.db[link].linked_from.includes(note.path)) {
                    this.db[link].linked_from.push(note.path);
                }
            });
        });
    }
    /** starting from the CN, follow all paths and store the information on how long the shortest path to each note is*/
    updateDepthInformation() {
        Log("Analyzing distance from Central Note. CN path: " + this.plugin.getSettingValue("CN_path"), true);
        let depth = 0; // distance from the CN. starts at zero 
        let checked_links = []; // all the notes that have already been visited. dont visit them again to prevent endless loops
        let do_continue = true;
        // start at the the CN
        let links = [this.plugin.getSettingValue("CN_path")];
        while (do_continue) {
            let next_links = [];
            links.forEach((link) => {
                // extract all active and passive connections (linked to or from) for the next iteration of link-following
                let note = this.getNoteFromPath(link);
                note.links_to.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                note.linked_from.forEach((link) => {
                    if (!checked_links.contains(link) && !next_links.contains(link)) {
                        next_links.push(link);
                    }
                });
                // update the info on how far the note is removed from CN
                if (note.distance_from_CN == null || note.distance_from_CN > depth) {
                    note.distance_from_CN = depth;
                }
                checked_links.push(link);
            });
            links = next_links.slice();
            if (links.length == 0) {
                do_continue = false;
            }
            depth += 1;
        }
    }
    /**
     * Recursive function that follows all possible paths from the CN that aren't unreasonably long or circular and stores them
     * @param path_so_far the path to be extended in this iteration
     */
    followPaths(path_so_far) {
        // logging
        this.get_paths_ran += 1;
        if (this.get_paths_ran % 10000 == 0) {
            Log("get paths ran " + String(this.get_paths_ran), true);
        }
        let note = this.db[path_so_far.all_members.last()];
        let all_members = path_so_far.all_members;
        let items = path_so_far.items;
        let new_paths_to_follow = [];
        let note_links_to = note.links_to.slice();
        let note_linked_from = note.linked_from.slice();
        note_links_to.forEach((link) => {
            // check whether the linked note also links to the current note
            let linked_to_or_both_ways = LINKED_TO;
            if (note_linked_from.contains(link)) {
                // remove it from the passive links to be followed later
                let index = note_linked_from.indexOf(link, 0);
                note_linked_from.splice(index, 1);
                linked_to_or_both_ways = LINKED_BOTH;
            }
            let new_path = { all_members: all_members.concat(link), items: items.concat([[link, linked_to_or_both_ways]]) };
            new_paths_to_follow.push(new_path);
        });
        note_linked_from.forEach((link) => {
            let new_path = { all_members: all_members.concat(link), items: items.concat([[link, LINKED_FROM]]) };
            new_paths_to_follow.push(new_path);
        });
        let called_itself = false; // whether the function called itself
        // function calls itself to explore every new path  
        new_paths_to_follow.forEach((path) => {
            // the path without the next note that is to be explored
            let all_items_so_far = path.all_members.slice(0, -1);
            let last_item_path = path.all_members.last();
            let last_item = this.getNoteFromPath(last_item_path);
            // stop if this note is already part of the explored path
            if (all_items_so_far.includes(last_item_path)) {
                return;
            }
            // stop if the path meanders too much 
            if ((path.all_members.length - last_item.distance_from_CN) > 1) {
                return;
            }
            this.followPaths(path);
            called_itself = true;
        });
        if (!called_itself) {
            // only add the path if it does't lead anywhere else. No need to have paths that are parts of other paths
            this.all_paths.push(path_so_far);
        }
    }
    /** for every note, store all notes that come right after it in any path. this is for generating the Map Of Content later on */
    updateDescendants() {
        // delete old Information
        this.descendants = new Map();
        let descendants_ran = 0;
        this.all_paths.forEach((p) => {
            p.all_members.forEach((note_path, index) => {
                // make sure it's not the last member of the path
                if (!(index == p.all_members.length - 1)) {
                    // create entry in descendants if it doesn't exist
                    if (!this.descendants.has(note_path)) {
                        this.descendants.set(note_path, []);
                    }
                    // logging
                    descendants_ran += 1;
                    if (descendants_ran % 1000 == 0) {
                        Log("descendants ran " + String(descendants_ran), true);
                    }
                    let next_path_member = p.all_members[index + 1];
                    // add note as descendant if it isn't already stored in array
                    if (!this.descendants.get(note_path).includes(next_path_member)) {
                        this.descendants.set(note_path, this.descendants.get(note_path).concat(next_path_member));
                    }
                }
            });
        });
    }
}

function noop() { }
function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
        loc: { file, line, column, char }
    };
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root.host) {
        return root;
    }
    return document;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : options.context || []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

function dispatch_dev(type, detail) {
    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.42.1' }, detail), true));
}
function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node });
    append(target, node);
}
function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor });
    insert(target, node, anchor);
}
function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node });
    detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
    if (has_prevent_default)
        modifiers.push('preventDefault');
    if (has_stop_propagation)
        modifiers.push('stopPropagation');
    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
    const dispose = listen(node, event, handler, options);
    return () => {
        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
        dispose();
    };
}
function attr_dev(node, attribute, value) {
    attr(node, attribute, value);
    if (value == null)
        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
    else
        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
}
function prop_dev(node, property, value) {
    node[property] = value;
    dispatch_dev('SvelteDOMSetProperty', { node, property, value });
}
function set_data_dev(text, data) {
    data = '' + data;
    if (text.wholeText === data)
        return;
    dispatch_dev('SvelteDOMSetData', { node: text, data });
    text.data = data;
}
function validate_each_argument(arg) {
    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
        let msg = '{#each} only iterates over array-like objects.';
        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
            msg += ' You can use a spread to convert this iterable into an array.';
        }
        throw new Error(msg);
    }
}
function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
        if (!~keys.indexOf(slot_key)) {
            console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
        }
    }
}
/**
 * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
 */
class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
        if (!options || (!options.target && !options.$$inline)) {
            throw new Error("'target' is a required option");
        }
        super();
    }
    $destroy() {
        super.$destroy();
        this.$destroy = () => {
            console.warn('Component was already destroyed'); // eslint-disable-line no-console
        };
    }
    $capture_state() { }
    $inject_state() { }
}

/* src/svelte/Error.svelte generated by Svelte v3.42.1 */

const { Error: Error_1 } = globals;

function add_css$6(target) {
	append_styles(target, "svelte-6j6zdr", "\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3Iuc3ZlbHRlIiwibWFwcGluZ3MiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsic3JjL3N2ZWx0ZS9FcnJvci5zdmVsdGUiXX0= */");
}

function create_fragment$6(ctx) {
	const block = {
		c: noop,
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$6.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$6($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Error', slots, []);
	let { message } = $$props;
	const writable_props = ['message'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Error> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
	};

	$$self.$capture_state = () => ({ message });

	$$self.$inject_state = $$props => {
		if ('message' in $$props) $$invalidate(0, message = $$props.message);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [message];
}

class Error$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { message: 0 }, add_css$6);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Error",
			options,
			id: create_fragment$6.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*message*/ ctx[0] === undefined && !('message' in props)) {
			console.warn("<Error> was created without expected prop 'message'");
		}
	}

	get message() {
		throw new Error_1("<Error>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set message(value) {
		throw new Error_1("<Error>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/SaplingImage.svelte generated by Svelte v3.42.1 */

const file$5 = "src/svelte/SaplingImage.svelte";

function add_css$5(target) {
	append_styles(target, "svelte-z5pusg", "div#seedling-container.svelte-z5pusg{position:fixed;bottom:5%;width:100%;height:25%;max-height:200px;align-content:center}svg#seedling.svelte-z5pusg{display:block;width:100%;height:100%;opacity:60%;position:relative;margin-left:auto;margin-right:auto}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2FwbGluZ0ltYWdlLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUF1SkEsR0FBRyxtQkFBbUIsY0FBQyxDQUFBLEFBQ2YsUUFBUSxDQUFFLEtBQUssQ0FDZixNQUFNLENBQUUsRUFBRSxDQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLEdBQUcsQ0FDWCxVQUFVLENBQUUsS0FBSyxDQUNqQixhQUFhLENBQUUsTUFBTSxBQUN6QixDQUFBLEFBQ0EsR0FBRyxTQUFTLGNBQUMsQ0FBQSxBQUNULE9BQU8sQ0FBRSxLQUFLLENBQ2QsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLE9BQU8sQ0FBRSxHQUFHLENBQ1osUUFBUSxDQUFFLFFBQVEsQ0FDbEIsV0FBVyxDQUFFLElBQUksQ0FDakIsWUFBWSxDQUFFLElBQUksQUFDdEIsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJTYXBsaW5nSW1hZ2Uuc3ZlbHRlIl19 */");
}

function create_fragment$5(ctx) {
	let div;
	let svg;
	let path0;
	let path1;
	let path2;
	let path3;
	let path4;
	let path5;
	let g0;
	let path6;
	let circle0;
	let circle1;
	let circle2;
	let circle3;
	let circle4;
	let circle5;
	let g1;
	let circle6;
	let circle7;
	let circle8;
	let g2;
	let circle9;
	let circle10;

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			path5 = svg_element("path");
			g0 = svg_element("g");
			path6 = svg_element("path");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			circle3 = svg_element("circle");
			circle4 = svg_element("circle");
			circle5 = svg_element("circle");
			g1 = svg_element("g");
			circle6 = svg_element("circle");
			circle7 = svg_element("circle");
			circle8 = svg_element("circle");
			g2 = svg_element("g");
			circle9 = svg_element("circle");
			circle10 = svg_element("circle");
			set_style(path0, "fill", "#6DC82A");
			attr_dev(path0, "d", "M282.915,211.33c-3.863,4.077-9.324,6.225-14.941,5.877c-1.943-0.123-48.129-3.298-95.369-28.754\nc-44.641-24.056-98.511-72.868-101.639-168.804c-0.172-5.232,1.831-10.3,5.531-14.002C82.141,0,88.765,0,91.594,0\nc0.001,0,0.001,0,0.001,0c2.001,0,49.045,0.338,97.518,29.403c25.163,15.089,46.083,35.148,62.181,59.622\nc19.446,29.566,31.786,65.589,36.678,107.066C288.63,201.671,286.777,207.252,282.915,211.33z");
			add_location(path0, file$5, 15, 8, 429);
			set_style(path1, "fill", "#5EAC24");
			attr_dev(path1, "d", "M251.887,89.963c-7.938,14.65-14.633,31.15-19.437,49.738c-4.32,12.902-10.917,35.57-16.362,66.933\nc28.719,8.988,50.563,10.49,51.886,10.573c5.618,0.349,11.078-1.799,14.941-5.877c3.862-4.078,5.715-9.659,5.056-15.237\nC283.13,155.048,270.983,119.354,251.887,89.963z");
			add_location(path1, file$5, 22, 8, 901);
			set_style(path2, "fill", "#4E901E");
			attr_dev(path2, "d", "M266.674,178.855l-40.788-39.775L215.13,85.482c-0.851-4.248-4.984-6.997-9.233-6.147\nc-4.248,0.852-6.998,4.987-6.147,9.233l6.245,31.116L183.5,97.748l-10.904-54.335c-0.851-4.248-4.986-6.994-9.233-6.147\nc-4.248,0.852-6.998,4.986-6.147,9.233l6.392,31.852l-52.492-51.184c-3.104-3.024-8.066-2.96-11.091,0.14\nc-3.024,3.102-2.961,8.067,0.14,11.09l57.719,56.284l-40.264-0.688c-4.327-0.118-7.901,3.377-7.976,7.708\nc-0.073,4.331,3.377,7.901,7.708,7.976l56.907,0.973l26.775,26.11l-40.88-0.697c-4.292-0.096-7.901,3.377-7.976,7.708\nc-0.073,4.331,3.377,7.901,7.708,7.976l57.522,0.982l38.311,37.358c1.526,1.487,3.501,2.227,5.474,2.227\nc2.04,0,4.078-0.792,5.617-2.368C269.837,186.843,269.775,181.878,266.674,178.855z");
			add_location(path2, file$5, 28, 8, 1236);
			set_style(path3, "fill", "#91DC5A");
			attr_dev(path3, "d", "M467.824,5.914c-3.863-4.077-9.324-6.225-14.941-5.877c-1.943,0.123-48.129,3.298-95.369,28.754\nc-36.301,19.561-78.701,55.493-94.961,119.819c-8.881,26.153-28.446,97.078-23.87,203.868c0.396,9.239,8.01,16.463,17.17,16.462\nc0.248,0,0.498-0.005,0.749-0.016c9.489-0.407,16.852-8.428,16.446-17.919c-2.371-55.323,2.184-100.55,8.054-133.923\nc13.209-0.757,52.566-5.045,92.92-29.241c25.163-15.089,46.083-35.148,62.181-59.622c19.446-29.566,31.786-65.589,36.678-107.066\nC473.539,15.573,471.686,9.992,467.824,5.914z");
			add_location(path3, file$5, 38, 8, 2010);
			set_style(path4, "fill", "#5EAC24");
			attr_dev(path4, "d", "M443.129,27.307c-3.026-3.101-7.991-3.164-11.091-0.14L379.55,78.35l6.392-31.851\nc0.851-4.247-1.899-8.38-6.147-9.233c-4.242-0.848-8.381,1.899-9.233,6.147l-10.905,54.335l-22.494,21.936l6.245-31.116\nc0.852-4.247-1.899-8.38-6.147-9.233c-4.246-0.85-8.381,1.899-9.233,6.147l-10.757,53.599l-40.789,39.775\nc-3.102,3.024-3.163,7.989-0.14,11.09c1.538,1.576,3.575,2.367,5.617,2.367c1.974,0,3.95-0.74,5.474-2.227l38.311-37.358\nl57.524-0.982c4.331-0.074,7.781-3.644,7.708-7.976c-0.073-4.286-3.57-7.709-7.839-7.709c-0.046,0-0.092,0-0.137,0.001\nl-40.881,0.697l26.775-26.11l56.907-0.973c4.331-0.074,7.781-3.644,7.708-7.976c-0.073-4.286-3.57-7.709-7.839-7.709\nc-0.046,0-0.092,0-0.137,0.001l-40.264,0.688l57.719-56.284C446.091,35.373,446.153,30.408,443.129,27.307z");
			add_location(path4, file$5, 46, 8, 2585);
			set_style(path5, "fill", "#CC7400");
			attr_dev(path5, "d", "M449.193,410.125c-7.91,0-15.298,2.228-21.577,6.087c-9.274-30.342-37.491-52.414-70.869-52.414\nc-3.704,0-7.341,0.28-10.898,0.805c-15.13-34.614-49.655-58.813-89.846-58.813s-74.716,24.199-89.846,58.813\nc-3.558-0.525-7.196-0.805-10.898-0.805c-33.378,0-61.594,22.072-70.869,52.414c-6.279-3.859-13.666-6.087-21.577-6.087\nc-22.795,0-41.275,18.48-41.275,41.275s18.48,41.275,41.275,41.275c12.216,0,23.188-5.31,30.744-13.744\nc13.282,19.931,35.954,33.07,61.701,33.07c20.851,0,39.68-8.625,53.144-22.487c14.097,7.848,30.321,12.334,47.601,12.334\nc17.279,0,33.504-4.487,47.601-12.334c13.466,13.862,32.293,22.487,53.144,22.487c25.747,0,48.42-13.137,61.701-33.07\nc7.557,8.434,18.529,13.744,30.744,13.744c22.795,0,41.275-18.48,41.275-41.275C490.468,428.604,471.988,410.125,449.193,410.125z");
			add_location(path5, file$5, 56, 8, 3406);
			set_style(path6, "fill", "#AA6100");
			attr_dev(path6, "d", "M309.888,345.918c9.748,0,19.154,1.443,28.042,4.092c-17.525-26.63-47.666-44.221-81.928-44.221\nc-40.192,0-74.716,24.199-89.846,58.813c-3.558-0.525-7.196-0.805-10.898-0.805c-33.378,0-61.594,22.072-70.869,52.414\nc-6.279-3.859-13.666-6.087-21.577-6.087c-22.795,0-41.275,18.48-41.275,41.275c0,22.795,18.48,41.275,41.275,41.275\nc12.216,0,23.188-5.31,30.744-13.744c13.282,19.931,35.954,33.07,61.701,33.07c20.851,0,39.68-8.625,53.144-22.487\nc6.148,3.423,12.7,6.204,19.567,8.255c-10.172-15.451-16.108-33.939-16.108-53.821C211.86,389.808,255.749,345.918,309.888,345.918\nz");
			add_location(path6, file$5, 67, 12, 4268);
			set_style(circle0, "fill", "#AA6100");
			attr_dev(circle0, "cx", "294.986");
			attr_dev(circle0, "cy", "421.014");
			attr_dev(circle0, "r", "17.771");
			add_location(circle0, file$5, 76, 12, 4920);
			set_style(circle1, "fill", "#AA6100");
			attr_dev(circle1, "cx", "366.638");
			attr_dev(circle1, "cy", "462.863");
			attr_dev(circle1, "r", "17.771");
			add_location(circle1, file$5, 82, 12, 5078);
			set_style(circle2, "fill", "#AA6100");
			attr_dev(circle2, "cx", "355.71");
			attr_dev(circle2, "cy", "402.055");
			attr_dev(circle2, "r", "6.838");
			add_location(circle2, file$5, 88, 12, 5236);
			set_style(circle3, "fill", "#AA6100");
			attr_dev(circle3, "cx", "256.002");
			attr_dev(circle3, "cy", "469.702");
			attr_dev(circle3, "r", "6.838");
			add_location(circle3, file$5, 94, 12, 5392);
			set_style(circle4, "fill", "#AA6100");
			attr_dev(circle4, "cx", "277.209");
			attr_dev(circle4, "cy", "376.498");
			attr_dev(circle4, "r", "6.838");
			add_location(circle4, file$5, 100, 12, 5549);
			set_style(circle5, "fill", "#AA6100");
			attr_dev(circle5, "cx", "424.351");
			attr_dev(circle5, "cy", "438.791");
			attr_dev(circle5, "r", "6.838");
			add_location(circle5, file$5, 106, 12, 5706);
			add_location(g0, file$5, 66, 8, 4252);
			set_style(circle6, "fill", "#CC7400");
			attr_dev(circle6, "cx", "384.415");
			attr_dev(circle6, "cy", "317.216");
			attr_dev(circle6, "r", "17.771");
			add_location(circle6, file$5, 114, 12, 5888);
			set_style(circle7, "fill", "#CC7400");
			attr_dev(circle7, "cx", "424.351");
			attr_dev(circle7, "cy", "356.953");
			attr_dev(circle7, "r", "6.838");
			add_location(circle7, file$5, 120, 12, 6046);
			set_style(circle8, "fill", "#CC7400");
			attr_dev(circle8, "cx", "424.351");
			attr_dev(circle8, "cy", "324.055");
			attr_dev(circle8, "r", "6.838");
			add_location(circle8, file$5, 126, 12, 6203);
			add_location(g1, file$5, 113, 8, 5872);
			set_style(circle9, "fill", "#AA6100");
			attr_dev(circle9, "cx", "112.53");
			attr_dev(circle9, "cy", "310.942");
			attr_dev(circle9, "r", "17.771");
			add_location(circle9, file$5, 134, 12, 6385);
			set_style(circle10, "fill", "#AA6100");
			attr_dev(circle10, "cx", "83.02");
			attr_dev(circle10, "cy", "350.115");
			attr_dev(circle10, "r", "6.838");
			add_location(circle10, file$5, 140, 12, 6542);
			add_location(g2, file$5, 133, 8, 6369);
			attr_dev(svg, "id", "seedling");
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "x", "0px");
			attr_dev(svg, "y", "0px");
			attr_dev(svg, "viewBox", "0 0 512.001 512.001");
			set_style(svg, "enable-background", "new 0 0 512.001 512.001");
			attr_dev(svg, "xml:space", "preserve");
			attr_dev(svg, "class", "svelte-z5pusg");
			add_location(svg, file$5, 4, 4, 114);
			attr_dev(div, "id", "seedling-container");
			attr_dev(div, "class", "svelte-z5pusg");
			add_location(div, file$5, 2, 0, 3);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, path0);
			append_dev(svg, path1);
			append_dev(svg, path2);
			append_dev(svg, path3);
			append_dev(svg, path4);
			append_dev(svg, path5);
			append_dev(svg, g0);
			append_dev(g0, path6);
			append_dev(g0, circle0);
			append_dev(g0, circle1);
			append_dev(g0, circle2);
			append_dev(g0, circle3);
			append_dev(g0, circle4);
			append_dev(g0, circle5);
			append_dev(svg, g1);
			append_dev(g1, circle6);
			append_dev(g1, circle7);
			append_dev(g1, circle8);
			append_dev(svg, g2);
			append_dev(g2, circle9);
			append_dev(g2, circle10);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$5.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$5($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SaplingImage', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SaplingImage> was created with unknown prop '${key}'`);
	});

	return [];
}

class SaplingImage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$5, create_fragment$5, safe_not_equal, {}, add_css$5);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SaplingImage",
			options,
			id: create_fragment$5.name
		});
	}
}

/* src/svelte/Descendants.svelte generated by Svelte v3.42.1 */
const file$4 = "src/svelte/Descendants.svelte";

function add_css$4(target) {
	append_styles(target, "svelte-19blxph", "a.link.svelte-19blxph.svelte-19blxph{cursor:pointer}ul.svelte-19blxph.svelte-19blxph{list-style:none;margin:0;padding:0}li.svelte-19blxph.svelte-19blxph{list-style:none;margin:0;padding:0}ul.svelte-19blxph.svelte-19blxph{padding-left:1em}li.svelte-19blxph.svelte-19blxph{padding-left:1em;border:5px dotted black;border-width:0 0 1px 1px}li.dark-mode.svelte-19blxph.svelte-19blxph{padding-left:1em;border:5px dotted lightgray;border-width:0 0 1px 1px}li.container.svelte-19blxph.svelte-19blxph{border-bottom:0px}li.svelte-19blxph p.svelte-19blxph{margin:0;position:relative;top:0em}li.svelte-19blxph ul.svelte-19blxph{border-top:1px dotted black;margin-left:-1em;padding-left:2em}li.dark-mode.svelte-19blxph ul.svelte-19blxph{border-top:1px dotted lightgray}ul li.svelte-19blxph:last-child ul.svelte-19blxph{border-left:none;margin-left:-17px}.expand-arrow.svelte-19blxph.svelte-19blxph{color:darkgrey}.expand-arrow.svelte-19blxph.svelte-19blxph:hover{color:gray}div.expand_button.svelte-19blxph.svelte-19blxph{display:inline}div.expand_button.svelte-19blxph svg.svg.svelte-19blxph{width:14px;height:14px;margin-top:5px}li.light-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph{fill:darkgrey}li.light-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph:hover{fill:gray}li.dark-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph{fill:gray}li.dark-mode.svelte-19blxph div.expand_button svg.svg.svelte-19blxph:hover{fill:lightgray}div.expand_button.svelte-19blxph svg.svg.expanded.svelte-19blxph{transform:rotate(90deg)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVzY2VuZGFudHMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQWlGRSxDQUFDLEtBQUssOEJBQUMsQ0FBQSxBQUNMLE1BQU0sQ0FBRSxPQUFPLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDhCQUFDLENBQUEsQUFDRCxVQUFVLENBQUUsSUFBSSxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUNULE9BQU8sQ0FBRSxDQUFDLEFBQ1osQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLENBQ2hCLE1BQU0sQ0FBRSxDQUFDLENBQ1QsT0FBTyxDQUFFLENBQUMsQUFDWixDQUFBLEFBRUEsRUFBRSw4QkFBQyxDQUFBLEFBQ0QsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUsOEJBQUMsQ0FBQSxBQUNELFlBQVksQ0FBRSxHQUFHLENBQ2pCLE1BQU0sQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDeEIsWUFBWSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQUFDM0IsQ0FBQSxBQUNBLEVBQUUsVUFBVSw4QkFBQyxDQUFBLEFBQ1gsWUFBWSxDQUFFLEdBQUcsQ0FDakIsTUFBTSxDQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUM1QixZQUFZLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxBQUMzQixDQUFBLEFBQ0EsRUFBRSxVQUFVLDhCQUFDLENBQUEsQUFDWCxhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxDQUFDLGVBQUMsQ0FBQSxBQUNILE1BQU0sQ0FBRSxDQUFDLENBQ1QsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLEdBQUcsQUFDVixDQUFBLEFBRUEsaUJBQUUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNKLFVBQVUsQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDNUIsV0FBVyxDQUFFLElBQUksQ0FDakIsWUFBWSxDQUFFLEdBQUcsQUFDbkIsQ0FBQSxBQUVBLEVBQUUseUJBQVUsQ0FBQyxFQUFFLGVBQUMsQ0FBQSxBQUNkLFVBQVUsQ0FBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQUFDbEMsQ0FBQSxBQUVBLEVBQUUsQ0FBQyxpQkFBRSxXQUFXLENBQUMsRUFBRSxlQUFDLENBQUEsQUFDbEIsV0FBVyxDQUFFLElBQUksQ0FDakIsV0FBVyxDQUFFLEtBQUssQUFDcEIsQ0FBQSxBQUVBLGFBQWEsOEJBQUMsQ0FBQSxBQUNaLEtBQUssQ0FBRSxRQUFRLEFBQ2pCLENBQUEsQUFFQSwyQ0FBYSxNQUFNLEFBQUMsQ0FBQSxBQUNsQixLQUFLLENBQUUsSUFBSSxBQUNiLENBQUEsQUFFQSxHQUFHLGNBQWMsOEJBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsTUFBTSxBQUNqQixDQUFBLEFBRUEsR0FBRyw2QkFBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDeEIsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFVBQVUsQ0FBRSxHQUFHLEFBQ2pCLENBQUEsQUFFQSxFQUFFLDBCQUFXLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxJQUFJLGVBQUMsQ0FBQSxBQUN0QyxJQUFJLENBQUUsUUFBUSxBQUNoQixDQUFBLEFBQ0EsRUFBRSwwQkFBVyxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDNUMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBRUEsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsSUFBSSxlQUFDLENBQUEsQUFDckMsSUFBSSxDQUFFLElBQUksQUFDWixDQUFBLEFBQ0EsRUFBRSx5QkFBVSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsbUJBQUksTUFBTSxBQUFDLENBQUEsQUFDM0MsSUFBSSxDQUFFLFNBQVMsQUFDakIsQ0FBQSxBQUVBLEdBQUcsNkJBQWMsQ0FBQyxHQUFHLElBQUksU0FBUyxlQUFDLENBQUEsQUFDakMsU0FBUyxDQUFFLE9BQU8sS0FBSyxDQUFDLEFBQzFCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRGVzY2VuZGFudHMuc3ZlbHRlIl19 */");
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (30:0) {:else}
function create_else_block$1(ctx) {
	let li;
	let p;
	let t;
	let ul;
	let current;

	function select_block_type_1(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0) return create_if_block_2$1;
		return create_else_block_1$1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*children*/ ctx[5].length > 0 && /*expanded*/ ctx[4] && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			li = element("li");
			p = element("p");
			if_block0.c();
			t = space();
			ul = element("ul");
			if (if_block1) if_block1.c();
			attr_dev(p, "class", "svelte-19blxph");
			add_location(p, file$4, 31, 4, 780);
			attr_dev(ul, "class", "svelte-19blxph");
			add_location(ul, file$4, 62, 4, 1633);
			attr_dev(li, "class", "container " + /*dark_mode*/ ctx[6] + " svelte-19blxph");
			add_location(li, file$4, 30, 2, 741);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, p);
			if_block0.m(p, null);
			append_dev(li, t);
			append_dev(li, ul);
			if (if_block1) if_block1.m(ul, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(p, null);
				}
			}

			if (/*children*/ ctx[5].length > 0 && /*expanded*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*children, expanded*/ 48) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1$1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(ul, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(30:0) {:else}",
		ctx
	});

	return block;
}

// (28:0) {#if indentation == 0 && children.length == 0}
function create_if_block$1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("No descendants");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(28:0) {#if indentation == 0 && children.length == 0}",
		ctx
	});

	return block;
}

// (35:6) {:else}
function create_else_block_1$1(ctx) {
	let t0;
	let a;
	let t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t1;
	let mounted;
	let dispose;
	let if_block = /*children*/ ctx[5].length > 0 && create_if_block_3$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t0 = space();
			a = element("a");
			t1 = text(t1_value);
			attr_dev(a, "class", "link svelte-19blxph");
			attr_dev(a, "title", /*note_path*/ ctx[0]);
			add_location(a, file$4, 51, 8, 1392);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, a, anchor);
			append_dev(a, t1);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*click_handler_1*/ ctx[8], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*children*/ ctx[5].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$1(ctx);
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*note_path, db*/ 3 && t1_value !== (t1_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t1, t1_value);

			if (dirty & /*note_path*/ 1) {
				attr_dev(a, "title", /*note_path*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1$1.name,
		type: "else",
		source: "(35:6) {:else}",
		ctx
	});

	return block;
}

// (33:6) {#if indentation == 0}
function create_if_block_2$1(ctx) {
	let t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*note_path, db*/ 3 && t_value !== (t_value = GetDisplayName(/*note_path*/ ctx[0], /*db*/ ctx[1]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(33:6) {#if indentation == 0}",
		ctx
	});

	return block;
}

// (35:13) {#if children.length > 0}
function create_if_block_3$1(ctx) {
	let span;
	let div;
	let mounted;
	let dispose;

	function select_block_type_2(ctx, dirty) {
		if (/*expanded*/ ctx[4]) return create_if_block_4$1;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			span = element("span");
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "expand_button svelte-19blxph");
			add_location(div, file$4, 40, 13, 1035);
			attr_dev(span, "class", "expand-arrow svelte-19blxph");
			add_location(span, file$4, 35, 10, 902);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, div);
			if_block.m(div, null);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*click_handler*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(35:13) {#if children.length > 0}",
		ctx
	});

	return block;
}

// (46:14) {:else}
function create_else_block_2(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$4, 46, 18, 1266);
			attr_dev(svg, "class", "svg svelte-19blxph");
			add_location(svg, file$4, 45, 21, 1230);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(46:14) {:else}",
		ctx
	});

	return block;
}

// (42:14) {#if expanded}
function create_if_block_4$1(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#expand-arrow-svg");
			add_location(use, file$4, 43, 18, 1153);
			attr_dev(svg, "class", "svg expanded svelte-19blxph");
			add_location(svg, file$4, 42, 16, 1108);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(42:14) {#if expanded}",
		ctx
	});

	return block;
}

// (64:6) {#if children.length > 0 && expanded}
function create_if_block_1$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*children*/ ctx[5];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*db, app, children, indentation*/ 46) {
				each_value = /*children*/ ctx[5];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(64:6) {#if children.length > 0 && expanded}",
		ctx
	});

	return block;
}

// (65:8) {#each children as child}
function create_each_block$4(ctx) {
	let descendants;
	let current;

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[1],
				app: /*app*/ ctx[3],
				note_path: /*child*/ ctx[9],
				indentation: /*indentation*/ ctx[2] + 1
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(descendants.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(descendants, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const descendants_changes = {};
			if (dirty & /*db*/ 2) descendants_changes.db = /*db*/ ctx[1];
			if (dirty & /*app*/ 8) descendants_changes.app = /*app*/ ctx[3];
			if (dirty & /*children*/ 32) descendants_changes.note_path = /*child*/ ctx[9];
			if (dirty & /*indentation*/ 4) descendants_changes.indentation = /*indentation*/ ctx[2] + 1;
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(descendants, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$4.name,
		type: "each",
		source: "(65:8) {#each children as child}",
		ctx
	});

	return block;
}

function create_fragment$4(ctx) {
	let svg;
	let symbol;
	let path;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*indentation*/ ctx[2] == 0 && /*children*/ ctx[5].length == 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			svg = svg_element("svg");
			symbol = svg_element("symbol");
			path = svg_element("path");
			t = space();
			if_block.c();
			if_block_anchor = empty();
			attr_dev(path, "d", "M22 12l-20 12 5-12-5-12z");
			add_location(path, file$4, 23, 5, 580);
			attr_dev(symbol, "id", "expand-arrow-svg");
			attr_dev(symbol, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol, "viewBox", "0 0 24 24");
			add_location(symbol, file$4, 19, 2, 478);
			attr_dev(svg, "display", "none");
			add_location(svg, file$4, 18, 0, 455);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, symbol);
			append_dev(symbol, path);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Descendants', slots, []);
	
	
	let { note_path } = $$props;
	let { db } = $$props;
	let { indentation } = $$props;
	let { app } = $$props;

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	let expanded = indentation < 3 ;
	let children = [];

	if (db.descendants.has(note_path)) {
		children = db.descendants.get(note_path).slice();
	}

	const writable_props = ['note_path', 'db', 'indentation', 'app'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Descendants> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(4, expanded = !expanded);
	};

	const click_handler_1 = event => {
		NavigateToFile(app, note_path, event);
	};

	$$self.$$set = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('app' in $$props) $$invalidate(3, app = $$props.app);
	};

	$$self.$capture_state = () => ({
		GetDisplayName,
		NavigateToFile,
		note_path,
		db,
		indentation,
		app,
		dark_mode,
		expanded,
		children
	});

	$$self.$inject_state = $$props => {
		if ('note_path' in $$props) $$invalidate(0, note_path = $$props.note_path);
		if ('db' in $$props) $$invalidate(1, db = $$props.db);
		if ('indentation' in $$props) $$invalidate(2, indentation = $$props.indentation);
		if ('app' in $$props) $$invalidate(3, app = $$props.app);
		if ('dark_mode' in $$props) $$invalidate(6, dark_mode = $$props.dark_mode);
		if ('expanded' in $$props) $$invalidate(4, expanded = $$props.expanded);
		if ('children' in $$props) $$invalidate(5, children = $$props.children);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		note_path,
		db,
		indentation,
		app,
		expanded,
		children,
		dark_mode,
		click_handler,
		click_handler_1
	];
}

class Descendants extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$4,
			create_fragment$4,
			safe_not_equal,
			{
				note_path: 0,
				db: 1,
				indentation: 2,
				app: 3
			},
			add_css$4
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Descendants",
			options,
			id: create_fragment$4.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*note_path*/ ctx[0] === undefined && !('note_path' in props)) {
			console.warn("<Descendants> was created without expected prop 'note_path'");
		}

		if (/*db*/ ctx[1] === undefined && !('db' in props)) {
			console.warn("<Descendants> was created without expected prop 'db'");
		}

		if (/*indentation*/ ctx[2] === undefined && !('indentation' in props)) {
			console.warn("<Descendants> was created without expected prop 'indentation'");
		}

		if (/*app*/ ctx[3] === undefined && !('app' in props)) {
			console.warn("<Descendants> was created without expected prop 'app'");
		}
	}

	get note_path() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set note_path(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get db() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set db(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get indentation() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set indentation(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error("<Descendants>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Descendants>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/PathView.svelte generated by Svelte v3.42.1 */
const file$3 = "src/svelte/PathView.svelte";

function add_css$3(target) {
	append_styles(target, "svelte-1jp8rsy", "div#top-bar.svelte-1jp8rsy.svelte-1jp8rsy{display:none;text-align:right}div#top-bar.svelte-1jp8rsy svg.svelte-1jp8rsy{float:right;clear:both;width:24px;margin-left:10px;margin-bottom:10px;height:24px}div#main_moc_div.svelte-1jp8rsy.svelte-1jp8rsy{padding:initial;width:initial;height:100%;position:initial;overflow:auto}div#main_moc_div.dark-mode.svelte-1jp8rsy.svelte-1jp8rsy{color:#dcddde}div#scroll_up.svelte-1jp8rsy.svelte-1jp8rsy{color:gray;display:none;text-align:center;height:30px;width:30px;background-color:transparent;position:fixed;margin-right:20px;margin-top:20px;right:5px;top:4px}div#scroll_up.svelte-1jp8rsy.svelte-1jp8rsy{cursor:pointer;font-size:25px;color:darkgrey}div#scroll_up.svelte-1jp8rsy svg.svelte-1jp8rsy{transform:rotate(-90deg)}div.light-mode.svelte-1jp8rsy div#scroll_up svg.svelte-1jp8rsy{fill:lightgray}div.light-mode.svelte-1jp8rsy div#scroll_up:hover svg.svelte-1jp8rsy{fill:gray}div.dark-mode.svelte-1jp8rsy div#scroll_up svg.svelte-1jp8rsy{fill:gray}div.dark-mode.svelte-1jp8rsy div#scroll_up:hover svg.svelte-1jp8rsy{fill:lightgray}a.link.svelte-1jp8rsy.svelte-1jp8rsy{cursor:pointer}ul.svelte-1jp8rsy.svelte-1jp8rsy{padding-left:0}svg.path-arrow.svelte-1jp8rsy.svelte-1jp8rsy{margin-right:2px;margin-left:2px;display:inline;width:24px;height:0.7em}div.dark-mode.svelte-1jp8rsy svg.path-arrow.svelte-1jp8rsy{fill:lightgray}.errors.svelte-1jp8rsy.svelte-1jp8rsy{padding:10px;width:initial;height:initial;position:initial;overflow-y:initial;overflow-wrap:initial}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aFZpZXcuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXNMSSxHQUFHLFFBQVEsOEJBQUMsQ0FBQSxBQUNSLFFBQVEsSUFBSSxDQUNaLFVBQVUsQ0FBRSxLQUFLLEFBQ3JCLENBQUEsQUFDQSxHQUFHLHVCQUFRLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDWixLQUFLLENBQUUsS0FBSyxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsS0FBSyxDQUFFLElBQUksQ0FDWCxZQUFZLElBQUksQ0FDaEIsYUFBYSxDQUFFLElBQUksQ0FDbkIsTUFBTSxDQUFFLElBQUksQUFDaEIsQ0FBQSxBQUNBLEdBQUcsYUFBYSw4QkFBQyxDQUFBLEFBQ2IsT0FBTyxDQUFFLE9BQU8sQ0FDaEIsS0FBSyxDQUFFLE9BQU8sQ0FDZCxNQUFNLENBQUUsSUFBSSxDQUNaLFFBQVEsQ0FBRSxPQUFPLENBQ2pCLFFBQVEsQ0FBRSxJQUFJLEFBQ2xCLENBQUEsQUFDQSxHQUFHLGFBQWEsVUFBVSw4QkFBQyxDQUFBLEFBQ3ZCLEtBQUssQ0FBRSxPQUFPLEFBQ2xCLENBQUEsQUFFQSxHQUFHLFVBQVUsOEJBQUMsQ0FBQSxBQUNWLEtBQUssQ0FBRSxJQUFJLENBQ1gsT0FBTyxDQUFFLElBQUksQ0FDYixVQUFVLENBQUUsTUFBTSxDQUNsQixNQUFNLENBQUUsSUFBSSxDQUNaLEtBQUssQ0FBRSxJQUFJLENBQ1gsZ0JBQWdCLENBQUUsV0FBVyxDQUM3QixRQUFRLENBQUUsS0FBSyxDQUNmLFlBQVksQ0FBRSxJQUFJLENBQ2xCLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLEtBQUssQ0FBRSxHQUFHLENBQ1YsR0FBRyxDQUFFLEdBQUcsQUFDWixDQUFBLEFBQ0EsR0FBRyxVQUFVLDhCQUFDLENBQUEsQUFDVixNQUFNLENBQUUsT0FBTyxDQUNmLFNBQVMsQ0FBRSxJQUFJLENBQ2YsS0FBSyxDQUFFLFFBQVEsQUFDbkIsQ0FBQSxBQUVBLEdBQUcseUJBQVUsQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUNkLFNBQVMsQ0FBRSxPQUFPLE1BQU0sQ0FBQyxBQUM3QixDQUFBLEFBRUEsR0FBRywwQkFBVyxDQUFDLEdBQUcsVUFBVSxDQUFDLEdBQUcsZUFBQyxDQUFBLEFBQzdCLElBQUksQ0FBRSxTQUFTLEFBQ25CLENBQUEsQUFDQSxHQUFHLDBCQUFXLENBQUMsR0FBRyxVQUFVLE1BQU0sQ0FBQyxHQUFHLGVBQUMsQ0FBQSxBQUNuQyxJQUFJLENBQUUsSUFBSSxBQUNkLENBQUEsQUFFQSxHQUFHLHlCQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDNUIsSUFBSSxDQUFFLElBQUksQUFDZCxDQUFBLEFBQ0EsR0FBRyx5QkFBVSxDQUFDLEdBQUcsVUFBVSxNQUFNLENBQUMsR0FBRyxlQUFDLENBQUEsQUFDbEMsSUFBSSxDQUFFLFNBQVMsQUFDbkIsQ0FBQSxBQUVBLENBQUMsS0FBSyw4QkFBQyxDQUFBLEFBQ0gsTUFBTSxDQUFFLE9BQU8sQUFDbkIsQ0FBQSxBQUNBLEVBQUUsOEJBQUMsQ0FBQSxBQUNDLFlBQVksQ0FBRSxDQUFDLEFBQ25CLENBQUEsQUFFQSxHQUFHLFdBQVcsOEJBQUMsQ0FBQSxBQUNYLFlBQVksQ0FBRSxHQUFHLENBQ2pCLFdBQVcsQ0FBRSxHQUFHLENBQ2hCLE9BQU8sQ0FBRSxNQUFNLENBQ2YsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsS0FBSyxBQUNqQixDQUFBLEFBQ0EsR0FBRyx5QkFBVSxDQUFDLEdBQUcsV0FBVyxlQUFDLENBQUEsQUFDekIsSUFBSSxDQUFFLFNBQVMsQUFDbkIsQ0FBQSxBQUNBLE9BQU8sOEJBQUMsQ0FBQSxBQUNKLE9BQU8sQ0FBRSxJQUFJLENBQ2IsS0FBSyxDQUFFLE9BQU8sQ0FDZCxNQUFNLENBQUUsT0FBTyxDQUNmLFFBQVEsQ0FBRSxPQUFPLENBQ2pCLFVBQVUsQ0FBRSxPQUFPLENBQ25CLGFBQWEsQ0FBRSxPQUFPLEFBQzFCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiUGF0aFZpZXcuc3ZlbHRlIl19 */");
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	child_ctx[24] = i;
	return child_ctx;
}

// (117:4) {:else}
function create_else_block(ctx) {
	let t0;
	let br;
	let t1;
	let ul;
	let descendants;
	let t2;
	let div;
	let svg;
	let path;
	let current;
	let mounted;
	let dispose;
	let each_value = /*paths*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	descendants = new Descendants({
			props: {
				db: /*db*/ ctx[2],
				app: /*app*/ ctx[1],
				note_path: /*open_note_path*/ ctx[5],
				indentation: 0
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			ul = element("ul");
			create_component(descendants.$$.fragment);
			t2 = space();
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			add_location(br, file$3, 152, 8, 4963);
			attr_dev(ul, "class", "svelte-1jp8rsy");
			add_location(ul, file$3, 153, 8, 4978);
			attr_dev(path, "d", "M24 12l-12-9v5h-12v8h12v5l12-9z");
			add_location(path, file$3, 172, 17, 5498);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "24");
			attr_dev(svg, "height", "24");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "class", "svelte-1jp8rsy");
			add_location(svg, file$3, 167, 12, 5334);
			attr_dev(div, "id", "scroll_up");
			attr_dev(div, "title", "Scroll to top");
			attr_dev(div, "class", "svelte-1jp8rsy");
			add_location(div, file$3, 161, 8, 5163);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);
			mount_component(descendants, ul, null);
			insert_dev(target, t2, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, path);
			/*div_binding*/ ctx[14](div);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler_3*/ ctx[15], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths, LINKED_FROM, LINKED_TO, LINKED_BOTH, GetDisplayName, db, NavigateToFile, app*/ 7) {
				each_value = /*paths*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const descendants_changes = {};
			if (dirty & /*db*/ 4) descendants_changes.db = /*db*/ ctx[2];
			if (dirty & /*app*/ 2) descendants_changes.app = /*app*/ ctx[1];
			if (dirty & /*open_note_path*/ 32) descendants_changes.note_path = /*open_note_path*/ ctx[5];
			descendants.$set(descendants_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(descendants.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(descendants.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_component(descendants);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[14](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(117:4) {:else}",
		ctx
	});

	return block;
}

// (100:32) 
function create_if_block_1(ctx) {
	let t0;
	let a0;
	let t1_value = GetDisplayName(/*cn_path*/ ctx[3], /*db*/ ctx[2]) + "";
	let t1;
	let t2;
	let br0;
	let br1;
	let t3;
	let a1;
	let t5;
	let br2;
	let t6;
	let saplingimage;
	let current;
	let mounted;
	let dispose;
	saplingimage = new SaplingImage({ $$inline: true });

	const block = {
		c: function create() {
			t0 = text("This file doesn't have any connections to ");
			a0 = element("a");
			t1 = text(t1_value);
			t2 = text(".");
			br0 = element("br");
			br1 = element("br");
			t3 = text(" Link it to a file that is part of your Map of Content.\n        Then\n        ");
			a1 = element("a");
			a1.textContent = "update";
			t5 = text("\n        your Map of Content and watch it grow!");
			br2 = element("br");
			t6 = space();
			create_component(saplingimage.$$.fragment);
			attr_dev(a0, "class", "link svelte-1jp8rsy");
			attr_dev(a0, "title", /*cn_path*/ ctx[3]);
			add_location(a0, file$3, 100, 50, 3035);
			add_location(br0, file$3, 106, 10, 3226);
			add_location(br1, file$3, 106, 16, 3232);
			attr_dev(a1, "class", "link svelte-1jp8rsy");
			add_location(a1, file$3, 108, 8, 3315);
			add_location(br2, file$3, 114, 46, 3483);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, a1, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, br2, anchor);
			insert_dev(target, t6, anchor);
			mount_component(saplingimage, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*click_handler*/ ctx[11], false, false, false),
					listen_dev(a1, "click", /*click_handler_1*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*cn_path, db*/ 12) && t1_value !== (t1_value = GetDisplayName(/*cn_path*/ ctx[3], /*db*/ ctx[2]) + "")) set_data_dev(t1, t1_value);

			if (!current || dirty & /*cn_path*/ 8) {
				attr_dev(a0, "title", /*cn_path*/ ctx[3]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(saplingimage.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(saplingimage.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(br2);
			if (detaching) detach_dev(t6);
			destroy_component(saplingimage, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(100:32) ",
		ctx
	});

	return block;
}

// (96:4) {#if errors.length}
function create_if_block(ctx) {
	let div;
	let raw_value = /*errors*/ ctx[4][0] + "";

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "errors svelte-1jp8rsy");
			add_location(div, file$3, 96, 8, 2886);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errors*/ 16 && raw_value !== (raw_value = /*errors*/ ctx[4][0] + "")) div.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(96:4) {#if errors.length}",
		ctx
	});

	return block;
}

// (125:20) {:else}
function create_else_block_1(ctx) {
	let a;
	let t_value = GetDisplayName(/*pathitem*/ ctx[22][0], /*db*/ ctx[2]) + "";
	let t;
	let a_title_value;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[13](/*pathitem*/ ctx[22], ...args);
	}

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "link svelte-1jp8rsy");
			attr_dev(a, "title", a_title_value = /*pathitem*/ ctx[22][0]);
			add_location(a, file$3, 125, 24, 3872);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", click_handler_2, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*paths, db*/ 5 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[22][0], /*db*/ ctx[2]) + "")) set_data_dev(t, t_value);

			if (dirty & /*paths*/ 1 && a_title_value !== (a_title_value = /*pathitem*/ ctx[22][0])) {
				attr_dev(a, "title", a_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(125:20) {:else}",
		ctx
	});

	return block;
}

// (121:20) {#if i == 0}
function create_if_block_5(ctx) {
	let span;
	let t_value = GetDisplayName(/*pathitem*/ ctx[22][0], /*db*/ ctx[2]) + "";
	let t;
	let span_title_value;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "title", span_title_value = /*pathitem*/ ctx[22][0]);
			add_location(span, file$3, 121, 24, 3699);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths, db*/ 5 && t_value !== (t_value = GetDisplayName(/*pathitem*/ ctx[22][0], /*db*/ ctx[2]) + "")) set_data_dev(t, t_value);

			if (dirty & /*paths*/ 1 && span_title_value !== (span_title_value = /*pathitem*/ ctx[22][0])) {
				attr_dev(span, "title", span_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(121:20) {#if i == 0}",
		ctx
	});

	return block;
}

// (143:57) 
function create_if_block_4(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#pointer-arrow-both-svg-moc");
			add_location(use, file$3, 144, 28, 4776);
			attr_dev(svg, "class", "path-arrow svelte-1jp8rsy");
			add_location(svg, file$3, 143, 24, 4723);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(143:57) ",
		ctx
	});

	return block;
}

// (139:55) 
function create_if_block_3(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#pointer-arrow-left-svg-moc");
			add_location(use, file$3, 140, 28, 4567);
			attr_dev(svg, "class", "path-arrow svelte-1jp8rsy");
			add_location(svg, file$3, 139, 24, 4514);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(139:55) ",
		ctx
	});

	return block;
}

// (135:20) {#if pathitem[1] == LINKED_FROM}
function create_if_block_2(ctx) {
	let svg;
	let use;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			use = svg_element("use");
			attr_dev(use, "href", "#pointer-arrow-right-svg-moc");
			add_location(use, file$3, 136, 28, 4359);
			attr_dev(svg, "class", "path-arrow svelte-1jp8rsy");
			add_location(svg, file$3, 135, 24, 4306);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, use);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(135:20) {#if pathitem[1] == LINKED_FROM}",
		ctx
	});

	return block;
}

// (120:16) {#each path.reverse() as pathitem, i}
function create_each_block_1$1(ctx) {
	let t;
	let if_block1_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*i*/ ctx[24] == 0) return create_if_block_5;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*pathitem*/ ctx[22][1] == LINKED_FROM) return create_if_block_2;
		if (/*pathitem*/ ctx[22][1] == LINKED_TO) return create_if_block_3;
		if (/*pathitem*/ ctx[22][1] == LINKED_BOTH) return create_if_block_4;
	}

	let current_block_type_1 = select_block_type_2(ctx);
	let if_block1 = current_block_type_1 && current_block_type_1(ctx);

	const block = {
		c: function create() {
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block0.m(target, anchor);
			insert_dev(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block0.p(ctx, dirty);

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_2(ctx))) {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block0.d(detaching);
			if (detaching) detach_dev(t);

			if (if_block1) {
				if_block1.d(detaching);
			}

			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(120:16) {#each path.reverse() as pathitem, i}",
		ctx
	});

	return block;
}

// (118:8) {#each paths as path}
function create_each_block$3(ctx) {
	let div;
	let t;
	let br;
	let each_value_1 = /*path*/ ctx[19].reverse();
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			br = element("br");
			attr_dev(div, "class", "path");
			add_location(div, file$3, 118, 12, 3569);
			add_location(br, file$3, 149, 12, 4931);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, br, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*paths, LINKED_FROM, LINKED_TO, LINKED_BOTH, GetDisplayName, db, NavigateToFile, app*/ 7) {
				each_value_1 = /*path*/ ctx[19].reverse();
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$3.name,
		type: "each",
		source: "(118:8) {#each paths as path}",
		ctx
	});

	return block;
}

function create_fragment$3(ctx) {
	let svg0;
	let symbol0;
	let path0;
	let t0;
	let svg1;
	let symbol1;
	let path1;
	let t1;
	let svg2;
	let symbol2;
	let path2;
	let t2;
	let svg3;
	let symbol3;
	let path3;
	let t3;
	let div1;
	let div0;
	let svg4;
	let use;
	let t4;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block, create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*errors*/ ctx[4].length) return 0;
		if (/*paths*/ ctx[0].length == 0) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			svg0 = svg_element("svg");
			symbol0 = svg_element("symbol");
			path0 = svg_element("path");
			t0 = space();
			svg1 = svg_element("svg");
			symbol1 = svg_element("symbol");
			path1 = svg_element("path");
			t1 = space();
			svg2 = svg_element("svg");
			symbol2 = svg_element("symbol");
			path2 = svg_element("path");
			t2 = space();
			svg3 = svg_element("svg");
			symbol3 = svg_element("symbol");
			path3 = svg_element("path");
			t3 = space();
			div1 = element("div");
			div0 = element("div");
			svg4 = svg_element("svg");
			use = svg_element("use");
			t4 = space();
			if_block.c();
			attr_dev(path0, "d", " M 21.883,8 14.356,14.235 15,15 24,7.479 15,0 14.355,0.764 21.884,7 H 0 v 1 z");
			add_location(path0, file$3, 46, 9, 1408);
			attr_dev(symbol0, "id", "pointer-arrow-right-svg-moc");
			attr_dev(symbol0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol0, "viewBox", "0 0 24 15.05");
			add_location(symbol0, file$3, 42, 4, 1276);
			attr_dev(svg0, "display", "none");
			add_location(svg0, file$3, 41, 0, 1251);
			attr_dev(path1, "d", "M 2.117,7 9.644,0.765 9,0 0,7.521 9,15 9.645,14.236 2.116,8 H 24 V 7 Z");
			add_location(path1, file$3, 57, 9, 1734);
			attr_dev(symbol1, "id", "pointer-arrow-left-svg-moc");
			attr_dev(symbol1, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol1, "viewBox", "0 0 24 15.05");
			add_location(symbol1, file$3, 53, 4, 1603);
			attr_dev(svg1, "display", "none");
			add_location(svg1, file$3, 52, 0, 1578);
			attr_dev(path2, "d", "M 9 0 L 0 7.5214844 L 9 15 L 9.6445312 14.236328 L 2.1152344 8 L 21.882812 8 L 14.355469 14.234375 L 15 15 L 24 7.4785156 L 15 0 L 14.355469 0.76367188 L 21.884766 7 L 2.1171875 7 L 9.6445312 0.765625 L 9 0 z ");
			add_location(path2, file$3, 69, 8, 2069);
			attr_dev(symbol2, "id", "pointer-arrow-both-svg-moc");
			attr_dev(symbol2, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol2, "viewBox", "0 0 24 15.05");
			add_location(symbol2, file$3, 64, 4, 1933);
			attr_dev(svg2, "display", "none");
			add_location(svg2, file$3, 63, 0, 1908);
			attr_dev(path3, "d", "M24 6h-24v-4h24v4zm0 4h-24v4h24v-4zm0 8h-24v4h24v-4z");
			add_location(path3, file$3, 81, 8, 2513);
			attr_dev(symbol3, "id", "hamburger-menu");
			attr_dev(symbol3, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(symbol3, "viewBox", "0 0 24 24");
			add_location(symbol3, file$3, 76, 4, 2392);
			attr_dev(svg3, "display", "none");
			add_location(svg3, file$3, 75, 0, 2367);
			attr_dev(use, "href", "#hamburger-menu");
			add_location(use, file$3, 92, 12, 2797);
			attr_dev(svg4, "class", "path-arrow svelte-1jp8rsy");
			add_location(svg4, file$3, 91, 8, 2760);
			attr_dev(div0, "id", "top-bar");
			attr_dev(div0, "class", "svelte-1jp8rsy");
			add_location(div0, file$3, 90, 4, 2733);
			attr_dev(div1, "id", "main_moc_div");
			attr_dev(div1, "class", "" + (null_to_empty(/*dark_mode*/ ctx[8]) + " svelte-1jp8rsy"));
			add_location(div1, file$3, 84, 0, 2600);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg0, anchor);
			append_dev(svg0, symbol0);
			append_dev(symbol0, path0);
			insert_dev(target, t0, anchor);
			insert_dev(target, svg1, anchor);
			append_dev(svg1, symbol1);
			append_dev(symbol1, path1);
			insert_dev(target, t1, anchor);
			insert_dev(target, svg2, anchor);
			append_dev(svg2, symbol2);
			append_dev(symbol2, path2);
			insert_dev(target, t2, anchor);
			insert_dev(target, svg3, anchor);
			append_dev(svg3, symbol3);
			append_dev(symbol3, path3);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, svg4);
			append_dev(svg4, use);
			append_dev(div1, t4);
			if_blocks[current_block_type_index].m(div1, null);
			/*div1_binding*/ ctx[16](div1);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div1, "scroll", /*scroll_handler*/ ctx[17], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(svg1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(svg2);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(svg3);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			if_blocks[current_block_type_index].d();
			/*div1_binding*/ ctx[16](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('PathView', slots, []);
	
	
	let { paths } = $$props;
	let { app } = $$props;
	let { db } = $$props;
	let { cn_path } = $$props;
	let { errors } = $$props;
	let { open_note_path } = $$props;
	let scroll_up_div;
	let main_div;
	let scroll_up_div_already_visible = false;

	let dark_mode = document.body.classList.contains("theme-dark")
	? "dark-mode"
	: "light-mode";

	onMount(() => {
		scroll_to_top();
	});

	/** Scroll the whole view to the top*/
	function scroll_to_top() {
		$$invalidate(7, main_div.scrollTop = 0, main_div);
	}

	/**show to "scroll to top" arrow if the user has scrolled the view*/
	function on_scroll(position) {
		if (position > 30 && !scroll_up_div_already_visible) {
			$$invalidate(6, scroll_up_div.style.display = "block", scroll_up_div);
			scroll_up_div_already_visible = true;
		} else //hide the arrow if user scrolls back to the top
		if (position <= 30 && scroll_up_div_already_visible) {
			$$invalidate(6, scroll_up_div.style.display = "none", scroll_up_div);
			scroll_up_div_already_visible = false;
		}
	}

	const writable_props = ['paths', 'app', 'db', 'cn_path', 'errors', 'open_note_path'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PathView> was created with unknown prop '${key}'`);
	});

	const click_handler = event => NavigateToFile(app, cn_path, event);

	const click_handler_1 = () => {
		db.update();
	};

	const click_handler_2 = (pathitem, event) => NavigateToFile(app, pathitem[0], event);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scroll_up_div = $$value;
			$$invalidate(6, scroll_up_div);
		});
	}

	const click_handler_3 = () => scroll_to_top();

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			main_div = $$value;
			$$invalidate(7, main_div);
		});
	}

	const scroll_handler = e => on_scroll(e.target.scrollTop);

	$$self.$$set = $$props => {
		if ('paths' in $$props) $$invalidate(0, paths = $$props.paths);
		if ('app' in $$props) $$invalidate(1, app = $$props.app);
		if ('db' in $$props) $$invalidate(2, db = $$props.db);
		if ('cn_path' in $$props) $$invalidate(3, cn_path = $$props.cn_path);
		if ('errors' in $$props) $$invalidate(4, errors = $$props.errors);
		if ('open_note_path' in $$props) $$invalidate(5, open_note_path = $$props.open_note_path);
	};

	$$self.$capture_state = () => ({
		LINKED_BOTH,
		LINKED_TO,
		LINKED_FROM,
		GetDisplayName,
		IsCtrlPressed,
		NavigateToFile,
		onMount,
		SaplingImage,
		Descendants,
		paths,
		app,
		db,
		cn_path,
		errors,
		open_note_path,
		scroll_up_div,
		main_div,
		scroll_up_div_already_visible,
		dark_mode,
		scroll_to_top,
		on_scroll
	});

	$$self.$inject_state = $$props => {
		if ('paths' in $$props) $$invalidate(0, paths = $$props.paths);
		if ('app' in $$props) $$invalidate(1, app = $$props.app);
		if ('db' in $$props) $$invalidate(2, db = $$props.db);
		if ('cn_path' in $$props) $$invalidate(3, cn_path = $$props.cn_path);
		if ('errors' in $$props) $$invalidate(4, errors = $$props.errors);
		if ('open_note_path' in $$props) $$invalidate(5, open_note_path = $$props.open_note_path);
		if ('scroll_up_div' in $$props) $$invalidate(6, scroll_up_div = $$props.scroll_up_div);
		if ('main_div' in $$props) $$invalidate(7, main_div = $$props.main_div);
		if ('scroll_up_div_already_visible' in $$props) scroll_up_div_already_visible = $$props.scroll_up_div_already_visible;
		if ('dark_mode' in $$props) $$invalidate(8, dark_mode = $$props.dark_mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		paths,
		app,
		db,
		cn_path,
		errors,
		open_note_path,
		scroll_up_div,
		main_div,
		dark_mode,
		scroll_to_top,
		on_scroll,
		click_handler,
		click_handler_1,
		click_handler_2,
		div_binding,
		click_handler_3,
		div1_binding,
		scroll_handler
	];
}

class PathView extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$3,
			create_fragment$3,
			safe_not_equal,
			{
				paths: 0,
				app: 1,
				db: 2,
				cn_path: 3,
				errors: 4,
				open_note_path: 5
			},
			add_css$3
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PathView",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*paths*/ ctx[0] === undefined && !('paths' in props)) {
			console.warn("<PathView> was created without expected prop 'paths'");
		}

		if (/*app*/ ctx[1] === undefined && !('app' in props)) {
			console.warn("<PathView> was created without expected prop 'app'");
		}

		if (/*db*/ ctx[2] === undefined && !('db' in props)) {
			console.warn("<PathView> was created without expected prop 'db'");
		}

		if (/*cn_path*/ ctx[3] === undefined && !('cn_path' in props)) {
			console.warn("<PathView> was created without expected prop 'cn_path'");
		}

		if (/*errors*/ ctx[4] === undefined && !('errors' in props)) {
			console.warn("<PathView> was created without expected prop 'errors'");
		}

		if (/*open_note_path*/ ctx[5] === undefined && !('open_note_path' in props)) {
			console.warn("<PathView> was created without expected prop 'open_note_path'");
		}
	}

	get paths() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set paths(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get app() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get db() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set db(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get cn_path() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cn_path(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get errors() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set errors(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open_note_path() {
		throw new Error("<PathView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open_note_path(value) {
		throw new Error("<PathView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

class MOCView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
        this.db = this.plugin.db;
        this.app = this.plugin.app;
        this.plugin.registerViewInstance(this);
        this.plugin.app.workspace.onLayoutReady(() => this.init());
        // rerender on css change to adapt to dark/light mode changes
        this.plugin.app.workspace.on("css-change", () => {
            this.rerender();
        });
    }
    init() {
        // update the path view every time a file is opened
        this.registerEvent(this.app.workspace.on("file-open", (file) => this.onFileOpen()));
        //register with the main class
        //show "loading" message
        if (this.errorview) {
            this.errorview.$destroy();
            this.errorview = undefined;
        }
        this.errorview = new Error$1({
            target: this.contentEl,
            props: { message: "Loading..." },
        });
    }
    async onOpen() {
    }
    /** rerender the view on file open, but only if the database has already been initiated */
    onFileOpen() {
        if (this.db.database_initialized) {
            this.rerender();
        }
    }
    /** reload paths and recreate the svelte instance */
    rerender() {
        Log("Rerender called on view", true);
        // destroy old pathview/errorview instance
        // set symbol to undefined to avoid "This component has already been destroyed" message
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        if (this.errorview) {
            this.errorview.$destroy();
            this.errorview = undefined;
        }
        let errors = [];
        //console.log(this.open_file_path)
        // during startup (before first db update is completed) show loading message
        if (!this.db.database_initialized) {
            errors.push("Please wait...");
        }
        // make sure the database is usable
        else if (!this.db.database_complete) {
            //TODO: try once to this.db.update()
            errors.push(`Your Map of Content couldn't be created.<br><br> Make sure your Central Note path '${this.plugin.getSettingValue("CN_path")}' is correct. You can change this path in the settings tab.`);
        }
        // make sure a file is opened
        else if (this.app.workspace.getActiveFile() == null) {
            errors.push("No file has been opened");
        }
        else if (this.plugin.isExludedFile(this.app.workspace.getActiveFile())) {
            errors.push("This file has been excluded from the Map of Content.");
        }
        // get path of open note 
        else {
            this.open_file_path = this.app.workspace.getActiveFile().path;
            if (this.db.getNoteFromPath(this.open_file_path) == undefined) {
                // make sure file is in library   
                errors.push("This file hasn't been indexed yet. Update the Map of Content to include it.");
            }
        }
        // Show error message if necessary
        if (errors.length > 0) {
            this._app = new PathView({
                target: this.contentEl,
                props: { paths: [], app: this.app, db: this.db, cn_path: this.plugin.getSettingValue("CN_path"), open_note_path: "None", errors: errors },
            });
            return;
        }
        // get paths to open note
        let all_paths = this.db.findPaths(this.open_file_path);
        if (all_paths.length == 0) {
            Log("No paths to this note", true);
        }
        // 
        let paths = all_paths.map((p) => p.items.slice());
        // create new pathview
        this._app = new PathView({
            target: this.contentEl,
            props: { paths: paths, app: this.app, db: this.db, cn_path: this.plugin.getSettingValue("CN_path"), open_note_path: this.open_file_path, errors: [] },
        });
    }
    getViewType() {
        return MOC_VIEW_TYPE;
    }
    getDisplayText() {
        return "Map of Content";
    }
    getIcon() {
        return "stacked-levels";
    }
    onClose() {
        // destroy old pathview/errorview instance
        // set symbol to undefined to avoid "This component has already been destroyed" message
        Log("View closing", true);
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        if (this.errorview) {
            this.errorview.$destroy();
            this.errorview = undefined;
        }
        this.plugin.unregisterViewInstance(this);
        return Promise.resolve();
    }
}

/* src/svelte/settings/ExcludedFolders.svelte generated by Svelte v3.42.1 */
const file$2 = "src/svelte/settings/ExcludedFolders.svelte";

function add_css$2(target) {
	append_styles(target, "svelte-1a0h8f5", ".svelte-1a0h8f5{font-size:1em}h2.svelte-1a0h8f5{text-align:left}div#exluded-folders.svelte-1a0h8f5{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-1a0h8f5{width:300px}#excluded-select.svelte-1a0h8f5{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-1a0h8f5{height:300px;width:300px}div#currently-excluded.svelte-1a0h8f5{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-1a0h8f5{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGb2xkZXJzLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUEyS0ksZUFBRSxDQUFBLEFBQ0UsU0FBUyxDQUFFLEdBQUcsQUFDbEIsQ0FBQSxBQUVBLEVBQUUsZUFBQyxDQUFBLEFBQ0MsVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQSxBQUVBLEdBQUcsZ0JBQWdCLGVBQUMsQ0FBQSxBQUNoQixPQUFPLENBQUUsSUFBSSxDQUNiLFNBQVMsQ0FBRSxJQUFJLENBQ2YsVUFBVSxDQUFFLElBQUksQUFDcEIsQ0FBQSxBQUVBLEdBQUcsY0FBYyxlQUFDLENBQUEsQUFDZCxLQUFLLENBQUUsS0FBSyxBQUNoQixDQUFBLEFBRUEsZ0JBQWdCLGVBQUMsQ0FBQSxBQUNiLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQ0FDWixTQUFTLENBQUUsR0FBRyxDQUNkLFFBQVEsQ0FBRSxJQUFJLEFBQ2xCLENBQUEsQUFFQSxtQkFBbUIsZUFBQyxDQUFBLEFBQ2hCLE1BQU0sQ0FBRSxLQUFLLENBQ2IsS0FBSyxDQUFFLEtBQUssQUFDaEIsQ0FBQSxBQUNBLEdBQUcsbUJBQW1CLGVBQUMsQ0FBQSxBQUNuQixLQUFLLENBQUUsS0FBSyxDQUNaLFVBQVUsQ0FBRSxLQUFLLENBQ2pCLFFBQVEsQ0FBRSxNQUFNLEFBQ3BCLENBQUEsQUFDQSxHQUFHLHdCQUF3QixlQUFDLENBQUEsQUFDeEIsUUFBUSxDQUFFLElBQUksQ0FDZCxVQUFVLENBQUUsS0FBSyxBQUNyQixDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkV4Y2x1ZGVkRm9sZGVycy5zdmVsdGUiXX0= */");
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

// (107:12) {#each all_folders as folder_path}
function create_each_block_1(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*folder_path*/ ctx[23];
			option.value = option.__value;
			attr_dev(option, "class", "svelte-1a0h8f5");
			add_location(option, file$2, 107, 16, 3308);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(107:12) {#each all_folders as folder_path}",
		ctx
	});

	return block;
}

// (144:16) {#each excluded_files as file_path}
function create_each_block$2(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-1a0h8f5");
			add_location(li, file$2, 144, 20, 4339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(144:16) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let h2;
	let t1;
	let div4;
	let div0;
	let select;
	let t2;
	let div1;
	let label;
	let t4;
	let input0;
	let t5;
	let datalist;
	let br0;
	let t6;
	let br1;
	let t7;
	let input1;
	let br2;
	let t8;
	let input2;
	let br3;
	let br4;
	let t9;
	let div3;
	let t10;
	let t11_value = /*excluded_files*/ ctx[1].length + "";
	let t11;
	let t12;
	let input3;
	let input3_value_value;
	let t13;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value_1 = /*all_folders*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded folders";
			t1 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t2 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a folder:";
			t4 = space();
			input0 = element("input");
			t5 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			br0 = element("br");
			t6 = space();
			br1 = element("br");
			t7 = space();
			input1 = element("input");
			br2 = element("br");
			t8 = space();
			input2 = element("input");
			br3 = element("br");
			br4 = element("br");
			t9 = space();
			div3 = element("div");
			t10 = text("Currently excluded files: ");
			t11 = text(t11_value);
			t12 = space();
			input3 = element("input");
			t13 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-1a0h8f5");
			add_location(h2, file$2, 82, 0, 2554);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-1a0h8f5");
			add_location(select, file$2, 86, 8, 2645);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-1a0h8f5");
			add_location(div0, file$2, 85, 4, 2612);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-1a0h8f5");
			add_location(label, file$2, 95, 8, 2860);
			attr_dev(input0, "list", "exlude-folder");
			attr_dev(input0, "id", "Exluded-folders");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Start typing to see suggestions...");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-1a0h8f5");
			add_location(input0, file$2, 96, 8, 2914);
			attr_dev(datalist, "id", "exlude-folder");
			attr_dev(datalist, "class", "svelte-1a0h8f5");
			add_location(datalist, file$2, 105, 8, 3215);
			attr_dev(br0, "class", "svelte-1a0h8f5");
			add_location(br0, file$2, 109, 19, 3378);
			attr_dev(br1, "class", "svelte-1a0h8f5");
			add_location(br1, file$2, 110, 8, 3393);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-1a0h8f5");
			add_location(input1, file$2, 111, 8, 3408);
			attr_dev(br2, "class", "svelte-1a0h8f5");
			add_location(br2, file$2, 118, 10, 3571);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-1a0h8f5");
			add_location(input2, file$2, 119, 8, 3586);
			attr_dev(br3, "class", "svelte-1a0h8f5");
			add_location(br3, file$2, 126, 10, 3758);
			attr_dev(br4, "class", "svelte-1a0h8f5");
			add_location(br4, file$2, 126, 16, 3764);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-1a0h8f5");
			add_location(div1, file$2, 94, 4, 2822);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-1a0h8f5");
			add_location(input3, file$2, 130, 8, 3882);
			attr_dev(ul, "class", "svelte-1a0h8f5");
			add_location(ul, file$2, 142, 12, 4262);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-1a0h8f5");
			add_location(div2, file$2, 138, 8, 4123);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-1a0h8f5");
			add_location(div3, file$2, 128, 4, 3786);
			attr_dev(div4, "id", "exluded-folders");
			attr_dev(div4, "class", "svelte-1a0h8f5");
			add_location(div4, file$2, 84, 0, 2581);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[10](select);
			append_dev(div4, t2);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t4);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[11](input0);
			set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			append_dev(div1, t5);
			append_dev(div1, datalist);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(datalist, null);
			}

			append_dev(div1, br0);
			append_dev(div1, t6);
			append_dev(div1, br1);
			append_dev(div1, t7);
			append_dev(div1, input1);
			append_dev(div1, br2);
			append_dev(div1, t8);
			append_dev(div1, input2);
			append_dev(div1, br3);
			append_dev(div1, br4);
			append_dev(div4, t9);
			append_dev(div4, div3);
			append_dev(div3, t10);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, input3);
			append_dev(div3, t13);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[12]),
					listen_dev(input1, "click", /*click_handler*/ ctx[13], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[14], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[15], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exlude_path_input_value*/ 4 && input0.value !== /*exlude_path_input_value*/ ctx[2]) {
				set_input_value(input0, /*exlude_path_input_value*/ ctx[2]);
			}

			if (dirty & /*all_folders*/ 32) {
				each_value_1 = /*all_folders*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(datalist, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*excluded_files*/ 2 && t11_value !== (t11_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t11, t11_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[10](null);
			/*input0_binding*/ ctx[11](null);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFolders', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let excluded_folders = plugin.getSettingValue("exluded_folders");

	// TODO show all exluded files in TextEdit not list
	// Select box based on https://www.c-sharpcorner.com/UploadFile/mahakgupta/add-and-remove-listbox-items-in-javascript/
	let all_folders = GetAllFolders(app);

	var list_options_no = 0;
	let excluded_files = allExcludedFiles();

	onMount(() => {
		// create select entries for all already excluded folders
		excluded_folders.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		let all_files = app.vault.getFiles().map(file => file.path);

		return all_files.filter(path_to_file => {
			return excluded_folders.some(path => path_to_file.startsWith(path));
		});
	}

	let exlude_path_input_value;
	let exlude_path_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.updateSettings({ exluded_folders: excluded_folders });
	}

	function addValue() {
		if (!exlude_path_input_value) {
			return;
		}

		// Return if folder doesn't exist
		if (!all_folders.contains(exlude_path_input_value)) {
			alert("Please choose a folder from the list");
			return;
		}

		// Return if folder already on list
		if (excluded_folders.contains(exlude_path_input_value)) {
			$$invalidate(3, exlude_path_input.value = "", exlude_path_input);
			$$invalidate(2, exlude_path_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exlude_path_input_value, exlude_path_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		excluded_folders.push(exlude_path_input_value);

		// reset input field
		$$invalidate(3, exlude_path_input.value = "", exlude_path_input);

		$$invalidate(2, exlude_path_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				excluded_folders.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFolders> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exlude_path_input = $$value;
			$$invalidate(3, exlude_path_input);
		});
	}

	function input0_input_handler() {
		exlude_path_input_value = this.value;
		$$invalidate(2, exlude_path_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		Log,
		GetAllFolders,
		app,
		plugin,
		excludedlist,
		excluded_folders,
		all_folders,
		list_options_no,
		excluded_files,
		allExcludedFiles,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(8, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(9, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('excluded_folders' in $$props) excluded_folders = $$props.excluded_folders;
		if ('all_folders' in $$props) $$invalidate(5, all_folders = $$props.all_folders);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('exlude_path_input_value' in $$props) $$invalidate(2, exlude_path_input_value = $$props.exlude_path_input_value);
		if ('exlude_path_input' in $$props) $$invalidate(3, exlude_path_input = $$props.exlude_path_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exlude_path_input_value,
		exlude_path_input,
		show_all_hidden,
		all_folders,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFolders extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { app: 8, plugin: 9 }, add_css$2);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFolders",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[8] === undefined && !('app' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[9] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFolders> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFolders>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFolders>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/settings/ExcludedFilenames.svelte generated by Svelte v3.42.1 */
const file$1 = "src/svelte/settings/ExcludedFilenames.svelte";

function add_css$1(target) {
	append_styles(target, "svelte-1wc77v2", ".svelte-1wc77v2{font-size:1em}h2.svelte-1wc77v2{text-align:left}div#exlude-filenames.svelte-1wc77v2{display:flex;flex-wrap:wrap;column-gap:10px}div#list-excluded.svelte-1wc77v2{width:300px}#excluded-select.svelte-1wc77v2{height:300px;width:300px;font-size:1em;overflow:auto}#add-remove-exluded.svelte-1wc77v2{height:300px;width:300px}div#currently-excluded.svelte-1wc77v2{width:600px;max-height:300px;overflow:hidden}div#currently-excluded-list.svelte-1wc77v2{overflow:auto;max-height:260px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjbHVkZWRGaWxlbmFtZXMuc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXdLSSxlQUFFLENBQUEsQUFDRSxTQUFTLENBQUUsR0FBRyxBQUNsQixDQUFBLEFBRUEsRUFBRSxlQUFDLENBQUEsQUFDQyxVQUFVLENBQUUsSUFBSSxBQUNwQixDQUFBLEFBRUEsR0FBRyxpQkFBaUIsZUFBQyxDQUFBLEFBQ2pCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsU0FBUyxDQUFFLElBQUksQ0FDZixVQUFVLENBQUUsSUFBSSxBQUNwQixDQUFBLEFBRUEsR0FBRyxjQUFjLGVBQUMsQ0FBQSxBQUNkLEtBQUssQ0FBRSxLQUFLLEFBQ2hCLENBQUEsQUFFQSxnQkFBZ0IsZUFBQyxDQUFBLEFBQ2IsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxDQUNaLFNBQVMsQ0FBRSxHQUFHLENBQ2QsUUFBUSxDQUFFLElBQUksQUFDbEIsQ0FBQSxBQUVBLG1CQUFtQixlQUFDLENBQUEsQUFDaEIsTUFBTSxDQUFFLEtBQUssQ0FDYixLQUFLLENBQUUsS0FBSyxBQUNoQixDQUFBLEFBQ0EsR0FBRyxtQkFBbUIsZUFBQyxDQUFBLEFBQ25CLEtBQUssQ0FBRSxLQUFLLENBQ1osVUFBVSxDQUFFLEtBQUssQ0FDakIsUUFBUSxDQUFFLE1BQU0sQUFDcEIsQ0FBQSxBQUNBLEdBQUcsd0JBQXdCLGVBQUMsQ0FBQSxBQUN4QixRQUFRLENBQUUsSUFBSSxDQUNkLFVBQVUsQ0FBRSxLQUFLLEFBQ3JCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiRXhjbHVkZWRGaWxlbmFtZXMuc3ZlbHRlIl19 */");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

// (137:16) {#each excluded_files as file_path}
function create_each_block$1(ctx) {
	let li;
	let t_value = /*file_path*/ ctx[20] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			attr_dev(li, "class", "svelte-1wc77v2");
			add_location(li, file$1, 137, 20, 4082);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*excluded_files*/ 2 && t_value !== (t_value = /*file_path*/ ctx[20] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(137:16) {#each excluded_files as file_path}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let h2;
	let t1;
	let br0;
	let br1;
	let t2;
	let div4;
	let div0;
	let select;
	let t3;
	let div1;
	let label;
	let t5;
	let input0;
	let t6;
	let br2;
	let t7;
	let br3;
	let t8;
	let input1;
	let br4;
	let t9;
	let input2;
	let br5;
	let br6;
	let t10;
	let div3;
	let t11;
	let t12_value = /*excluded_files*/ ctx[1].length + "";
	let t12;
	let t13;
	let input3;
	let input3_value_value;
	let t14;
	let div2;
	let ul;
	let div2_style_value;
	let mounted;
	let dispose;
	let each_value = /*excluded_files*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			h2.textContent = "Excluded filenames";
			t1 = text("\nFilenames that contain these phrases will not be included in the Map of Content.\nThat also includes the file extension.");
			br0 = element("br");
			br1 = element("br");
			t2 = space();
			div4 = element("div");
			div0 = element("div");
			select = element("select");
			t3 = space();
			div1 = element("div");
			label = element("label");
			label.textContent = "Add a phrase:";
			t5 = space();
			input0 = element("input");
			t6 = space();
			br2 = element("br");
			t7 = space();
			br3 = element("br");
			t8 = space();
			input1 = element("input");
			br4 = element("br");
			t9 = space();
			input2 = element("input");
			br5 = element("br");
			br6 = element("br");
			t10 = space();
			div3 = element("div");
			t11 = text("Currently excluded files: ");
			t12 = text(t12_value);
			t13 = space();
			input3 = element("input");
			t14 = space();
			div2 = element("div");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(h2, "class", "svelte-1wc77v2");
			add_location(h2, file$1, 79, 0, 2411);
			attr_dev(br0, "class", "svelte-1wc77v2");
			add_location(br0, file$1, 81, 38, 2558);
			attr_dev(br1, "class", "svelte-1wc77v2");
			add_location(br1, file$1, 81, 44, 2564);
			attr_dev(select, "id", "excluded-select");
			attr_dev(select, "name", "lstValue");
			attr_dev(select, "type", "text");
			select.multiple = true;
			attr_dev(select, "class", "svelte-1wc77v2");
			add_location(select, file$1, 85, 8, 2637);
			attr_dev(div0, "id", "list-excluded");
			attr_dev(div0, "class", "svelte-1wc77v2");
			add_location(div0, file$1, 84, 4, 2604);
			attr_dev(label, "for", "myBrowser");
			attr_dev(label, "class", "svelte-1wc77v2");
			add_location(label, file$1, 94, 8, 2852);
			attr_dev(input0, "id", "Exluded-filenames");
			attr_dev(input0, "type", "text");
			set_style(input0, "width", "300px");
			attr_dev(input0, "class", "svelte-1wc77v2");
			add_location(input0, file$1, 95, 8, 2906);
			attr_dev(br2, "class", "svelte-1wc77v2");
			add_location(br2, file$1, 102, 8, 3121);
			attr_dev(br3, "class", "svelte-1wc77v2");
			add_location(br3, file$1, 103, 8, 3136);
			attr_dev(input1, "type", "button");
			attr_dev(input1, "name", "add");
			input1.value = "Add";
			attr_dev(input1, "class", "svelte-1wc77v2");
			add_location(input1, file$1, 104, 8, 3151);
			attr_dev(br4, "class", "svelte-1wc77v2");
			add_location(br4, file$1, 111, 10, 3314);
			attr_dev(input2, "type", "button");
			attr_dev(input2, "name", "delete");
			input2.value = "Delete";
			attr_dev(input2, "class", "svelte-1wc77v2");
			add_location(input2, file$1, 112, 8, 3329);
			attr_dev(br5, "class", "svelte-1wc77v2");
			add_location(br5, file$1, 119, 10, 3501);
			attr_dev(br6, "class", "svelte-1wc77v2");
			add_location(br6, file$1, 119, 16, 3507);
			attr_dev(div1, "id", "add-remove-exluded");
			attr_dev(div1, "class", "svelte-1wc77v2");
			add_location(div1, file$1, 93, 4, 2814);
			attr_dev(input3, "type", "button");
			attr_dev(input3, "name", "toggle-show-hidden");
			input3.value = input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show";
			attr_dev(input3, "class", "svelte-1wc77v2");
			add_location(input3, file$1, 123, 8, 3625);
			attr_dev(ul, "class", "svelte-1wc77v2");
			add_location(ul, file$1, 135, 12, 4005);

			attr_dev(div2, "style", div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none");

			attr_dev(div2, "id", "currently-excluded-list");
			attr_dev(div2, "class", "svelte-1wc77v2");
			add_location(div2, file$1, 131, 8, 3866);
			attr_dev(div3, "id", "currently-excluded");
			attr_dev(div3, "class", "svelte-1wc77v2");
			add_location(div3, file$1, 121, 4, 3529);
			attr_dev(div4, "id", "exlude-filenames");
			attr_dev(div4, "class", "svelte-1wc77v2");
			add_location(div4, file$1, 83, 0, 2572);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, select);
			/*select_binding*/ ctx[9](select);
			append_dev(div4, t3);
			append_dev(div4, div1);
			append_dev(div1, label);
			append_dev(div1, t5);
			append_dev(div1, input0);
			/*input0_binding*/ ctx[10](input0);
			set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			append_dev(div1, t6);
			append_dev(div1, br2);
			append_dev(div1, t7);
			append_dev(div1, br3);
			append_dev(div1, t8);
			append_dev(div1, input1);
			append_dev(div1, br4);
			append_dev(div1, t9);
			append_dev(div1, input2);
			append_dev(div1, br5);
			append_dev(div1, br6);
			append_dev(div4, t10);
			append_dev(div4, div3);
			append_dev(div3, t11);
			append_dev(div3, t12);
			append_dev(div3, t13);
			append_dev(div3, input3);
			append_dev(div3, t14);
			append_dev(div3, div2);
			append_dev(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen_dev(input1, "click", /*click_handler*/ ctx[12], false, false, false),
					listen_dev(input2, "click", /*click_handler_1*/ ctx[13], false, false, false),
					listen_dev(input3, "click", /*click_handler_2*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exclude_phrase_input_value*/ 4 && input0.value !== /*exclude_phrase_input_value*/ ctx[2]) {
				set_input_value(input0, /*exclude_phrase_input_value*/ ctx[2]);
			}

			if (dirty & /*excluded_files*/ 2 && t12_value !== (t12_value = /*excluded_files*/ ctx[1].length + "")) set_data_dev(t12, t12_value);

			if (dirty & /*show_all_hidden*/ 16 && input3_value_value !== (input3_value_value = /*show_all_hidden*/ ctx[4] ? "Hide" : "Show")) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (dirty & /*excluded_files*/ 2) {
				each_value = /*excluded_files*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*show_all_hidden*/ 16 && div2_style_value !== (div2_style_value = /*show_all_hidden*/ ctx[4]
			? "display:block"
			: "display:none")) {
				attr_dev(div2, "style", div2_style_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(div4);
			/*select_binding*/ ctx[9](null);
			/*input0_binding*/ ctx[10](null);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ExcludedFilenames', slots, []);
	
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let excludedlist;
	let exluded_filename_components = plugin.getSettingValue("exluded_filename_components");
	let all_files = app.vault.getFiles().map(file => file.basename + "." + file.extension);
	let excluded_files = allExcludedFiles();

	// TODO show all exluded files in TextEdit not list
	// add all existing excluded folders to select element
	var list_options_no = 0;

	onMount(() => {
		// create select entries for all already excluded filename components
		exluded_filename_components.forEach(folder => {
			$$invalidate(0, excludedlist.options[list_options_no] = new Option(folder, folder), excludedlist);
			list_options_no++;
		});
	});

	function allExcludedFiles() {
		return all_files.filter(filename => {
			return exluded_filename_components.some(path => filename.contains(path));
		});
	}

	let exclude_phrase_input_value;
	let exclude_phrase_input;
	let show_all_hidden = false;

	/** update the list of exluded files and save the updated settings*/
	function save() {
		$$invalidate(1, excluded_files = allExcludedFiles());
		plugin.updateSettings({ exluded_filename_components });
	}

	function addValue() {
		if (!exclude_phrase_input_value) {
			return;
		}

		// Return if folder already on list
		if (exluded_filename_components.contains(exclude_phrase_input_value)) {
			$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);
			$$invalidate(2, exclude_phrase_input_value = "");
			return;
		}

		// add option to select box
		let AddOpt = new Option(exclude_phrase_input_value, exclude_phrase_input_value);

		$$invalidate(0, excludedlist.options[list_options_no++] = AddOpt, excludedlist);
		exluded_filename_components.push(exclude_phrase_input_value);

		// reset input field
		$$invalidate(3, exclude_phrase_input.value = "", exclude_phrase_input);

		$$invalidate(2, exclude_phrase_input_value = "");
		save();
		return true;
	}

	function deleteValue() {
		let s = 1;
		let Index;

		if (excludedlist.selectedIndex == -1) {
			alert("Please select an item from the list");
			return true;
		}

		while (s > 0) {
			Index = excludedlist.selectedIndex;

			if (Index >= 0) {
				exluded_filename_components.remove(excludedlist.options[Index].value);
				$$invalidate(0, excludedlist.options[Index] = null, excludedlist);
				--list_options_no;
			} else s = 0;
		}

		save();
		return true;
	}

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExcludedFilenames> was created with unknown prop '${key}'`);
	});

	function select_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			excludedlist = $$value;
			$$invalidate(0, excludedlist);
		});
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			exclude_phrase_input = $$value;
			$$invalidate(3, exclude_phrase_input);
		});
	}

	function input0_input_handler() {
		exclude_phrase_input_value = this.value;
		$$invalidate(2, exclude_phrase_input_value);
	}

	const click_handler = () => {
		addValue();
	};

	const click_handler_1 = () => {
		deleteValue();
	};

	const click_handler_2 = () => {
		$$invalidate(4, show_all_hidden = !show_all_hidden);
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		onMount,
		app,
		plugin,
		excludedlist,
		exluded_filename_components,
		all_files,
		excluded_files,
		list_options_no,
		allExcludedFiles,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		save,
		addValue,
		deleteValue
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(7, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(8, plugin = $$props.plugin);
		if ('excludedlist' in $$props) $$invalidate(0, excludedlist = $$props.excludedlist);
		if ('exluded_filename_components' in $$props) exluded_filename_components = $$props.exluded_filename_components;
		if ('all_files' in $$props) all_files = $$props.all_files;
		if ('excluded_files' in $$props) $$invalidate(1, excluded_files = $$props.excluded_files);
		if ('list_options_no' in $$props) list_options_no = $$props.list_options_no;
		if ('exclude_phrase_input_value' in $$props) $$invalidate(2, exclude_phrase_input_value = $$props.exclude_phrase_input_value);
		if ('exclude_phrase_input' in $$props) $$invalidate(3, exclude_phrase_input = $$props.exclude_phrase_input);
		if ('show_all_hidden' in $$props) $$invalidate(4, show_all_hidden = $$props.show_all_hidden);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		excludedlist,
		excluded_files,
		exclude_phrase_input_value,
		exclude_phrase_input,
		show_all_hidden,
		addValue,
		deleteValue,
		app,
		plugin,
		select_binding,
		input0_binding,
		input0_input_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class ExcludedFilenames extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { app: 7, plugin: 8 }, add_css$1);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ExcludedFilenames",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[7] === undefined && !('app' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[8] === undefined && !('plugin' in props)) {
			console.warn("<ExcludedFilenames> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<ExcludedFilenames>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<ExcludedFilenames>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/svelte/Settings.svelte generated by Svelte v3.42.1 */
const file = "src/svelte/Settings.svelte";

function add_css(target) {
	append_styles(target, "svelte-83jj2u", "#settings-container.svelte-83jj2u{position:relative;height:100%;width:100%}#CN_select.svelte-83jj2u{min-width:200px;width:50%;font-size:1em}#update_TLI_path_button.svelte-83jj2u{margin-left:auto;margin-right:auto}h2.svelte-83jj2u{text-align:left}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0dGluZ3Muc3ZlbHRlIiwibWFwcGluZ3MiOiJBQXVFRSxtQkFBbUIsY0FBQyxDQUFBLEFBQ2xCLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE1BQU0sQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQUFDYixDQUFBLEFBQ0EsVUFBVSxjQUFDLENBQUEsQUFDVCxTQUFTLENBQUUsS0FBSyxDQUNoQixLQUFLLENBQUUsR0FBRyxDQUNWLFNBQVMsQ0FBRSxHQUFHLEFBQ2hCLENBQUEsQUFDQSx1QkFBdUIsY0FBQyxDQUFBLEFBQ3RCLFdBQVcsQ0FBRSxJQUFJLENBQ2pCLFlBQVksQ0FBRSxJQUFJLEFBQ3BCLENBQUEsQUFDQSxFQUFFLGNBQUMsQ0FBQSxBQUNELFVBQVUsQ0FBRSxJQUFJLEFBQ2xCLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiU2V0dGluZ3Muc3ZlbHRlIl19 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (49:6) {#each all_files as filepath}
function create_each_block(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.__value = /*filepath*/ ctx[10];
			option.value = option.__value;
			add_location(option, file, 49, 8, 1836);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(49:6) {#each all_files as filepath}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let h2;
	let t1;
	let span;
	let br0;
	let t3;
	let label;
	let t5;
	let input;
	let t6;
	let datalist;
	let t7;
	let button;
	let t9;
	let br1;
	let t10;
	let excludedfolders;
	let t11;
	let excludedfilenames;
	let current;
	let mounted;
	let dispose;
	let each_value = /*all_files*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	excludedfolders = new ExcludedFolders({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	excludedfilenames = new ExcludedFilenames({
			props: {
				app: /*app*/ ctx[0],
				plugin: /*plugin*/ ctx[1]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			h2.textContent = "Path of your Central Note";
			t1 = text("\n    Current path:");
			span = element("span");
			span.textContent = `${/*current_tli*/ ctx[5]}`;
			br0 = element("br");
			t3 = space();
			label = element("label");
			label.textContent = "New path:";
			t5 = space();
			input = element("input");
			t6 = space();
			datalist = element("datalist");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			button = element("button");
			button.textContent = "Save";
			t9 = space();
			br1 = element("br");
			t10 = space();
			create_component(excludedfolders.$$.fragment);
			t11 = space();
			create_component(excludedfilenames.$$.fragment);
			attr_dev(h2, "class", "svelte-83jj2u");
			add_location(h2, file, 36, 4, 1424);
			attr_dev(span, "id", "tli_path");
			add_location(span, file, 37, 17, 1476);
			add_location(br0, file, 37, 57, 1516);
			attr_dev(label, "for", "myBrowser");
			add_location(label, file, 38, 4, 1527);
			attr_dev(input, "type", "text");
			attr_dev(input, "list", "notes");
			attr_dev(input, "id", "CN_select");
			attr_dev(input, "placeholder", "Start typing to see suggestions...");
			attr_dev(input, "class", "svelte-83jj2u");
			add_location(input, file, 39, 4, 1573);
			attr_dev(datalist, "id", "notes");
			add_location(datalist, file, 47, 4, 1770);
			attr_dev(button, "id", "update_TLI_path_button");
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "svelte-83jj2u");
			add_location(button, file, 52, 4, 1892);
			attr_dev(div0, "class", "path");
			add_location(div0, file, 35, 2, 1401);
			add_location(br1, file, 60, 2, 2041);
			attr_dev(div1, "id", "settings-container");
			attr_dev(div1, "class", "svelte-83jj2u");
			add_location(div1, file, 34, 0, 1369);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h2);
			append_dev(div0, t1);
			append_dev(div0, span);
			append_dev(div0, br0);
			append_dev(div0, t3);
			append_dev(div0, label);
			append_dev(div0, t5);
			append_dev(div0, input);
			/*input_binding*/ ctx[7](input);
			set_input_value(input, /*cn_path_input_value*/ ctx[3]);
			append_dev(div0, t6);
			append_dev(div0, datalist);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(datalist, null);
			}

			append_dev(div0, t7);
			append_dev(div0, button);
			append_dev(div1, t9);
			append_dev(div1, br1);
			append_dev(div1, t10);
			mount_component(excludedfolders, div1, null);
			append_dev(div1, t11);
			mount_component(excludedfilenames, div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", /*input_input_handler*/ ctx[8]),
					listen_dev(button, "click", /*click_handler*/ ctx[9], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cn_path_input_value*/ 8 && input.value !== /*cn_path_input_value*/ ctx[3]) {
				set_input_value(input, /*cn_path_input_value*/ ctx[3]);
			}

			if (dirty & /*all_files*/ 16) {
				each_value = /*all_files*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(datalist, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const excludedfolders_changes = {};
			if (dirty & /*app*/ 1) excludedfolders_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfolders_changes.plugin = /*plugin*/ ctx[1];
			excludedfolders.$set(excludedfolders_changes);
			const excludedfilenames_changes = {};
			if (dirty & /*app*/ 1) excludedfilenames_changes.app = /*app*/ ctx[0];
			if (dirty & /*plugin*/ 2) excludedfilenames_changes.plugin = /*plugin*/ ctx[1];
			excludedfilenames.$set(excludedfilenames_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(excludedfolders.$$.fragment, local);
			transition_in(excludedfilenames.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(excludedfolders.$$.fragment, local);
			transition_out(excludedfilenames.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			/*input_binding*/ ctx[7](null);
			destroy_each(each_blocks, detaching);
			destroy_component(excludedfolders);
			destroy_component(excludedfilenames);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Settings', slots, []);
	
	
	let { app } = $$props;
	let { plugin } = $$props;
	let cn_input;

	// TODO choose whether to reverse paths to note
	// TODO check the db is complete before allow settings changes (maybe have this svelte only do that and load all other components from other svelte files)
	// TODO lazy load all the file names and folders?
	// Show paths and descendants in different views
	// get list of all files for dropdown menu
	let all_files = app.vault.getFiles().map(file => file.path);

	Log("Central note path: " + plugin.getSettingValue("CN_path"), true);
	let cn_path_input_value;
	let current_tli = plugin.getSettingValue("CN_path");

	const updateCNPath = () => {
		if (!cn_path_input_value) {
			return;
		}

		// change TLI path
		plugin.updateSettings({ CN_path: cn_path_input_value });

		Log("New central note path: " + cn_path_input_value, true);
		document.getElementById("tli_path").textContent = cn_path_input_value;
		new obsidian.Notice("New Central Note path saved");

		// clear selection dropdown list
		//document.getElementById("CN_select").value = "";
		$$invalidate(2, cn_input.value = "", cn_input);

		$$invalidate(3, cn_path_input_value = "");
	};

	const writable_props = ['app', 'plugin'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			cn_input = $$value;
			$$invalidate(2, cn_input);
		});
	}

	function input_input_handler() {
		cn_path_input_value = this.value;
		$$invalidate(3, cn_path_input_value);
	}

	const click_handler = () => {
		updateCNPath();
	};

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
	};

	$$self.$capture_state = () => ({
		App: obsidian.App,
		Notice: obsidian.Notice,
		TFile: obsidian.TFile,
		Log,
		GetAllFolders,
		ExcludedFolders,
		ExcludedFilenames,
		app,
		plugin,
		cn_input,
		all_files,
		cn_path_input_value,
		current_tli,
		updateCNPath
	});

	$$self.$inject_state = $$props => {
		if ('app' in $$props) $$invalidate(0, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(1, plugin = $$props.plugin);
		if ('cn_input' in $$props) $$invalidate(2, cn_input = $$props.cn_input);
		if ('all_files' in $$props) $$invalidate(4, all_files = $$props.all_files);
		if ('cn_path_input_value' in $$props) $$invalidate(3, cn_path_input_value = $$props.cn_path_input_value);
		if ('current_tli' in $$props) $$invalidate(5, current_tli = $$props.current_tli);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		app,
		plugin,
		cn_input,
		cn_path_input_value,
		all_files,
		current_tli,
		updateCNPath,
		input_binding,
		input_input_handler,
		click_handler
	];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { app: 0, plugin: 1 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*app*/ ctx[0] === undefined && !('app' in props)) {
			console.warn("<Settings> was created without expected prop 'app'");
		}

		if (/*plugin*/ ctx[1] === undefined && !('plugin' in props)) {
			console.warn("<Settings> was created without expected prop 'plugin'");
		}
	}

	get app() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set app(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get plugin() {
		throw new Error("<Settings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set plugin(value) {
		throw new Error("<Settings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const DEFAULT_SETTINGS = {
    CN_path: "Central Note.md",
    exluded_folders: [],
    exluded_filename_components: [],
    settings_version: "0.1.10"
};
/** take a legacy settings object and transform it till it conforms to the current version */
function UpgradeSettings(object, app) {
    try {
        // abort if settings are already in current version format
        if (object["settings_version"] === DEFAULT_SETTINGS["settings_version"]) {
            Log("Settings already in current version", true);
            return object;
        }
        // clone the object
        object = JSON.parse(JSON.stringify(object));
        let object_keys = Object.keys(object);
        console.log(object_keys);
        let old_version = undefined;
        // determine which version the legacy object is from
        if (!object_keys.contains("settings_version")) {
            old_version = "pre-0.1.10";
        }
        else {
            old_version = object["settings_version"];
        }
        console.log("old settings version: " + old_version);
        if (old_version === "pre-0.1.10") {
            // extract the CN path from CN_path_per_vault and save it as CN_path
            Log("Converting CN path from pre-0.1.10 to 0.1.10", true);
            // get just the name of all vaults there's a CN stored for
            let cn_settings_vault_names = object["CN_path_per_vault"].map((val) => val[0]);
            if (cn_settings_vault_names.contains(app.vault.getName())) {
                object["CN_path"] = object["CN_path_per_vault"][cn_settings_vault_names.indexOf(app.vault.getName())][1];
            }
            else {
                // delete the CN_path entry. it will then be filled with default_settings data later
                delete object["CN_path"];
            }
            // delete the legacy CN_path_per_vault entry
            delete object["CN_path_per_vault"];
            //set new settings_version
            object["settings_version"] = "0.1.10";
        }
        return object;
    }
    catch (_a) {
        // it things don't work out, delete all old settings data (better than breaking the plugin)
        return {};
    }
}

class MOCPlugin extends obsidian.Plugin {
    // statusbartext: HTMLElement	
    async onload() {
        await this.loadSettings();
        this.db = new DBManager(this.app, this);
        this.registerView(MOC_VIEW_TYPE, (leaf) => (this.view = new MOCView(leaf, this)));
        this.app.workspace.onLayoutReady(() => this.initializePlugin());
    }
    async initializePlugin() {
        this.addSettingTab(new MOCSettingTab(this.app, this, this.db));
        this.initLeaf();
        this.db.update();
        this.addRibbonIcon('sync', 'Update Map of Content', async () => {
            await this.db.update();
        });
        this.addCommand({
            id: 'rebuild-map-of-content',
            name: 'Update Map of Content',
            callback: () => {
                this.db.update();
            }
        });
        this.addCommand({
            id: 'open-note-as-central-note',
            name: 'Set open note as Central Note',
            callback: () => {
                let errors = [];
                // make sure a file is opened
                if (this.app.workspace.getActiveFile() == null) {
                    errors.push("No file has been opened");
                }
                else if (this.isExludedFile(this.app.workspace.getActiveFile())) {
                    errors.push("This file has been excluded from the Map of Content.");
                }
                if (errors.length) {
                    new obsidian.Notice(errors[0]);
                    return;
                }
                // get path of open note 
                this.updateSettings({ CN_path: this.app.workspace.getActiveFile().path });
                this.db.update();
            }
        });
        //Todo:  maybe implement some status bar text? like no of linked, unlinked, last time refreshed? 
        //this.statusbartext = this.addStatusBarItem()
        //this.statusbartext.setText("Total number of notes: " + String(l.count()));
    }
    initLeaf() {
        if (this.app.workspace.getLeavesOfType(MOC_VIEW_TYPE).length) {
            Log("View already attached", true);
        }
        else {
            this.app.workspace.getRightLeaf(true).setViewState({
                type: MOC_VIEW_TYPE,
                active: true
            });
        }
    }
    rerender() {
        Log("rerender on main plugin called", true);
        if (this.view) {
            this.view.rerender();
        }
    }
    onunload() {
        Log('Unloading plugin');
        if (this.view) {
            this.view.onClose();
        }
        this.app.workspace.detachLeavesOfType(MOC_VIEW_TYPE);
    }
    async loadSettings() {
        let data = await this.loadData();
        // upgrade settings to newest format if necessary
        // TODO only save new if changed
        data = UpgradeSettings(data, this.app);
        this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
        this.saveSettings();
    }
    async saveSettings() {
        await this.saveData(this.settings);
    }
    async updateSettings(updates) {
        Object.assign(this.settings, updates);
        await this.saveData(this.settings);
        this.rerender();
    }
    getSettingValue(setting) {
        return this.settings[setting];
    }
    /**check whether the central note exists */
    CNexists() {
        let exists = !(this.app.vault.getAbstractFileByPath(this.getSettingValue("CN_path")) == null);
        Log(exists ? "CN exists" : "CN does not exist", true);
        return exists;
    }
    /** get any open views and perform callback function on them */
    oldview(callback) {
        let leaves = this.app.workspace.getLeavesOfType(MOC_VIEW_TYPE);
        if (leaves.length) {
            Log(`Found ${leaves.length} leaves`, true);
            leaves.forEach((leaf) => {
                let view = leaf.view;
                callback(view);
            });
        }
        else {
            Log("No view attached", true);
        }
    }
    /**set internal reference to the current view
     * TODO: Allow keeping several views
     */
    registerViewInstance(view) {
        Log("View registered", true);
        this.view = view;
    }
    /** delete reference to view
     * TODO: allow keeping several views
    */
    unregisterViewInstance(view) {
        this.view = undefined;
    }
    /** check if the file is in any of the exluded folders or the filename contains excluded phrases */
    isExludedFile(file) {
        let path_to_file = file.path;
        let in_excluded_folder = this.getSettingValue("exluded_folders").some((path) => path_to_file.startsWith(path));
        if (in_excluded_folder) {
            return true;
        }
        let filename = file.basename + "." + file.extension;
        let has_excluded_filename = this.getSettingValue("exluded_filename_components").some((phrase) => filename.contains(phrase));
        return has_excluded_filename;
    }
}
class MOCSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin, db) {
        super(app, plugin);
        this.plugin = plugin;
        this.db = db;
        this._app = undefined;
    }
    display() {
        if (this._app) {
            this._app.$destroy();
            this._app = undefined;
        }
        this._app = new Settings({
            target: this.containerEl,
            props: { app: this.app, plugin: this.plugin },
        });
    }
    hide() {
        this.plugin.db.update();
    }
}

module.exports = MOCPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
