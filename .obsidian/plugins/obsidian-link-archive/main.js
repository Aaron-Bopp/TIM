/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const defaultArchiveText = "(Archived)";
const waybackUrl = "https://web.archive.org/web/";
const waybackSaveUrl = "https://web.archive.org/save/";

const defaultSettings = {
    archiveOption: 1 /* Archiveis */,
    archiveText: defaultArchiveText
};
class LinkArchiveSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const plugin = this.plugin;
        const { containerEl } = this;
        containerEl.empty();
        // add archive link text customization option
        containerEl.createEl("h2", { text: "Archive Settings" });
        new obsidian.Setting(containerEl)
            .setName("Link text")
            .setDesc("The text of the archive links")
            .addText(text => text
            .setValue(plugin.settings.archiveText)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log(`Link text: ${value}`);
            plugin.settings.archiveText = value;
            yield plugin.saveSettings();
        })));
        // new Setting(containerEl)
        // 	.setName('Archive Provider')
        // 	.setDesc('Choose a provider for the link archive')
        // 	.addDropdown((dropdown) => {
        // 		const options: Record<ArchiveOptions, string> = {
        // 			0: "Internet Archive",
        // 			1: "archive.is",
        // 			2: "Both"
        // 		};
        // 		dropdown
        // 			.addOptions(options)
        // 			.setValue(plugin.settings.archiveOption.toString())
        // 			.onChange(async (value) => {
        // 				console.log('Archive option: ' + value);
        // 				plugin.settings.archiveOption = +value;
        // 				await plugin.saveSettings();
        // 				this.display();
        // 		})
        // 	});
        containerEl.createEl("h2", { text: "About Link Archive" });
        containerEl.createEl("p", { text: "This plugin archives links in your note so they're available to you even if the original site goes down or gets removed." });
        containerEl.createEl("a", { text: "Open GitHub repository", href: "https://github.com/tomzorz/obsidian-link-archive" });
        // TODO github support and ko-fi
    }
}

const urlRegex = /(\b(https?|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
class ObsidianLinkArchivePlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Loading Link Archive plugin...");
            yield this.loadSettings();
            this.addRibbonIcon("restore-file-glyph", "Archive Links", () => __awaiter(this, void 0, void 0, function* () {
                // test save
                //new Notice('Archive option: ' + this.settings.archiveOption.toString());
                const archiveText = `[${this.settings.archiveText}]`;
                const dateLinkPart = new Date().toISOString().slice(0, 10).replace(/-/g, "");
                const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (view) {
                    const viewData = view.getViewData();
                    const reverseArray = [];
                    let linkArray;
                    while ((linkArray = urlRegex.exec(viewData)) !== null) {
                        console.log(`Found ${linkArray[0]}. Next starts at ${urlRegex.lastIndex}.`);
                        //if(linkArray[0].startsWith(waybackUrl)) continue;
                        //if(viewData.substring(urlRegex.lastIndex, urlRegex.lastIndex + 14).contains(archiveText)) continue;
                        // replace clean logic with
                        // IF next link is the same except with archiveorg in front of it, skip it
                        reverseArray.unshift([linkArray[0], urlRegex.lastIndex]);
                    }
                    console.log(reverseArray);
                    // ReSharper marks the "some" call as an error, but it's actually correct...
                    const cleanedList = reverseArray.filter(x => !x[0].startsWith(waybackUrl)
                        && !reverseArray.some(y => y[0].startsWith(waybackUrl) && y[0].endsWith(x[0])));
                    console.log(cleanedList);
                    if (cleanedList.length === 0) {
                        this.popNotice("No (new) links to archive.");
                        return;
                    }
                    const processingNotice = new obsidian.Notice(`Archiving ${cleanedList.length} link(s), this might take a while - please be patient...`, 0);
                    let i = 1;
                    const totalLinks = cleanedList.length;
                    for (const tuple of cleanedList) {
                        const currentLink = tuple[0];
                        const saveLink = `${waybackSaveUrl}${currentLink}`;
                        const archiveLink = ` ${archiveText}(${waybackUrl}${dateLinkPart}/${currentLink})`;
                        const extraOffset = viewData.charAt(tuple[1]) === ")" ? 1 : 0;
                        const offset = view.editor.offsetToPos(tuple[1] + extraOffset);
                        const message = `(${i}/${totalLinks}) Successfully archived ${currentLink}!`;
                        const failMessage = `(${i}/${totalLinks}) Failed to archive ${currentLink}!`;
                        i += 1;
                        yield this.delay(400);
                        try {
                            yield obsidian.request({
                                url: saveLink
                            });
                            view.editor.replaceRange(archiveLink, offset);
                            console.log(message);
                            this.popNotice(message);
                        }
                        catch (exception) {
                            this.popNotice(failMessage);
                        }
                    }
                    this.popNotice("Link archiving done!");
                    processingNotice.hide();
                }
                else {
                    this.popNotice("Link archiving only works if you have a note open.");
                }
            }));
            this.addSettingTab(new LinkArchiveSettingTab(this.app, this));
        });
    }
    popNotice(message, timeInSeconds) {
        // ReSharper disable WrongExpressionStatement
        if (arguments.length === 1) {
            new obsidian.Notice(message);
        }
        else {
            new obsidian.Notice(message, timeInSeconds * 1000);
        }
        // ReSharper restore WrongExpressionStatement
    }
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    onunload() {
        console.log("Unloading Link Archive plugin...");
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, defaultSettings, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = ObsidianLinkArchivePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
