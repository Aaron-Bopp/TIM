/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => SmarterMDhotkeys
});

// const.ts
var COMMANDS = [
  {
    id: "smarter-asterisk-bold",
    name: "Smarter Bold",
    before: "**",
    after: "**"
  },
  {
    id: "smarter-underscore-bold",
    name: "Smarter Underscore Bold",
    before: "__",
    after: "__"
  },
  {
    id: "smarter-asterisk-italics",
    name: "Smarter Italics",
    before: "*",
    after: "*"
  },
  {
    id: "smarter-underscore-italics",
    name: "Smarter Underscore Italics",
    before: "_",
    after: "_"
  },
  {
    id: "smarter-comments",
    name: "Smarter Comments",
    before: "%%",
    after: "%%"
  },
  {
    id: "smarter-inline-code",
    name: "Smarter Inline Code",
    before: "`",
    after: "`"
  },
  {
    id: "smarter-highlight",
    name: "Smarter Highlight",
    before: "==",
    after: "=="
  },
  {
    id: "smarter-strikethrough",
    name: "Smarter Strikethrough",
    before: "~~",
    after: "~~"
  },
  {
    id: "smarter-wikilink",
    name: "Smarter wikilink (internal link)",
    before: "[[",
    after: "]]"
  },
  {
    id: "smarter-md-link",
    name: "Smarter Markdown Link",
    before: "[",
    after: "]()"
  }
];

// main.ts
var import_obsidian = __toModule(require("obsidian"));
var SmarterMDhotkeys = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      COMMANDS.forEach((command) => {
        const { id, name, before, after } = command;
        this.addCommand({
          id,
          name,
          editorCallback: (editor) => this.expandAndWrap(before, after, editor)
        });
      });
      console.log("Smarter MD Hotkeys loaded.");
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Smarter MD Hotkeys unloaded.");
    });
  }
  expandAndWrap(frontMarkup, endMarkup, editor) {
    const [blen, alen] = [frontMarkup.length, endMarkup.length];
    function textUnderCursor(ep) {
      function wordUnderCursor(ep_) {
        var _a, _b;
        if ((_a = editor.cm) == null ? void 0 : _a.findWordAt)
          return editor.cm.findWordAt(ep);
        else if ((_b = editor.cm) == null ? void 0 : _b.state.wordAt)
          return editor.cm.state.wordAt(editor.posToOffset(ep));
      }
      function codeUnderCursor(ep_) {
        const so_ = editor.posToOffset(editor.getCursor("from"));
        let charBefore, charAfter;
        let [i, j, endReached, startReached] = [0, 0, false, false];
        const noteLength = editor.getValue().length;
        while (!/\s/.test(charBefore) && !startReached) {
          charBefore = editor.getRange(offToPos(so_ - (i + 1)), offToPos(so_ - i));
          i++;
          if (so_ - (i - 1) === 0)
            startReached = true;
        }
        while (!/\s/.test(charAfter) && !endReached) {
          charAfter = editor.getRange(offToPos(so_ + j), offToPos(so_ + j + 1));
          j++;
          if (so_ + (j - 1) === noteLength)
            endReached = true;
        }
        return { anchor: offToPos(so_ - (i - 1)), head: offToPos(so_ + (j - 1)) };
      }
      if (frontMarkup === "`")
        return codeUnderCursor(ep);
      return wordUnderCursor(ep);
    }
    function trimSelection() {
      const trimBefore = ["- [ ] ", "- [x] ", "- ", " ", "\n", "	", frontMarkup];
      const trimAfter = [" ", "\n", "	", endMarkup];
      let selection = editor.getSelection();
      let so_ = startOffset();
      let trimFinished = false;
      while (!trimFinished) {
        let cleanCount = 0;
        trimBefore.forEach((str) => {
          if (selection.startsWith(str)) {
            selection = selection.slice(str.length);
            so_ += str.length;
          } else {
            cleanCount++;
          }
        });
        if (cleanCount === trimBefore.length || !selection.length)
          trimFinished = true;
      }
      trimFinished = false;
      while (!trimFinished) {
        let cleanCount = 0;
        trimAfter.forEach((str) => {
          if (selection.endsWith(str))
            selection = selection.slice(0, -str.length);
          else
            cleanCount++;
        });
        if (cleanCount === trimAfter.length || !selection.length)
          trimFinished = true;
      }
      const blockID = selection.match(/ \^\w+$/);
      if (blockID !== null)
        selection = selection.slice(0, -blockID[0].length);
      editor.setSelection(offToPos(so_), offToPos(so_ + selection.length));
    }
    function markupOutsideSel() {
      const so_ = startOffset();
      const eo_ = endOffset();
      const charsBefore_ = editor.getRange(offToPos(so_ - blen), offToPos(so_));
      const charsAfter_ = editor.getRange(offToPos(eo_), offToPos(eo_ + alen));
      return charsBefore_ === frontMarkup && charsAfter_ === endMarkup;
    }
    const nothingSelected = () => !editor.somethingSelected();
    const multiWordSel = () => editor.getSelection().includes(" ");
    const multiLineSel = () => editor.getSelection().includes("\n");
    const partialWordSel = () => !nothingSelected() && !multiWordSel() && !multiLineSel();
    const startOffset = () => editor.posToOffset(editor.getCursor("from"));
    const endOffset = () => editor.posToOffset(editor.getCursor("from")) + editor.getSelection().length;
    const offToPos = (offset) => editor.offsetToPos(offset);
    if (nothingSelected() && markupOutsideSel()) {
      const so_ = startOffset();
      const eo_ = endOffset();
      editor.setSelection(offToPos(so_ - blen), offToPos(eo_ + alen));
      editor.replaceSelection("");
      editor.setSelection(offToPos(so_ - blen), offToPos(eo_ - alen));
      return;
    }
    let preNothingExpPos;
    if (nothingSelected() && !markupOutsideSel()) {
      preNothingExpPos = editor.getCursor();
      const { anchor, head } = textUnderCursor(preNothingExpPos);
      editor.setSelection(anchor, head);
    }
    trimSelection();
    let prePartialWordExpAnchor, prePartialWordExpHead;
    if (partialWordSel()) {
      prePartialWordExpAnchor = editor.getCursor("from");
      prePartialWordExpHead = editor.getCursor("to");
      const { anchor, head } = textUnderCursor(prePartialWordExpAnchor);
      editor.setSelection(anchor, head);
    }
    let preMultiWordExpAnchor, preMultiWordExpHead;
    if (multiWordSel()) {
      preMultiWordExpAnchor = editor.getCursor("from");
      preMultiWordExpHead = editor.getCursor("to");
      const firstWordRange = textUnderCursor(preMultiWordExpAnchor);
      preMultiWordExpHead.ch--;
      const lastWordRange = textUnderCursor(preMultiWordExpHead);
      preMultiWordExpHead.ch++;
      const lastWord = editor.getRange(lastWordRange.anchor, lastWordRange.head);
      if (/^[.,;:\-–—]/.test(lastWord))
        lastWordRange.head.ch = lastWordRange.anchor.ch + 1;
      editor.setSelection(firstWordRange.anchor, lastWordRange.head);
    }
    trimSelection();
    const selectedText = editor.getSelection();
    const so = startOffset();
    const eo = endOffset();
    console.log("Final Selection: '" + selectedText + "'");
    if (nothingSelected()) {
      editor.replaceSelection(frontMarkup + endMarkup);
      const cursor = editor.getCursor();
      cursor.ch -= alen;
      editor.setCursor(cursor);
      return;
    }
    if (!markupOutsideSel() && !nothingSelected()) {
      editor.replaceSelection(frontMarkup + selectedText + endMarkup);
      if (preNothingExpPos) {
        const pos = preNothingExpPos;
        pos.ch += blen;
        editor.setCursor(pos);
      } else if (preMultiWordExpAnchor) {
        const anchor = preMultiWordExpAnchor;
        const head = preMultiWordExpHead;
        anchor.ch += blen;
        head.ch += alen;
        editor.setSelection(anchor, head);
      } else if (prePartialWordExpAnchor) {
        const anchor = prePartialWordExpAnchor;
        const head = prePartialWordExpHead;
        anchor.ch += blen;
        head.ch += blen;
        editor.setSelection(anchor, head);
      } else {
        editor.setSelection(offToPos(so + blen), offToPos(eo + blen));
      }
      return;
    }
    if (markupOutsideSel() && !nothingSelected()) {
      editor.setSelection(offToPos(so - blen), offToPos(eo + alen));
      editor.replaceSelection(selectedText);
      if (preNothingExpPos) {
        const pos = preNothingExpPos;
        pos.ch -= blen;
        editor.setCursor(pos);
      } else if (preMultiWordExpAnchor) {
        const anchor = preMultiWordExpAnchor;
        const head = preMultiWordExpHead;
        anchor.ch -= blen;
        head.ch -= alen;
        editor.setSelection(anchor, head);
      } else if (prePartialWordExpAnchor) {
        const anchor = prePartialWordExpAnchor;
        const head = prePartialWordExpHead;
        anchor.ch -= blen;
        head.ch -= alen;
        editor.setSelection(anchor, head);
      } else {
        editor.setSelection(offToPos(so - blen), offToPos(eo - alen));
      }
      return;
    }
  }
};
