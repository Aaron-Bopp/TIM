/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const dashChar = "-";
const enDashChar = "–";
const emDashChar = "—";
const enDash = {
    matchTrigger: dashChar,
    matchRegExp: /--$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            enDashChar,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === enDashChar) {
            delta.update(delta.from, delta.to, [dashChar + dashChar]);
        }
    },
};
const emDash = {
    matchTrigger: dashChar,
    matchRegExp: /–-$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            emDashChar,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === emDashChar) {
            delta.update(delta.from, delta.to, [enDashChar + dashChar]);
        }
    },
};
const trippleDash = {
    matchTrigger: dashChar,
    matchRegExp: /—-$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            dashChar + dashChar + dashChar,
        ]);
    },
    performRevert: (instance, delta, settings) => { },
};
const ellipsis = {
    matchTrigger: ".",
    matchRegExp: /\.\.\.$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 2 }, delta.to, [
            "…",
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === "…") {
            delta.update(delta.from, delta.to, ["..."]);
        }
    },
};
const openDoubleQuote = {
    matchTrigger: '"',
    matchRegExp: /(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [settings.openDouble]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.openDouble) {
            delta.update(delta.from, delta.to, ['"']);
        }
    },
};
const closeDoubleQuote = {
    matchTrigger: '"',
    matchRegExp: /"$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [settings.closeDouble]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.closeDouble) {
            delta.update(delta.from, delta.to, ['"']);
        }
    },
};
const pairedDoubleQuote = {
    matchTrigger: '""',
    matchRegExp: /""$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [
            settings.openDouble + settings.closeDouble,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.closeDouble) {
            delta.update(delta.from, Object.assign(Object.assign({}, delta.to), { ch: delta.to.ch + 1 }), ['""']);
            setTimeout(() => instance.setCursor(Object.assign(Object.assign({}, delta.from), { ch: delta.from.ch + 1 })));
        }
    },
};
const wrappedDoubleQuote = {
    matchTrigger: /^".*"$/,
    matchRegExp: false,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [
            settings.openDouble + delta.text[0].slice(1, -1) + settings.closeDouble,
        ]);
    },
    performRevert: false,
};
const openSingleQuote = {
    matchTrigger: "'",
    matchRegExp: /(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [settings.openSingle]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.openSingle) {
            delta.update(delta.from, delta.to, ["'"]);
        }
    },
};
const closeSingleQuote = {
    matchTrigger: "'",
    matchRegExp: /'$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [settings.closeSingle]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.closeSingle) {
            delta.update(delta.from, delta.to, ["'"]);
        }
    },
};
const pairedSingleQuote = {
    matchTrigger: "''",
    matchRegExp: /''$/,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [
            settings.openSingle + settings.closeSingle,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.closeSingle) {
            delta.update(delta.from, Object.assign(Object.assign({}, delta.to), { ch: delta.to.ch + 1 }), ["''"]);
            setTimeout(() => instance.setCursor(Object.assign(Object.assign({}, delta.from), { ch: delta.from.ch + 1 })));
        }
    },
};
const wrappedSingleQuote = {
    matchTrigger: /^'.*'$/,
    matchRegExp: false,
    performUpdate: (instance, delta, settings) => {
        delta.update(delta.from, delta.to, [
            settings.openSingle + delta.text[0].slice(1, -1) + settings.closeSingle,
        ]);
    },
    performRevert: false,
};
const rightArrow = {
    matchTrigger: ">",
    matchRegExp: /->$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            settings.rightArrow,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.rightArrow) {
            delta.update(delta.from, delta.to, ["->"]);
        }
    },
};
const leftArrow = {
    matchTrigger: "-",
    matchRegExp: /<-$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            settings.leftArrow,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.leftArrow) {
            delta.update(delta.from, delta.to, ["<-"]);
        }
    },
};
const greaterThanOrEqualTo = {
    matchTrigger: "=",
    matchRegExp: />=$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            settings.greaterThanOrEqualTo,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.greaterThanOrEqualTo) {
            delta.update(delta.from, delta.to, [">="]);
        }
    },
};
const lessThanOrEqualTo = {
    matchTrigger: "=",
    matchRegExp: /<=$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            settings.lessThanOrEqualTo,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.lessThanOrEqualTo) {
            delta.update(delta.from, delta.to, ["<="]);
        }
    },
};
const notEqualTo = {
    matchTrigger: "=",
    matchRegExp: /\/=$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            settings.notEqualTo,
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === settings.notEqualTo) {
            delta.update(delta.from, delta.to, ["/="]);
        }
    },
};
const rightGuillemet = {
    matchTrigger: ">",
    matchRegExp: />>$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            "»",
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === "»") {
            delta.update(delta.from, delta.to, [">>"]);
        }
    },
};
const leftGuillemet = {
    matchTrigger: "<",
    matchRegExp: /<<$/,
    performUpdate: (instance, delta, settings) => {
        delta.update({ line: delta.from.line, ch: delta.from.ch - 1 }, delta.to, [
            "«",
        ]);
    },
    performRevert: (instance, delta, settings) => {
        if (instance.getRange(delta.from, delta.to) === "«") {
            delta.update(delta.from, delta.to, ["<<"]);
        }
    },
};
const dashRules = [enDash, emDash, trippleDash];
const ellipsisRules = [ellipsis];
const smartQuoteRules = [
    openDoubleQuote,
    closeDoubleQuote,
    pairedDoubleQuote,
    wrappedDoubleQuote,
    openSingleQuote,
    closeSingleQuote,
    pairedSingleQuote,
    wrappedSingleQuote,
];
const comparisonRules = [
    lessThanOrEqualTo,
    greaterThanOrEqualTo,
    notEqualTo,
];
const arrowRules = [leftArrow, rightArrow];
const guillemetRules = [leftGuillemet, rightGuillemet];

const DEFAULT_SETTINGS = {
    curlyQuotes: true,
    emDash: true,
    ellipsis: true,
    arrows: true,
    guillemets: false,
    comparisons: true,
    openSingle: "‘",
    closeSingle: "’",
    openDouble: "“",
    closeDouble: "”",
    leftArrow: "←",
    rightArrow: "→",
    lessThanOrEqualTo: "≤",
    greaterThanOrEqualTo: "≥",
    notEqualTo: "≠",
};
class SmartTypography extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.beforeChangeHandler = (instance, delta) => {
            if (this.lastUpdate.has(instance) && delta.origin === "+delete") {
                const revert = this.lastUpdate.get(instance).performRevert;
                if (revert) {
                    revert(instance, delta, this.settings);
                    this.lastUpdate.delete(instance);
                }
                return;
            }
            if (delta.origin === undefined && delta.text.length === 1) {
                const input = delta.text[0];
                for (let rule of this.inputRules) {
                    if (!(rule.matchTrigger instanceof RegExp)) {
                        continue;
                    }
                    if (rule.matchTrigger.test(input)) {
                        rule.performUpdate(instance, delta, this.settings);
                        return;
                    }
                }
                return;
            }
            if (delta.origin === "+input" && delta.text.length === 1) {
                const input = delta.text[0];
                const rules = this.inputRules.filter((r) => {
                    return typeof r.matchTrigger === "string" && r.matchTrigger === input;
                });
                if (rules.length === 0) {
                    if (this.lastUpdate.has(instance)) {
                        this.lastUpdate.delete(instance);
                    }
                    return;
                }
                let str = input;
                if (delta.to.ch > 0) {
                    str = `${instance.getRange({ line: delta.to.line, ch: 0 }, delta.to)}${str}`;
                }
                for (let rule of rules) {
                    if (rule.matchRegExp && rule.matchRegExp.test(str)) {
                        if (shouldCheckTextAtPos(instance, delta.from) &&
                            shouldCheckTextAtPos(instance, delta.to)) {
                            this.lastUpdate.set(instance, rule);
                            rule.performUpdate(instance, delta, this.settings);
                        }
                        return;
                    }
                }
            }
            if (this.lastUpdate.has(instance)) {
                this.lastUpdate.delete(instance);
            }
        };
    }
    buildInputRules() {
        this.inputRules = [];
        if (this.settings.emDash) {
            this.inputRules.push(...dashRules);
        }
        if (this.settings.ellipsis) {
            this.inputRules.push(...ellipsisRules);
        }
        if (this.settings.curlyQuotes) {
            this.inputRules.push(...smartQuoteRules);
        }
        if (this.settings.arrows) {
            this.inputRules.push(...arrowRules);
        }
        if (this.settings.guillemets) {
            this.inputRules.push(...guillemetRules);
        }
        if (this.settings.comparisons) {
            this.inputRules.push(...comparisonRules);
        }
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.lastUpdate = new WeakMap();
            yield this.loadSettings();
            this.addSettingTab(new SmartTypographySettingTab(this.app, this));
            this.app.workspace.onLayoutReady(() => {
                this.registerCodeMirror((cm) => {
                    cm.on("beforeChange", this.beforeChangeHandler);
                });
            });
        });
    }
    onunload() {
        this.lastUpdate = null;
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("beforeChange", this.beforeChangeHandler);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
            this.buildInputRules();
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.buildInputRules();
            yield this.saveData(this.settings);
        });
    }
}
class SmartTypographySettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName("Curly Quotes")
            .setDesc("Double and single quotes will be converted to curly quotes (“” & ‘’)")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.curlyQuotes)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.curlyQuotes = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Open double quote character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.openDouble)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.openDouble = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Close double quote character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.closeDouble)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.closeDouble = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Open single quote character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.openSingle)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.openSingle = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Close single quote character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.closeSingle)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.closeSingle = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Dashes")
            .setDesc("Two dashes (--) will be converted to an en-dash (–). And en-dash followed by a dash will be converted to and em-dash (—). An em-dash followed by a dash will be converted into three dashes (---)")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.emDash).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.emDash = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Ellipsis")
            .setDesc("Three periods (...) will be converted to an ellipses (…)")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.ellipsis)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ellipsis = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Guillemets")
            .setDesc("<< | >> will be converted to « | »")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.guillemets)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.guillemets = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Arrows")
            .setDesc("<- | -> will be converted to ← | →")
            .addToggle((toggle) => {
            toggle.setValue(this.plugin.settings.arrows).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.arrows = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Left arrow character").addText((text) => {
            text.setValue(this.plugin.settings.leftArrow).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.leftArrow = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Right arrow character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.rightArrow)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.rightArrow = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Comparison")
            .setDesc("<= | >= | /= will be converted to ≤ | ≥ | ≠")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.comparisons)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.comparisons = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Less than or equal to character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.lessThanOrEqualTo)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.lessThanOrEqualTo = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Greater than or equal to character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.greaterThanOrEqualTo)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.greaterThanOrEqualTo = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Not equal to character")
            .addText((text) => {
            text
                .setValue(this.plugin.settings.notEqualTo)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                if (!value)
                    return;
                if (value.length > 1) {
                    text.setValue(value[0]);
                    return;
                }
                this.plugin.settings.notEqualTo = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}
const ignoreListRegEx = /frontmatter|code|math|templater/;
function shouldCheckTextAtPos(instance, pos) {
    // Empty line
    if (!instance.getLine(pos.line)) {
        return true;
    }
    const tokens = instance.getTokenTypeAt(pos);
    // Plain text line
    if (!tokens) {
        return true;
    }
    // Not codeblock or frontmatter
    if (!ignoreListRegEx.test(tokens)) {
        return true;
    }
    return false;
}

module.exports = SmartTypography;
