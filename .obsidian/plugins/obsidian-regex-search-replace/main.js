/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

function around(obj, factories) {
    const removers = Object.keys(factories).map(key => around1(obj, key, factories[key]));
    return removers.length === 1 ? removers[0] : function () { removers.forEach(r => r()); };
}
function around1(obj, method, createWrapper) {
    const original = obj[method], hadOwn = obj.hasOwnProperty(method);
    let current = createWrapper(original);
    // Let our wrapper inherit static props from the wrapping method,
    // and the wrapping method, props from the original method
    if (original)
        Object.setPrototypeOf(current, original);
    Object.setPrototypeOf(wrapper, current);
    obj[method] = wrapper;
    // Return a callback to allow safe removal
    return remove;
    function wrapper(...args) {
        // If we have been deactivated and are no longer wrapped, remove ourselves
        if (current === original && obj[method] === wrapper)
            remove();
        return current.apply(this, args);
    }
    function remove() {
        // If no other patches, just do a direct removal
        if (obj[method] === wrapper) {
            if (hadOwn)
                obj[method] = original;
            else
                delete obj[method];
        }
        if (current === original)
            return;
        // Else pass future calls through, and remove wrapper from the prototype chain
        current = original;
        Object.setPrototypeOf(wrapper, original || Function);
    }
}

let searchClass = null;
let searchObjects = new WeakMap();
function fillCaptureGroups(n, i) {
    return n.replace(/[$](\d)/g, function (_, idx) {
        if (i[idx] != null) {
            return i[idx];
        }
        else {
            return "";
        }
    });
}
function getSearch(view) {
    if (searchObjects.has(view)) {
        // return if our class is already configured
        return searchObjects.get(view);
    }
    if (!searchClass)
        searchClass = class extends view.search.constructor {
            getQuery() {
                let query = this.searchInputEl.value;
                const isRE = query.match(/^\/(.*)\/([a-z]*)$/);
                if (isRE) {
                    try {
                        // allow for case insensitive regex using /foo/i
                        query = new RegExp(isRE[1], isRE[2].indexOf("i") == -1 ? "" : "i");
                    }
                    catch (e) { } // Not a regular expression after all, fallback to default method
                }
                else {
                    query = this.searchInputEl.value;
                }
                return query;
            }
            replaceCurrentMatch() {
                if (this.cmSearchCursor) {
                    if (this.cmSearchCursor.pos.match && this.cmSearchCursor.pos.match.length > 1) {
                        e = fillCaptureGroups(this.replaceInputEl.value, this.cmSearchCursor.pos.match);
                    }
                    else {
                        var e = this.replaceInputEl.value;
                    }
                    this.cmSearchCursor.replace(e),
                        this.findNext();
                }
            }
            replaceAll() {
                var e = this, t = (this.cmSearchCursor = this.cmEditor.getSearchCursor(this.getQuery(), null, {
                    caseFold: !0,
                }));
                this.sourceView.clearHighlights(),
                    this.cmEditor.operation(function () {
                        for (var n = e.replaceInputEl.value, i = t.findNext(); i;) {
                            if (typeof e.getQuery() === "object") {
                                // insert any capture groups into the replacement string
                                n = fillCaptureGroups(e.replaceInputEl.value, i);
                            }
                            t.replace(n, "searchReplace"), (i = t.findNext());
                        }
                    });
            }
        };
    const search = new searchClass(view, view.cmEditor, view.editorEl);
    searchObjects.set(view, search);
    return search;
}
class RegExSearch extends obsidian.Plugin {
    onload() {
        const patchShowSearch = around(obsidian.MarkdownSourceView.prototype, {
            showSearch(old) {
                return function (replace = false) { getSearch(this).show(replace); };
            },
        });
        this.register(patchShowSearch);
    }
    onunload() {
        this.app.workspace.getLeavesOfType("markdown").forEach((leaf) => {
            const view = leaf.view.sourceMode;
            if (view && searchObjects.has(view)) {
                searchObjects.get(view).searchContainer.detach(); // clean up DOM
                searchObjects.delete(view);
            }
        });
    }
}

module.exports = RegExSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
