/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class RuleEditModal extends obsidian.Modal {
    constructor(plugin, rule, idx) {
        super(plugin.app);
        this.plugin = plugin;
        this.rule = rule;
        this.idx = idx;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.empty();
        new obsidian.Setting(contentEl)
            .setName("Environment")
            .setClass("tabout-match-text")
            .setDesc("The Codemirror Token for the Environment.")
            .addText(text => {
            text
                .setValue(this.rule.tokenMatcher)
                .setPlaceholder("em")
                .onChange(value => {
                this.rule.tokenMatcher = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setName("Jump after the Characters")
            .setClass("tabout-match-text")
            .setDesc("If enabled the Cursor will be set after the Characters, otherwise before them.")
            .addToggle(toggle => {
            toggle
                .setValue(this.rule.jumpAfter)
                .onChange(value => {
                this.rule.jumpAfter = value;
            });
        });
        this.rule.lookups.forEach((jumpChar, idx) => {
            new obsidian.Setting(contentEl)
                .setName(idx === 0 ? "Characters" : "")
                .setClass("tabout-jump-char")
                .addExtraButton(btn => {
                btn
                    .setIcon("trash")
                    .onClick(() => {
                    this.rule.lookups.remove(this.rule.lookups[idx]);
                    this.onOpen();
                });
            })
                .addText(text => {
                text
                    .setValue(jumpChar)
                    .setPlaceholder("**")
                    .onChange(value => {
                    this.rule.lookups[idx] = value;
                });
            });
        });
        new obsidian.Setting(contentEl)
            .setClass("tabout-jump-char")
            .addButton(bt => {
            bt.setButtonText("Add Character")
                .onClick(() => {
                this.rule.lookups.push("");
                this.onOpen();
            });
        });
        const btn = createEl("button", { text: "Save Rule", cls: "tabout-add-rule" });
        btn.onClickEvent(() => {
            this.close();
        });
        contentEl.createDiv({ cls: "tabout-add-rule-container" }).append(btn);
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
        dispatchEvent(new CustomEvent("tabout-edit-complete", { detail: { rule: this.rule, idx: this.idx } }));
    }
}

class RuleCreateModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
        this.rule = {
            lookups: [""],
            tokenMatcher: "",
            jumpAfter: true,
        };
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.empty();
        new obsidian.Setting(contentEl)
            .setName("Environment")
            .setClass("tabout-match-text")
            .setDesc("The Codemirror Token for the Environment.")
            .addText(text => {
            text
                .setValue(this.rule.tokenMatcher)
                .setPlaceholder("em")
                .onChange(value => {
                this.rule.tokenMatcher = value;
            });
        });
        new obsidian.Setting(contentEl)
            .setName("Jump after the Characters")
            .setClass("tabout-match-text")
            .setDesc("If enabled the Cursor will be set after the Characters, otherwise before them.")
            .addToggle(toggle => {
            toggle
                .setValue(this.rule.jumpAfter)
                .onChange(value => {
                this.rule.jumpAfter = value;
            });
        });
        this.rule.lookups.forEach((jumpChar, idx) => {
            new obsidian.Setting(contentEl)
                .setName(idx === 0 ? "Characters" : "")
                .setClass("tabout-jump-char")
                .addExtraButton(btn => {
                btn
                    .setIcon("trash")
                    .onClick(() => {
                    this.rule.lookups.remove(this.rule.lookups[idx]);
                    this.onOpen();
                });
            })
                .addText(text => {
                text
                    .setValue(jumpChar)
                    .setPlaceholder("**")
                    .onChange(value => {
                    this.rule.lookups[idx] = value;
                });
            });
        });
        new obsidian.Setting(contentEl)
            .setClass("tabout-jump-char")
            .addButton(bt => {
            bt.setButtonText("Add Character")
                .onClick(() => {
                this.rule.lookups.push("");
                this.onOpen();
            });
        });
        const saveBtn = createEl("button", { text: "Add this Rule", cls: "tabout-add-rule" });
        saveBtn.onClickEvent(() => {
            if (this.rule.tokenMatcher && this.rule.lookups.length >= 1 && this.rule.lookups.first()) {
                this.save();
                this.close();
            }
            else {
                new obsidian.Notice("Something is still Missing");
            }
        });
        const cancelBtn = createEl("button", { text: "Cancel", cls: "tabout-add-rule" });
        cancelBtn.onClickEvent(() => {
            this.close();
        });
        contentEl.createDiv({ cls: "tabout-add-rule-container" }).append(saveBtn, cancelBtn);
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
    save() {
        dispatchEvent(new CustomEvent("tabout-rule-create", { detail: { rule: this.rule } }));
    }
}

class TaboutSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        addEventListener("tabout-edit-complete", (e) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.rules[e.detail.idx] = e.detail.rule;
            this.display();
            yield this.plugin.saveSettings();
        }));
        addEventListener("tabout-rule-create", (e) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.rules.push(e.detail.rule);
            this.display();
            yield this.plugin.saveSettings();
        }));
    }
    display() {
        let { containerEl } = this;
        const { settings } = this.plugin;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Obsidian Tabout' });
        settings.rules.forEach((rule, idx) => {
            new obsidian.Setting(containerEl)
                .setName(`Rule #${idx}`)
                .setDesc(this.generateDescription(rule))
                .addButton(bt => {
                bt.setButtonText("Edit")
                    .onClick(() => {
                    new RuleEditModal(this.plugin, rule, idx).open();
                });
            })
                .addExtraButton(bt => {
                bt.setIcon("trash")
                    .setTooltip("Delete Rule")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    settings.rules.remove(rule);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            });
        });
        const btn = createEl("button", { text: "Add Rule", cls: "tabout-add-rule" });
        btn.onClickEvent(() => {
            new RuleCreateModal(this.plugin).open();
        });
        containerEl.createDiv({ cls: "tabout-add-rule-container" }).append(btn);
    }
    generateDescription(rule) {
        let descEl = document.createDocumentFragment();
        descEl.append("This Rule is only active in ");
        descEl.append(createEl("code", { text: rule.tokenMatcher }));
        descEl.append(" Environments and with the press of ");
        descEl.append(createEl("kbd", { text: "Tab", cls: "tabout-kbd" }));
        descEl.append(" you will jump to one of these characters: ");
        rule.lookups.forEach((char, i) => {
            descEl.append(createEl("code", { text: char }));
            if (i != rule.lookups.length - 1) {
                descEl.append(", ");
            }
        });
        return descEl;
    }
}

const DEFAULT_SETTINGS = {
    rules: [
        {
            tokenMatcher: "hmd-internal-link",
            lookups: ["]]"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "strong",
            lookups: ["**"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "em",
            lookups: ["*"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "code",
            lookups: ["`"],
            jumpAfter: true,
        },
        {
            tokenMatcher: "math",
            lookups: ["{", "("],
            jumpAfter: true,
        }
    ],
};

class TaboutPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handleTabs = (cm, changeObj) => {
            var _a;
            // If tab is pressed
            if (changeObj.text.first() === "	") {
                for (let rule of this.settings.rules) {
                    // If Cursor is in correct environment
                    if ((_a = cm.getTokenTypeAt(cm.getCursor())) === null || _a === void 0 ? void 0 : _a.match(RegExp(rule.tokenMatcher))) {
                        // Get Cursor Position
                        const pos = cm.getCursor();
                        // Get content of Line after Cursor
                        const afterCursor = cm.getLine(pos.line).substring(pos.ch);
                        // Determine the nearest character
                        const nextChar = Math.min(...this.getIndices(rule.lookups, afterCursor, rule.jumpAfter));
                        // If there is a nearest one jump right after it
                        if (nextChar != Infinity) {
                            // @ts-ignore Don't insert the Tab
                            changeObj.cancel();
                            cm.setCursor(pos.line, pos.ch + nextChar);
                        }
                    }
                }
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new TaboutSettingsTab(this.app, this));
            this.registerCodeMirror((cm) => {
                cm.on("beforeChange", this.handleTabs);
            });
        });
    }
    getIndices(rules, afterCursor, jumpAfter) {
        let n = [];
        rules.forEach(r => {
            let idx = afterCursor.indexOf(r);
            if (idx != -1) {
                n.push(jumpAfter ? idx + r.length : idx);
            }
        });
        return n;
    }
    onunload() {
        this.app.workspace.iterateCodeMirrors(cm => cm.off("beforeChange", this.handleTabs));
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = TaboutPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy91aS9ydWxlRWRpdE1vZGFsLnRzIiwic3JjL3VpL3J1bGVDcmVhdGVNb2RhbC50cyIsInNyYy91aS9zZXR0aW5ncy50cyIsInNyYy90eXBlcy50cyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJNb2RhbCIsIlNldHRpbmciLCJOb3RpY2UiLCJQbHVnaW5TZXR0aW5nVGFiIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9B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
