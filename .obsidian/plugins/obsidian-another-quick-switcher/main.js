/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Use as compareFn in sort
 */
const sorter = (toOrdered, order = "asc") => {
    return (a, b) => order === "asc"
        ? toOrdered(a) > toOrdered(b)
            ? 1
            : toOrdered(b) > toOrdered(a)
                ? -1
                : 0
        : toOrdered(a) < toOrdered(b)
            ? 1
            : toOrdered(b) < toOrdered(a)
                ? -1
                : 0;
};
function flatten(matrix) {
    return [].concat(...matrix);
}
function uniq(values) {
    return [...new Set(values)];
}
function uniqFlatMap(values, mapper) {
    return uniq(flatten(values.map(mapper)));
}

const FOLDER = `<svg viewBox="0 0 100 100" class="folder" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M6.1,8c-3.3,0-6,2.7-6,6v73.8c-0.1,0.5-0.1,0.9,0.1,1.4c0.6,2.7,3,4.8,5.9,4.8h78c3,0,5.4-2.2,5.9-5.1 c0-0.1,0.1-0.2,0.1-0.4c0,0,0-0.1,0-0.1l0.1-0.3c0,0,0,0,0-0.1l9.9-53.6l0.1-0.2V34c0-3.3-2.7-6-6-6v-6c0-3.3-2.7-6-6-6H36.1 c0,0,0,0-0.1,0c-0.1,0-0.2-0.2-0.6-0.6c-0.5-0.6-1.1-1.5-1.7-2.5c-0.6-1-1.3-2.1-2.1-3C30.9,9,29.7,8,28.1,8L6.1,8z M6.1,12h22 c-0.1,0,0.1,0,0.6,0.6c0.5,0.6,1.1,1.5,1.7,2.5c0.6,1,1.3,2.1,2.1,3c0.8,0.9,1.9,1.9,3.6,1.9h52c1.1,0,2,0.9,2,2v6h-74 c-3.1,0-5.7,2.5-5.9,5.6h-0.1L10.1,34l-6,32.4V14C4.1,12.9,4.9,12,6.1,12z M16.1,32h78c1.1,0,2,0.9,2,2l-9.8,53.1l-0.1,0.1 c0,0.1,0,0.2-0.1,0.2c0,0.1,0,0.2-0.1,0.2c0,0,0,0.1,0,0.1c0,0,0,0,0,0.1c0,0.1,0,0.2-0.1,0.3c0,0.1,0,0.1,0,0.2 c0,0.1,0,0.2,0,0.2c-0.3,0.8-1,1.4-1.9,1.4h-78c-1.1,0-2-0.9-2-2L14,34.4l0.1-0.2V34C14.1,32.9,14.9,32,16.1,32L16.1,32z"></path></svg>`;
const ALIAS = `<svg viewBox="0 0 100 100" class="forward-arrow" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="m9.9,89.09226c-0.03094,0 -0.05414,0 -0.08508,0c-1.06734,-0.04641 -1.91039,-0.92812 -1.89492,-1.99547c0.00774,-0.48726 1.14469,-48.13101 47.52,-49.44586l0,-13.89094c0,-0.7657 0.44086,-1.4618 1.12922,-1.78664c0.68062,-0.33258 1.5082,-0.23203 2.09601,0.2475l31.68,25.74c0.46406,0.37899 0.73476,0.9436 0.73476,1.53914c0,0.59555 -0.2707,1.16016 -0.72703,1.53914l-31.68,25.74c-0.59555,0.47953 -1.41539,0.57234 -2.10375,0.2475c-0.68836,-0.32485 -1.12922,-1.02094 -1.12922,-1.78664l0,-13.84453c-41.26289,0.75024 -43.49039,24.81961 -43.56773,25.85601c-0.06961,1.04414 -0.93586,1.84078 -1.97226,1.84078z"></path></svg>`;
const TAG = `<svg viewBox="0 0 100 100" class="hashtag" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M36,18l-1.5,16H20l-0.4,4h14.5l-2.4,26H17.2l-0.4,4h14.5L30,82h4l1.3-14h26L60,82h4l1.3-14h15.5l0.4-4H65.7l2.4-26h15.5 l0.4-4H68.5L70,18h-4l-1.5,16h-26L40,18L36,18z M38.1,38h26l-2.4,26h-26L38.1,38z"></path></svg>`;

const regEmoji = new RegExp(/[\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]|[\uFE0E-\uFE0F]/, "g");
function excludeSpace(text) {
    return text.replace(/ /g, "");
}
function excludeEmoji(text) {
    return text.replace(regEmoji, "");
}
function smartIncludes(text, query) {
    return excludeSpace(text.toLowerCase()).includes(query.toLowerCase());
}
function smartStartsWith(text, query) {
    return excludeSpace(excludeEmoji(text.toLowerCase())).startsWith(query.toLowerCase());
}

function basename(path, ext) {
    var _a, _b;
    const name = (_b = (_a = path.match(/.+[\\/]([^\\/]+)[\\/]?$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : path;
    return ext && name.endsWith(ext) ? name.replace(ext, "") : name;
}
function extname(path) {
    const ext = basename(path).split(".").slice(1).pop();
    return ext ? `.${ext}` : "";
}
function dirname(path) {
    var _a, _b;
    return (_b = (_a = path.match(/(.+)[\\/].+$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : ".";
}

class AppHelper {
    constructor(app) {
        this.app = app;
    }
    getFolders() {
        return this.app.vault
            .getAllLoadedFiles()
            .filter((x) => x instanceof obsidian.TFolder);
    }
    findFirstLinkOffset(file, linkFile) {
        var _a, _b;
        const fileCache = this.app.metadataCache.getFileCache(file);
        const links = (_a = fileCache.links) !== null && _a !== void 0 ? _a : [];
        const embeds = (_b = fileCache.embeds) !== null && _b !== void 0 ? _b : [];
        return [...links, ...embeds].find((x) => {
            var _a;
            const toLinkFilePath = (_a = this.app.metadataCache.getFirstLinkpathDest(x.link, file.path)) === null || _a === void 0 ? void 0 : _a.path;
            return toLinkFilePath === linkFile.path;
        }).position.start.offset;
    }
    // noinspection FunctionWithMultipleLoopsJS
    createBacklinksMap() {
        const backLinksMap = {};
        for (const [filePath, linkMap] of Object.entries(this.app.metadataCache.resolvedLinks)) {
            for (const linkPath of Object.keys(linkMap)) {
                if (!backLinksMap[linkPath]) {
                    backLinksMap[linkPath] = new Set();
                }
                backLinksMap[linkPath].add(filePath);
            }
        }
        return backLinksMap;
    }
    openMarkdownFile(file, newLeaf, offset = 0) {
        var _a;
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf
            .openFile(file, (_a = this.app.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.getViewState())
            .then(() => {
            this.app.workspace.setActiveLeaf(leaf, true, true);
            const viewOfType = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            if (viewOfType) {
                const editor = viewOfType.editor;
                const pos = editor.offsetToPos(offset);
                editor.setCursor(pos);
                editor.scrollIntoView({ from: pos, to: pos }, 200);
            }
        });
    }
    searchPhantomFiles() {
        return uniq(flatten(Object.values(this.app.metadataCache.unresolvedLinks).map(Object.keys))).map((x) => this.createPhantomFile(x));
    }
    insertLinkToActiveFileBy(file) {
        const activeMarkdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!activeMarkdownView) {
            return;
        }
        const linkText = this.app.fileManager.generateMarkdownLink(file, activeMarkdownView.file.path);
        const editor = activeMarkdownView.editor;
        editor.replaceSelection(linkText);
    }
    createMarkdown(linkText) {
        return __awaiter(this, void 0, void 0, function* () {
            const linkPath = this.getPathToBeCreated(linkText);
            if (yield this.exists(linkPath)) {
                return null;
            }
            const dir = dirname(linkPath);
            if (!(yield this.exists(dir))) {
                yield this.app.vault.createFolder(dir);
            }
            return this.app.vault.create(linkPath, "");
        });
    }
    exists(normalizedPath) {
        return this.app.vault.adapter.exists(normalizedPath);
    }
    getPathToBeCreated(linkText) {
        let linkPath = obsidian.getLinkpath(linkText);
        if (extname(linkPath) !== ".md") {
            linkPath += ".md";
        }
        if (linkPath.includes("/")) {
            return linkPath;
        }
        const parent = this.app.fileManager.getNewFileParent("").path;
        return `${parent}/${linkPath}`;
    }
    // TODO: Use another interface instead of TFile
    createPhantomFile(linkText) {
        const linkPath = this.getPathToBeCreated(linkText);
        return {
            path: linkPath,
            name: basename(linkPath),
            vault: this.app.vault,
            extension: "md",
            basename: basename(linkPath, ".md"),
            parent: {
                name: basename(dirname(linkPath)),
                path: dirname(linkPath),
                vault: this.app.vault,
                // XXX: From here, Untrusted properties
                children: [],
                parent: undefined,
                isRoot: () => true,
            },
            stat: {
                mtime: 0,
                ctime: 0,
                size: 0,
            },
        };
    }
}

function matchQuery$1(item, query) {
    // tag
    if (query.startsWith("#")) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query.slice(1)));
        return {
            type: tags.length > 0 ? "tag" : "not found",
            meta: tags,
            alias: false,
        };
    }
    const qs = query.split("/");
    const file = qs.pop();
    const includeDir = qs.every((dir) => smartIncludes(item.file.parent.path, dir));
    if (!includeDir) {
        return { type: "not found", alias: false };
    }
    if (smartStartsWith(item.file.name, file)) {
        return { type: "prefix-name", meta: [item.file.name], alias: false };
    }
    const prefixNameMatchedAliases = item.aliases.filter((x) => smartStartsWith(x, file));
    if (prefixNameMatchedAliases.length > 0) {
        return { type: "prefix-name", meta: prefixNameMatchedAliases, alias: true };
    }
    if (smartIncludes(item.file.name, file)) {
        return { type: "name", meta: [item.file.name], alias: false };
    }
    const nameMatchedAliases = item.aliases.filter((x) => smartIncludes(x, file));
    if (nameMatchedAliases.length > 0) {
        return { type: "name", meta: nameMatchedAliases, alias: true };
    }
    if (smartIncludes(item.file.path, file)) {
        return { type: "directory", meta: [item.file.path], alias: false };
    }
    return { type: "not found", alias: false };
}
function matchQueryAll$1(item, queries) {
    return queries.map((q) => matchQuery$1(item, q));
}
function stampMatchResults(item, queries) {
    return Object.assign(Object.assign({}, item), { matchResults: matchQueryAll$1(item, queries) });
}
class AnotherQuickSwitcherModal extends obsidian.SuggestModal {
    constructor(app, initialMode, settings) {
        var _a;
        super(app);
        this.initialMode = initialMode;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setInstructions([
            { command: "[↑↓]", purpose: "navigate" },
            { command: "[↵]", purpose: "open" },
            { command: "[ctrl/cmd ↵]", purpose: "open in new pane" },
            { command: "[shift ↵]", purpose: "create" },
            { command: "[ctrl/cmd shift ↵]", purpose: "create in new pane" },
            { command: "[alt ↵]", purpose: "insert to editor" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.scope.register(["Mod"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true }));
        this.scope.register(["Alt"], "Enter", () => this.chooser.useSelectedItem({ altKey: true }));
        this.scope.register(["Shift"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, false);
            }
        });
        this.scope.register(["Shift", "Mod"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, true);
            }
        });
        this.scope.register(["Mod"], "N", () => {
            this.chooser.setSelectedItem(this.chooser.selectedItem + 1);
        });
        this.scope.register(["Mod"], "P", () => {
            this.chooser.setSelectedItem(this.chooser.selectedItem - 1);
        });
        const phantomItems = this.settings.showExistingFilesOnly
            ? []
            : this.appHelper.searchPhantomFiles().map((x) => ({
                file: x,
                aliases: [],
                tags: [],
                phantom: true,
                matchResults: [],
            }));
        const activeFilePath = (_a = app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
        const markdownItems = app.vault
            .getMarkdownFiles()
            .filter((x) => x.path !== activeFilePath)
            .map((x) => {
            var _a, _b, _c;
            const cache = app.metadataCache.getFileCache(x);
            return {
                file: x,
                aliases: (_a = obsidian.parseFrontMatterAliases(cache.frontmatter)) !== null && _a !== void 0 ? _a : [],
                tags: uniq([
                    ...((_b = cache.tags) !== null && _b !== void 0 ? _b : []).map((x) => x.tag),
                    ...((_c = obsidian.parseFrontMatterTags(cache.frontmatter)) !== null && _c !== void 0 ? _c : []),
                ]),
                phantom: false,
                matchResults: [],
            };
        });
        this.originItems = [...markdownItems, ...phantomItems];
        this.ignoredItems = this.ignoreItems(initialMode);
    }
    handleCreateNew(searchQuery, newLeaf) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.appHelper.createMarkdown(this.searchQuery);
            if (!file) {
                // noinspection ObjectAllocationIgnored
                new obsidian.Notice("This file already exists.");
                return;
            }
            this.appHelper.openMarkdownFile(file, newLeaf);
            this.close();
        });
    }
    ignoreItems(mode) {
        const ignoreItems = (patterns) => {
            const ps = patterns.split("\n").filter((x) => x);
            return ps.length === 0
                ? this.originItems
                : this.originItems.filter((x) => !ps.some((p) => x.file.path.startsWith(p)));
        };
        switch (mode) {
            case "normal":
                return ignoreItems(this.settings.ignoreNormalPathPrefixPatterns);
            case "recent":
                return ignoreItems(this.settings.ignoreRecentPathPrefixPatterns);
            case "backlink":
                return ignoreItems(this.settings.ignoreBackLinkPathPrefixPatterns);
        }
    }
    getSuggestions(query) {
        var _a;
        let lastOpenFileIndexByPath = {};
        this.app.workspace.getLastOpenFiles().forEach((v, i) => {
            lastOpenFileIndexByPath[v] = i;
        });
        let searchQuery = query;
        const changeMode = (mode, slice = 0) => {
            if (this.mode !== mode) {
                this.ignoredItems = this.ignoreItems(mode);
            }
            this.mode = mode;
            searchQuery = query.slice(slice);
        };
        // noinspection IfStatementWithTooManyBranchesJS
        if (query.startsWith(":n ")) {
            changeMode("normal", 3);
        }
        else if (query.startsWith(":r ")) {
            changeMode("recent", 3);
        }
        else if (query.startsWith(":b ")) {
            changeMode("backlink", 3);
        }
        else {
            changeMode(this.initialMode);
        }
        this.searchQuery = searchQuery;
        const qs = searchQuery.split(" ").filter((x) => x);
        if (this.mode === "backlink") {
            // ✨ If I can use MetadataCache.getBacklinksForFile, I would like to use it instead of original createBacklinksMap :)
            const backlinksMap = this.appHelper.createBacklinksMap();
            const activeFilePath = (_a = this.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
            return this.ignoredItems
                .filter((x) => { var _a; return (_a = backlinksMap[activeFilePath]) === null || _a === void 0 ? void 0 : _a.has(x.file.path); })
                .map((x) => stampMatchResults(x, qs))
                .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
                .slice(0, this.settings.maxNumberOfSuggestions);
        }
        if (!query) {
            return this.ignoredItems
                .sort(sorter((x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 65535; }))
                .slice(0, this.settings.maxNumberOfSuggestions);
        }
        let suggestions = this.ignoredItems
            .map((x) => stampMatchResults(x, qs))
            .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
            .sort(sorter((x) => x.file.stat.mtime, "desc"))
            .sort(sorter((x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 65535; }));
        if (this.mode === "normal") {
            suggestions = suggestions
                .sort(sorter((x) => x.matchResults.some((x) => x.type === "prefix-name" || x.type === "name")
                ? 0
                : 1))
                .sort(sorter((x) => {
                const firstPrefixMatch = x.matchResults.find((x) => x.type === "prefix-name");
                return firstPrefixMatch ? 1000 - x.file.name.length : 0;
            }, "desc"));
        }
        return suggestions.slice(0, this.settings.maxNumberOfSuggestions);
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: [
                "another-quick-switcher__item",
                item.phantom ? "another-quick-switcher__phantom_item" : "",
            ],
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const fileDiv = createDiv({
            cls: "another-quick-switcher__item__file",
            text: item.file.basename,
        });
        entryDiv.appendChild(fileDiv);
        if (this.settings.showDirectory) {
            const directoryDiv = createDiv({
                cls: "another-quick-switcher__item__directory",
            });
            directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
            directoryDiv.appendText(` ${item.file.parent.name}`);
            entryDiv.appendChild(directoryDiv);
        }
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
        // reasons..
        const aliases = item.matchResults.filter((res) => res.alias);
        const tags = item.matchResults.filter((res) => res.type === "tag");
        if (aliases.length === 0 && tags.length === 0) {
            return;
        }
        const reasonsDiv = createDiv({
            cls: "another-quick-switcher__item__reasons",
        });
        el.appendChild(reasonsDiv);
        if (aliases.length > 0) {
            const aliasDiv = createDiv({
                cls: "another-quick-switcher__item__reason",
            });
            uniqFlatMap(aliases, (x) => x.meta).forEach((x) => {
                const aliasSpan = createSpan({
                    cls: "another-quick-switcher__item__reason__alias",
                });
                aliasSpan.insertAdjacentHTML("beforeend", ALIAS);
                aliasSpan.appendText(x);
                aliasDiv.appendChild(aliasSpan);
            });
            reasonsDiv.appendChild(aliasDiv);
        }
        if (tags.length > 0) {
            const tagsDiv = createDiv({
                cls: "another-quick-switcher__item__reason",
            });
            uniqFlatMap(tags, (x) => x.meta).forEach((x) => {
                const tagsSpan = createSpan({
                    cls: "another-quick-switcher__item__reason__tag",
                });
                tagsSpan.insertAdjacentHTML("beforeend", TAG);
                tagsSpan.appendText(x.replace("#", ""));
                tagsDiv.appendChild(tagsSpan);
            });
            reasonsDiv.appendChild(tagsDiv);
        }
    }
    onChooseSuggestion(item, evt) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileToOpened = item.file;
            if (evt.altKey) {
                this.appHelper.insertLinkToActiveFileBy(fileToOpened);
                return;
            }
            if (item.phantom) {
                fileToOpened = yield this.app.vault.create(item.file.path, "");
            }
            const offset = this.mode === "backlink"
                ? this.appHelper.findFirstLinkOffset(item.file, this.app.workspace.getActiveFile())
                : undefined;
            this.appHelper.openMarkdownFile(fileToOpened, evt.ctrlKey || evt.metaKey, offset);
        });
    }
}

function matchQuery(item, query, matcher) {
    const qs = query.split("/");
    const folder = qs.pop();
    return (qs.every((dir) => smartIncludes(item.folder.parent.path, dir)) &&
        matcher(item, folder));
}
function matchQueryAll(item, queries, matcher) {
    return queries.every((q) => matchQuery(item, q, matcher));
}
function stampMatchType(item, queries) {
    if (matchQueryAll(item, queries, (item, query) => smartStartsWith(item.folder.name, query))) {
        return Object.assign(Object.assign({}, item), { matchType: "prefix-name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.name, query))) {
        return Object.assign(Object.assign({}, item), { matchType: "name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.path, query))) {
        return Object.assign(Object.assign({}, item), { matchType: "directory" });
    }
    return item;
}
class MoveModal extends obsidian.SuggestModal {
    constructor(app, settings) {
        super(app);
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setInstructions([
            { command: "[↑↓]", purpose: "navigate" },
            { command: "[↵]", purpose: "move to" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.originItems = this.appHelper
            .getFolders()
            .filter((x) => !x.isRoot())
            .map((x) => ({
            folder: x,
        }));
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        return this.originItems
            .map((x) => stampMatchType(x, qs))
            .filter((x) => x.matchType)
            .sort(sorter((x) => (x.matchType === "directory" ? 1 : 0)))
            .sort(sorter((x) => x.matchType === "prefix-name" ? 1000 - x.folder.name.length : 0, "desc"))
            .slice(0, 10);
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const folderDiv = createDiv({
            cls: "another-quick-switcher__item__file",
            text: item.folder.name,
        });
        entryDiv.appendChild(folderDiv);
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        directoryDiv.appendText(` ${item.folder.parent.name}`);
        entryDiv.appendChild(directoryDiv);
        const prefixIcon = createSpan({
            cls: "another-quick-switcher__item__icon",
        });
        prefixIcon.insertAdjacentHTML("beforeend", FOLDER);
        itemDiv.appendChild(prefixIcon);
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                return;
            }
            yield this.app.fileManager.renameFile(activeFile, `${item.folder.path}/${activeFile.name}`);
        });
    }
}

function showSearchDialog(app, mode, settings) {
    const modal = new AnotherQuickSwitcherModal(app, mode, settings);
    modal.open();
}
function showMoveDialog(app, settings) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new MoveModal(app, settings);
    modal.open();
}
function createCommands(app, settings) {
    return [
        {
            id: "normal-search",
            name: "Normal search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "p" }],
            callback: () => {
                showSearchDialog(app, "normal", settings);
            },
        },
        {
            id: "recent-search",
            name: "Recent search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "e" }],
            callback: () => {
                showSearchDialog(app, "recent", settings);
            },
        },
        {
            id: "backlink-search",
            name: "Backlink search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "h" }],
            callback: () => {
                showSearchDialog(app, "backlink", settings);
            },
        },
        {
            id: "move",
            name: "Move file to another folder",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "m" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showMoveDialog(app, settings);
            },
        },
    ];
}

const DEFAULT_SETTINGS = {
    showDirectory: true,
    showExistingFilesOnly: false,
    maxNumberOfSuggestions: 50,
    ignoreNormalPathPrefixPatterns: "",
    ignoreRecentPathPrefixPatterns: "",
    ignoreBackLinkPathPrefixPatterns: "",
};
class AnotherQuickSwitcherSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Another Quick Switcher - Settings" });
        new obsidian.Setting(containerEl).setName("Show directory").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showDirectory = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Show existing files only")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showExistingFilesOnly).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showExistingFilesOnly = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Max number of suggestions")
            .addSlider((sc) => sc
            .setLimits(1, 255, 1)
            .setValue(this.plugin.settings.maxNumberOfSuggestions)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.maxNumberOfSuggestions = value;
            yield this.plugin.saveSettings();
        })));
        containerEl.createEl("h3", { text: "🔍 Normal search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Normal search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreNormalPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreNormalPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "⏱ Recent search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Recent search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreRecentPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreRecentPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "👀 Backlink search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Backlink search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreBackLinkPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreBackLinkPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
    }
}

class AnotherQuickSwitcher extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new AnotherQuickSwitcherSettingTab(this.app, this));
            createCommands(this.app, this.settings).forEach((x) => this.addCommand(x));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), (yield this.loadData()));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = AnotherQuickSwitcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
