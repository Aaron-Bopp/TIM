/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

let references;
function buildLinksAndReferences(app) {
    const refs = app.fileManager
        .getAllLinkResolutions()
        .reduce((acc, link) => {
        const key = link.reference.link;
        if (!acc[key]) {
            acc[key] = [];
        }
        if (acc[key]) {
            acc[key].push(link);
        }
        return acc;
    }, {});
    references = refs;
}
function getCurrentPage({ file, app, }) {
    const cache = app.metadataCache.getFileCache(file);
    const transformedCache = {};
    if (cache.blocks) {
        transformedCache.blocks = Object.values(cache.blocks).map((block) => ({
            key: block.id,
            pos: block.position.start.line,
            page: file.basename,
            type: "block",
            references: references[`${file.basename}#^${block.id}`],
        }));
    }
    if (cache.headings) {
        transformedCache.headings = cache.headings.map((header) => ({
            original: header.heading,
            key: obsidian.stripHeading(header.heading),
            pos: header.position.start.line,
            page: file.basename,
            type: "header",
            references: references[`${file.basename}#${obsidian.stripHeading(header.heading)}`],
        }));
    }
    if (cache.sections) {
        transformedCache.sections = createListSections(cache.sections, cache.listItems);
    }
    if (cache.links) {
        transformedCache.links = cache.links.map((link) => ({
            key: link.link,
            type: "link",
            pos: link.position.start.line,
            page: file.basename,
            references: references[link.link],
        }));
        if (transformedCache.links) {
            transformedCache.links = transformedCache.links.map((link) => {
                if (link.key.includes("#") &&
                    !link.key.includes("#^") &&
                    transformedCache.headings) {
                    transformedCache.headings.forEach((header) => {
                        if (obsidian.stripHeading(header.key) ===
                            obsidian.stripHeading(link.key.split("#")[1])) {
                            link.original = header.original;
                        }
                    });
                }
                return link;
            });
        }
    }
    if (cache.embeds) {
        transformedCache.embeds = cache.embeds.map((embed) => ({
            key: embed.link,
            page: file.basename,
            type: "link",
            pos: embed.position.start.line,
            references: references[embed.link],
        }));
        if (transformedCache.embeds) {
            transformedCache.embeds = transformedCache.embeds.map((embed) => {
                if (embed.key.includes("#") &&
                    !embed.key.includes("#^") &&
                    transformedCache.headings) {
                    transformedCache.headings.forEach((header) => {
                        if (obsidian.stripHeading(header.key) ===
                            obsidian.stripHeading(embed.key.split("#")[1])) {
                            embed.original = header.original;
                        }
                    });
                }
                return embed;
            });
        }
    }
    return transformedCache;
}
/**
 * If the section is of type list, add the list items from the metadataCache to the section object.
 * This makes it easier to iterate a list when building block ref buttons
 *
 * @param   {SectionCache[]}                sections
 * @param   {ListItemCache[]}               listItems
 *
 * @return  {Section[]}                        Array of sections with additional items key
 */
function createListSections(sections, listItems) {
    if (listItems) {
        return sections.map((section) => {
            const items = [];
            if (section.type === "list") {
                listItems.forEach((item) => {
                    if (item.position.start.line >=
                        section.position.start.line &&
                        item.position.start.line <= section.position.end.line) {
                        items.push(Object.assign({ pos: item.position.start.line }, item));
                    }
                });
                const sectionWithItems = Object.assign({ items }, section);
                return sectionWithItems;
            }
            return section;
        });
    }
    return sections;
}

const DEFAULT_SETTINGS = {
    displayParent: true,
    displayChild: true,
    tableType: "search"
};
let settings = Object.assign({}, DEFAULT_SETTINGS);
const getSettings = () => {
    return Object.assign({}, settings);
};
const updateSettings = (newSettings) => {
    settings = Object.assign(Object.assign({}, settings), newSettings);
    return getSettings();
};
class BlockRefCountSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Block Reference Counter Settings" });
        new obsidian.Setting(containerEl)
            .setName("Display on Parents")
            .setDesc("Display the count of block references on the parent block or header")
            .addToggle((toggle) => {
            toggle.setValue(getSettings().displayParent);
            toggle.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ displayParent: val });
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Display on Children")
            .setDesc("Display the count of block references on the child reference blocks")
            .addToggle((toggle) => {
            toggle.setValue(getSettings().displayChild);
            toggle.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ displayChild: val });
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Type of Reference Table")
            .setDesc("Choose what type of table you'd like references displayed as.")
            .addDropdown((dropdown) => {
            const { tableType } = getSettings();
            dropdown.addOption("search", "Search Results Table");
            dropdown.addOption("basic", "Basic Table");
            dropdown.setValue(tableType);
            dropdown.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ tableType: val });
                yield this.plugin.saveSettings();
            }));
        });
    }
}

/*
 * BlockRefCounter Plugin
 * by shabegom
 *
 * Iterates through the cache of all notes in a vault and creates an index of block-ids, headings, links referencing a block-id or heading, and embeds
 * Adds a button in Preview view with the count of references found
 * When button is clicked, reveals a table with links to each reference and line reference exists on
 */
class BlockRefCounter extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading plugin: Block Reference Counter");
            yield this.loadSettings();
            this.addSettingTab(new BlockRefCountSettingTab(this.app, this));
            const indexDebounce = obsidian.debounce(() => {
                buildLinksAndReferences(this.app);
            }, 1000, true);
            const previewDebounce = obsidian.debounce(() => {
                createPreviewView(this.app);
            }, 100, true);
            buildLinksAndReferences(this.app);
            createPreviewView(this.app);
            /**
             * Fire the initial indexing only if layoutReady = true
             * and if the metadataCache has been resolved for the first time
             * avoids trying to create an index while obsidian is indexing files
             */
            if (!this.app.workspace.layoutReady) {
                this.resolved = this.app.metadataCache.on("resolved", () => {
                    this.app.metadataCache.offref(this.resolved);
                    buildLinksAndReferences(this.app);
                    createPreviewView(this.app);
                });
            }
            else {
                buildLinksAndReferences(this.app);
                createPreviewView(this.app);
            }
            this.registerView("search-ref", (leaf) => {
                if (!this.app.viewRegistry.getViewCreatorByType("search")) {
                    return;
                }
                const newView = this.app.viewRegistry.getViewCreatorByType("search")(leaf);
                newView.getViewType = () => "search-ref";
                return newView;
            });
            //        *
            // Event listeners to re-index notes if the cache changes or a note is deleted
            // triggers creation of block ref buttons on the preview view
            this.registerEvent(this.app.vault.on("delete", () => {
                indexDebounce();
            }));
            //       *
            // Event listeners for layout changes to update the preview view with a block ref count button
            //
            this.registerEvent(this.app.workspace.on("layout-change", () => {
                indexDebounce();
                previewDebounce();
            }));
            this.registerEvent(this.app.workspace.on("active-leaf-change", () => {
                indexDebounce();
                previewDebounce();
            }));
            this.registerEvent(this.app.workspace.on("file-open", (file) => {
                indexDebounce();
                this.page = getCurrentPage({ file, app: this.app });
                previewDebounce();
            }));
            this.registerEvent(this.app.metadataCache.on("resolve", (file) => {
                indexDebounce();
                this.page = getCurrentPage({ file, app: this.app });
                previewDebounce();
            }));
            this.registerMarkdownPostProcessor((el, ctx) => {
                const sectionInfo = ctx.getSectionInfo(el);
                const lineStart = sectionInfo && sectionInfo.lineStart;
                if (this.page && lineStart) {
                    processPage(this.page, this.app, el, lineStart);
                }
            });
            //
            //        This runs only one time at beginning when Obsidian is completely loaded after startup
            //
            this.app.workspace.onLayoutReady(() => {
                unloadSearchViews(this.app);
            });
        });
    }
    onunload() {
        console.log("unloading plugin: Block Reference Counter");
        unloadButtons(this.app);
        unloadSearchViews(this.app);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const newSettings = yield this.loadData();
            updateSettings(newSettings);
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(getSettings());
        });
    }
}
/**
 * Finds the sections present in a note's Preview, iterates them and adds references if required
 * This duplicates some of the functionality of onMarkdownPostProcessor, but is fired on layout and leaf changes
 * @param   {App}                   app
 * @return  {void}
 */
function createPreviewView(app) {
    var _a;
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeView) {
        const page = getCurrentPage({ file: activeView.file, app });
        try {
            (_a = activeView.previewMode) === null || _a === void 0 ? void 0 : _a.renderer.onRendered(() => {
                var _a, _b;
                // if previewMode exists and has sections, get the sections
                const elements = (_b = (_a = activeView.previewMode) === null || _a === void 0 ? void 0 : _a.renderer) === null || _b === void 0 ? void 0 : _b.sections;
                if (page && elements) {
                    elements.forEach((section) => {
                        processPage(page, app, section.el, section.lineStart);
                    });
                }
            });
        }
        catch (e) {
            console.log(e);
        }
    }
}
function processPage(page, app, el, start) {
    const settings = getSettings();
    if (page.sections) {
        page.sections.forEach((pageSection) => {
            if (pageSection.position.start.line === start) {
                pageSection.pos = pageSection.position.start.line;
                const type = pageSection === null || pageSection === void 0 ? void 0 : pageSection.type;
                // find embeds because their section.type is paragraph but they need to be processed differently
                const embeds = el.querySelectorAll(".internal-embed");
                const hasEmbed = embeds.length > 0 ? true : false;
                if ((settings.displayParent &&
                    page.blocks &&
                    !hasEmbed &&
                    type === "paragraph") ||
                    type === "list" ||
                    type === "blockquote" ||
                    type === "code") {
                    addBlockReferences(app, el, page.blocks, pageSection);
                }
                if (settings.displayParent &&
                    page.headings &&
                    type === "heading") {
                    addHeaderReferences(app, el, page.headings, pageSection);
                }
                if (settings.displayChild && page.links) {
                    addLinkReferences(app, el, page.links, pageSection);
                }
                if (settings.displayChild && page.embeds) {
                    addEmbedReferences(app, el, page.embeds, pageSection);
                }
            }
        });
    }
}
/**
 * Iterate through the blocks in the note and add a block ref button if the section includes a block-id
 *
 *
 * @param   {App}                      app
 * @param   {HTMLElement}              val      the HTMLElement to attach the button to
 * @param   {Block[]}                  blocks   Array of blocks from pages index
 * @param   {Section}                  section  Section object from pages index
 *
 * @return  {void}
 */
function addBlockReferences(app, val, blocks, section) {
    blocks &&
        blocks.forEach((block) => {
            if (block.key === section.id) {
                if (section.type === "paragraph") {
                    createButtonElement(app, block, val);
                }
                if (section.type === "blockquote" || section.type === "code") {
                    createButtonElement(app, block, val);
                }
            }
            // Iterate each list item and add the button to items with block-ids
            if (section.type === "list") {
                section.items.forEach((item, index) => {
                    const buttons = val.querySelectorAll("li");
                    block.type = "block-list";
                    if (item.id === block.key) {
                        createButtonElement(app, block, buttons[index]);
                    }
                });
            }
        });
}
function addEmbedReferences(app, val, embeds, section) {
    embeds.forEach((embed) => {
        if (section.pos === embed.pos) {
            if (section.type === "paragraph") {
                setTimeout(() => {
                    createButtonElement(app, embed, val);
                }, 500);
            }
            if (section.type === "blockquote" || section.type === "code") {
                setTimeout(() => {
                    createButtonElement(app, embed, val);
                }, 500);
            }
        }
        // Iterate each list item and add the button to items with block-ids
        if (section.type === "list") {
            section.items.forEach((item, index) => {
                const buttons = val.querySelectorAll("li");
                if (item.pos === embed.pos) {
                    embed.type = "link-list";
                    createButtonElement(app, embed, buttons[index]);
                }
            });
        }
    });
}
/**
 * Iterate through links (includes transcluded embeds) and add a block ref button if the link has an associated block ref
 *
 * @param   {App}                     app
 * @param   {HTMLElement}             val        HTMLElement to attach the button to
 * @param   {EmbedOrLinkItem[]}       links      Array of links and embeds from pages index
 * @param   {Section}                 section    Section object from pages index
 *
 * @return  {void}
 */
function addLinkReferences(app, val, links, section) {
    links.forEach((link) => {
        if (section.type === "paragraph" && section.pos === link.pos) {
            createButtonElement(app, link, val);
        }
        // Have to iterate list items so the button gets attached to the right element
        if (section.type === "list") {
            section.items.forEach((item, index) => {
                const buttons = val.querySelectorAll("li");
                if (item.pos === link.pos) {
                    link.type = "link-list";
                    createButtonElement(app, link, buttons[index]);
                }
            });
        }
    });
}
/**
 * Adds a block ref button to each header that has an associated header link or embed
 *
 * @param   {App}               app
 * @param   {HTMLElement}       val       HTMLElement to attach the button to
 * @param   {Heading[]}         headings  Array of heading objects from pages index
 * @param   {Section}           section   Section object from pages index
 *
 * @return  {void}
 */
function addHeaderReferences(app, val, headings, section) {
    if (headings) {
        headings.forEach((header) => {
            header.pos === section.pos && createButtonElement(app, header, val);
        });
    }
}
/**
 * Add a button with the number of references to the Preview of a note
 *
 * @param   {App}               app
 * @param   {Block | Heading}   block  The block or Heading with references to generate the button for
 * @param   {HTMLElement}       val    The element to attach the button to
 *
 * @return  {void}
 */
function createButtonElement(app, block, val) {
    if (val) {
        const count = block && block.references ? block.references.length : 0;
        const normalizedKey = normalize(block.key);
        const existingButton = val.querySelector("#count");
        const countEl = createEl("button", { cls: "block-ref-count" });
        countEl.setAttribute("data-block-ref-id", block.key);
        countEl.setAttribute("id", "count");
        if (block.type === "link") {
            countEl.addClass("child-ref");
        }
        else {
            countEl.addClass("parent-ref");
        }
        countEl.innerText = count.toString();
        const { tableType } = getSettings();
        if (tableType === "basic") {
            const refs = block.references ? block.references : undefined;
            const refTable = createTable(app, val, refs);
            countEl.on("click", "button", () => {
                if (!val.children.namedItem("ref-table")) {
                    block.type === "block" && val.appendChild(refTable);
                    block.type === "header" && val.appendChild(refTable);
                    block.type === "link" && val.append(refTable);
                    block.type.includes("list") &&
                        val.insertBefore(refTable, val.children[2]);
                }
                else {
                    if (val.children.namedItem("ref-table")) {
                        val.removeChild(refTable);
                    }
                }
            });
        }
        if (tableType === "search") {
            countEl.on("click", "button", () => __awaiter(this, void 0, void 0, function* () {
                const searchEnabled = app.internalPlugins.getPluginById("global-search").enabled;
                if (!searchEnabled) {
                    new obsidian.Notice("you need to enable the core search plugin");
                }
                else {
                    const tempLeaf = app.workspace.getRightLeaf(false);
                    //Hide the leaf/pane so it doesn't show up in the right sidebar
                    tempLeaf.tabHeaderEl.hide();
                    let page;
                    let firstReference;
                    let secondReference;
                    if (block.type === "link" || block.type === "link-list") {
                        page = block.key;
                        if (block.key.includes("#") &&
                            !block.key.includes("#^")) {
                            page = block.key.split("#")[0];
                            if (block.original) {
                                firstReference = `/^#{1,6} ${regexEscape(block.original)}$/`;
                            }
                            else {
                                firstReference = `/^#{1,6} ${regexEscape(block.key.split("#")[1])}$/`;
                            }
                        }
                        if (block.key.includes("#^")) {
                            page = block.key.split("#^")[0];
                            firstReference = `^${block.key.split("#^")[1]}`;
                            if (block.key.includes("|")) {
                                firstReference = `${firstReference.split("|")[0]}"`;
                            }
                        }
                        if (!firstReference) {
                            firstReference = "";
                        }
                        secondReference = `"[[${block.key}]]"`;
                        if (block.key.includes("|")) {
                            secondReference =
                                secondReference +
                                    ` OR "[[${block.key.split("|")[0]}]]"`;
                        }
                        else {
                            secondReference =
                                secondReference + ` OR "[[${block.key}|"`;
                        }
                    }
                    if (block.type === "header") {
                        page = block.page;
                        firstReference = `/^#{1,6} ${regexEscape(block.original)}$/`;
                        secondReference = `/#${block.key}]]/`;
                    }
                    if (block.type === "block" || block.type === "block-list") {
                        page = block.page;
                        firstReference = `"^${block.key}"`;
                        secondReference = firstReference;
                    }
                    const searchQuery = `(file:("${page}.md") ${firstReference}) OR (${secondReference}) `;
                    yield tempLeaf.setViewState({
                        type: "search-ref",
                        state: {
                            query: searchQuery,
                        },
                    });
                    const search = app.workspace.getLeavesOfType("search-ref");
                    const searchElement = createSearchElement(app, search, block);
                    let searchHeight;
                    if (count === 1) {
                        searchHeight = 225;
                    }
                    else if (count === 2) {
                        searchHeight = 250;
                    }
                    else {
                        searchHeight = (count + 1) * 85;
                        if (searchHeight < 300) {
                            searchHeight = 300;
                        }
                        else if (searchHeight > 600) {
                            searchHeight = 600;
                        }
                    }
                    searchElement.setAttribute("style", "height: " + searchHeight + "px;");
                    if (!val.children.namedItem("search-ref")) {
                        search[search.length - 1].view.searchQuery;
                        // depending on the type of block the search view needs to be inserted into the DOM at different points
                        block.type === "block" &&
                            val.appendChild(searchElement);
                        block.type === "header" &&
                            val.appendChild(searchElement);
                        block.type === "link" && val.append(searchElement);
                        block.type.includes("list") &&
                            val.insertBefore(searchElement, val.children[2]);
                    }
                    else {
                        if (val.children.namedItem("search-ref")) {
                            app.workspace
                                .getLeavesOfType("search-ref")
                                .forEach((leaf) => {
                                const container = leaf.view.containerEl;
                                const dataKey = `[data-block-ref-id='${normalizedKey}']`;
                                const key = container.parentElement.querySelector(dataKey);
                                if (key) {
                                    leaf.detach();
                                }
                            });
                        }
                    }
                }
            }));
        }
        if (existingButton) {
            existingButton.remove();
        }
        count > 0 && val.prepend(countEl);
    }
}
function createSearchElement(app, search, block) {
    const searchElement = search[search.length - 1].view.containerEl;
    const normalizedKey = normalize(block.key);
    searchElement.setAttribute("data-block-ref-id", normalizedKey);
    const toolbar = searchElement.querySelector(".nav-buttons-container");
    const closeButton = createEl("button", {
        cls: "search-input-clear-button",
    });
    closeButton.on("click", "button", () => {
        app.workspace.getLeavesOfType("search-ref").forEach((leaf) => {
            const container = leaf.view.containerEl;
            const dataKey = `[data-block-ref-id='${normalizedKey}']`;
            const key = container.parentElement.querySelector(dataKey);
            if (key) {
                leaf.detach();
            }
        });
    });
    toolbar.append(closeButton);
    searchElement.setAttribute("id", "search-ref");
    return searchElement;
}
function createTable(app, val, refs) {
    const refTable = createEl("table", { cls: "ref-table" });
    refTable.setAttribute("id", "ref-table");
    const noteHeaderRow = createEl("tr").createEl("th", { text: "Note" });
    const lineHeaderRow = createEl("tr").createEl("th", {
        text: "Reference",
        cls: "reference",
    });
    const removeTable = createEl("button", { text: "x" });
    removeTable.addClass("table-close");
    lineHeaderRow.appendChild(removeTable);
    removeTable.on("click", "button", () => {
        val.removeChild(refTable);
    });
    refTable.appendChild(noteHeaderRow);
    refTable.appendChild(lineHeaderRow);
    refTable.appendChild(removeTable);
    refs &&
        refs.forEach((ref) => __awaiter(this, void 0, void 0, function* () {
            const lineContent = yield app.vault
                .cachedRead(ref.sourceFile)
                .then((content) => content.split("\n")[ref.reference.position.start.line]);
            const row = createEl("tr");
            const noteCell = createEl("td");
            const lineCell = createEl("td");
            noteCell.createEl("a", {
                cls: "internal-link",
                href: ref.sourceFile.path,
                text: ref.sourceFile.basename,
            });
            lineCell.createEl("span", { text: lineContent });
            row.appendChild(noteCell);
            row.appendChild(lineCell);
            refTable.appendChild(row);
        }));
    return refTable;
}
/**
 * if there are block reference buttons in the current view, remove them
 * used when the plugin is unloaded
 *
 * @param   {App}  app
 *
 * @return  {void}
 */
function unloadButtons(app) {
    let buttons;
    const activeLeaf = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeLeaf) {
        buttons = activeLeaf.containerEl.querySelectorAll("#count");
    }
    buttons && buttons.forEach((button) => button.remove());
}
function unloadSearchViews(app) {
    app.workspace
        .getLeavesOfType("search-ref")
        .forEach((leaf) => leaf.detach());
}
function regexEscape(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
const normalize = (str) => {
    return str.replace(/\s+|'/g, "").toLowerCase();
};

module.exports = BlockRefCounter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
