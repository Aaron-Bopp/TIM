/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const TWEET_LINK = new RegExp(/https:\/\/(?:mobile\.)?twitter\.com\/.+\/(\d+)/);
class TwitterEmbed {
    canHandle(link, settings) {
        return settings.replaceTwitterLinks && TWEET_LINK.test(link);
    }
    createEmbed(link, container) {
        this._ensureTwitterLoaded();
        const tweetId = link.match(TWEET_LINK)[1];
        container.id = `TweetContainer${tweetId}`;
        window.twttr.ready(() => {
            window.twttr.widgets.createTweet(tweetId, container);
        });
        return container;
    }
    _ensureTwitterLoaded() {
        window.twttr = (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {};
            if (d.getElementById(id))
                return t;
            js = d.createElement(s);
            js.id = id;
            js.src = "https://platform.twitter.com/widgets.js";
            fjs.parentNode.insertBefore(js, fjs);
            // Add global settings for Twitter embeds
            const meta = d.createElement("meta");
            meta.name = "twitter.dnt";
            meta.content = "on";
            d.getElementsByTagName("head")[0].appendChild(meta);
            t._e = [];
            t.ready = function (f) {
                t._e.push(f);
            };
            return t;
        })(document, "script", "twitter-wjs");
    }
}

const YOUTUBE_LINK = new RegExp(/http(?:s?):\/\/(?:www\.)?youtu(?:be\.com\/watch\?v=|\.be\/)([\w\-\_]*)(&(amp;)?‌​[\w\?‌​=]*)?/);
class YouTubeEmbed {
    canHandle(link, settings) {
        return settings.replaceYouTubeLinks && YOUTUBE_LINK.test(link);
    }
    createEmbed(link, container) {
        const wrapper = document.createElement("div");
        wrapper.classList.add("video-wrapper");
        const iframe = document.createElement("iframe");
        const videoId = link.match(YOUTUBE_LINK)[1];
        iframe.src = `https://www.youtube.com/embed/${videoId}`;
        iframe.title = "YouTube video player";
        iframe.setAttr("frameborder", "0");
        iframe.allow =
            "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture;";
        iframe.setAttr("sandbox", "allow-scripts allow-same-origin allow-presentation allow-popups");
        wrapper.appendChild(iframe);
        container.appendChild(wrapper);
        return container;
    }
}

const DEFAULT_SETTINGS = {
    replaceTwitterLinks: true,
    replaceYouTubeLinks: true,
    keepLinksInPreview: false,
    embedPlacement: "above",
    disableAutomaticEmbeds: false,
};

class SimpleEmbedsPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.embedSources = [new TwitterEmbed(), new YouTubeEmbed()];
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Loading ${this.manifest.name} v${this.manifest.version}`);
            yield this.loadSettings();
            this.addSettingTab(new SimpleEmbedPluginSettingTab(this.app, this));
            this.registerMarkdownPostProcessor((el, ctx) => {
                const anchors = el.querySelectorAll("a.external-link");
                anchors.forEach((anchor) => {
                    this._handleAnchor(anchor);
                });
            });
        });
    }
    onunload() {
        console.log(`Unloading ${this.manifest.name}`);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
            const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            (_a = view === null || view === void 0 ? void 0 : view.previewMode) === null || _a === void 0 ? void 0 : _a.rerender(true);
        });
    }
    _handleAnchor(a) {
        const isWithinText = Array.from(a.parentElement.childNodes)
            .filter((node) => {
            return node instanceof Text;
        })
            .some((text) => {
            const nbsp = new RegExp(String.fromCharCode(160), "g");
            const data = text.data.replace(nbsp, "").trim();
            return !!data;
        });
        const disableAutomaticEmbeds = this.settings.disableAutomaticEmbeds;
        const replaceWithEmbed = disableAutomaticEmbeds
            ? a.innerText.endsWith("|embed")
            : !a.innerText.endsWith("|noembed");
        a.innerText = a.innerText.replace("|noembed", "").replace("|embed", "");
        if (isWithinText && !disableAutomaticEmbeds) {
            return;
        }
        const href = a.getAttribute("href");
        const container = document.createElement("div");
        container.classList.add("embed-container");
        let embedSource = this.embedSources.find((source) => {
            return source.canHandle(href, this.settings);
        });
        if (embedSource && replaceWithEmbed) {
            const embed = embedSource.createEmbed(href, container);
            this._insertEmbed(a, embed);
        }
    }
    _insertEmbed(a, container) {
        const parent = a.parentElement;
        const keepLinksInPreview = this.settings.keepLinksInPreview;
        const placement = this.settings.embedPlacement;
        if (keepLinksInPreview && placement === "above") {
            parent.insertBefore(container, a);
        }
        else if (keepLinksInPreview && placement === "below") {
            container.insertAfter(a);
        }
        else {
            parent.replaceChild(container, a);
        }
    }
}
class SimpleEmbedPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h3", { text: "Available Embed Sources" });
        containerEl.createEl("p", {
            cls: "setting-item-description",
        }, (el) => {
            el.innerHTML =
                "Disable to prevent <em>all</em> links from source ever being turned into embeds. To disable an individual link, add <code>|noembed</code> to the link text. For example, <code>[Some description|noembed](https://twitter.com/user/status/123)</code>";
        });
        new obsidian.Setting(containerEl).setName("Twitter").addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.replaceTwitterLinks)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.replaceTwitterLinks = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("YouTube").addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.replaceYouTubeLinks)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.replaceYouTubeLinks = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "Advanced Settings" });
        new obsidian.Setting(containerEl)
            .setName("Keep links in preview")
            .setDesc("Insert embeds above the link, instead of replacing the link in the preview.")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.keepLinksInPreview)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.keepLinksInPreview = value;
                yield this.plugin.saveSettings();
                placement.setDisabled(!this.plugin.settings.keepLinksInPreview);
            }));
        });
        const placement = new obsidian.Setting(containerEl)
            .setName("Place embeds")
            .setDesc('When "Keep links in preview" is enabled, choose whether to place the embed above or below the link.')
            .addDropdown((dropdown) => {
            dropdown
                .addOptions({ above: "Above link", below: "Below link" })
                .setValue(this.plugin.settings.embedPlacement)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.embedPlacement = value;
                yield this.plugin.saveSettings();
            }));
        })
            .setDisabled(!this.plugin.settings.keepLinksInPreview);
        const fragment = new DocumentFragment();
        const div = fragment.createEl("div");
        const span = fragment.createEl("span");
        span.innerHTML =
            "Instead of automatically embedding all matching links, you must add <code>|embed</code> to the link text of each link you would like to turn into an embed. For example, <code>[Some description|embed](https://twitter.com/user/status/123)</code>";
        div.appendChild(span);
        fragment.appendChild(div);
        new obsidian.Setting(containerEl)
            .setName("Disable automatic embeds")
            .setDesc(fragment)
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.disableAutomaticEmbeds)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.disableAutomaticEmbeds = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = SimpleEmbedsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
