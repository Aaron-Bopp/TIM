/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ExtraMDcommands
});
var import_obsidian = __toModule(require("obsidian"));
var ExtraMDcommands = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "underscore-bold",
        name: "Underscore Bold",
        editorCallback: (editor, view) => this.wrapSelection("__", "__", editor)
      });
      this.addCommand({
        id: "underscore-italics",
        name: "Underscore Italics",
        editorCallback: (editor, view) => this.wrapSelection("_", "_", editor)
      });
      this.addCommand({
        id: "html-comment",
        name: "HTML Comment",
        editorCallback: (editor, view) => this.wrapSelection("<!--", "-->", editor)
      });
      this.addCommand({
        id: "html-cite",
        name: "<cite> tags",
        editorCallback: (editor, view) => this.wrapSelection("<cite>", "</cite>", editor)
      });
      this.addCommand({
        id: "html-aside",
        name: "<aside> tags",
        editorCallback: (editor, view) => this.wrapSelection("<aside>", "</aside>", editor)
      });
      this.addCommand({
        id: "multi-color-highlight-1",
        name: "Multicolor Highlight 1",
        editorCallback: (editor, view) => this.wrapSelection("_==", "==_", editor)
      });
      this.addCommand({
        id: "multi-color-highlight-2",
        name: "Multicolor Highlight 2",
        editorCallback: (editor, view) => this.wrapSelection("__==", "==__", editor)
      });
      console.log("Extra MD Commands Plugin loaded.");
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Extra MD Commands Plugin unloaded.");
    });
  }
  wrapSelection(beforeStr, afterStr, editor) {
    let selectedText = "";
    if (editor.somethingSelected())
      selectedText = editor.getSelection();
    function Cursor(pos) {
      return editor.offsetToPos(pos);
    }
    const sp = editor.posToOffset(editor.getCursor("from"));
    const len = selectedText.length;
    const blen = beforeStr.length;
    const alen = afterStr.length;
    const charsBefore = editor.getRange(Cursor(sp - blen), Cursor(sp));
    const charsAfter = editor.getRange(Cursor(sp + len), Cursor(sp + len + alen));
    const firstChars = editor.getRange(Cursor(sp), Cursor(sp + blen));
    const lastChars = editor.getRange(Cursor(sp + len - alen), Cursor(sp + len));
    if (charsBefore == beforeStr && charsAfter == afterStr) {
      editor.setSelection(Cursor(sp - blen), Cursor(sp + len + alen));
      editor.replaceSelection(selectedText);
      editor.setSelection(Cursor(sp - blen), Cursor(sp - blen + len));
    } else if (firstChars == beforeStr && lastChars == afterStr) {
      editor.replaceSelection(selectedText.slice(blen, -alen));
      editor.setSelection(Cursor(sp), Cursor(sp + len - (blen + alen)));
    } else {
      if (selectedText) {
        editor.replaceSelection(beforeStr + selectedText + afterStr);
        editor.setSelection(Cursor(sp + blen), Cursor(sp + blen + len));
      } else {
        editor.replaceSelection(beforeStr + afterStr);
        const cursor = editor.getCursor();
        cursor.ch -= alen;
        editor.setCursor(cursor);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTWFya2Rvd25WaWV3LCBQbHVnaW4sIEVkaXRvclBvc2l0aW9uLCBFZGl0b3IgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4dHJhTURjb21tYW5kcyBleHRlbmRzIFBsdWdpbiB7XHJcbiAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6IFwidW5kZXJzY29yZS1ib2xkXCIsXHJcbiAgICAgIG5hbWU6IFwiVW5kZXJzY29yZSBCb2xkXCIsXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4gdGhpc1xyXG4gICAgICAgIC53cmFwU2VsZWN0aW9uKFwiX19cIiwgXCJfX1wiLCBlZGl0b3IpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6IFwidW5kZXJzY29yZS1pdGFsaWNzXCIsXHJcbiAgICAgIG5hbWU6IFwiVW5kZXJzY29yZSBJdGFsaWNzXCIsXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4gdGhpc1xyXG4gICAgICAgIC53cmFwU2VsZWN0aW9uKFwiX1wiLCBcIl9cIiwgZWRpdG9yKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcImh0bWwtY29tbWVudFwiLFxyXG4gICAgICBuYW1lOiBcIkhUTUwgQ29tbWVudFwiLFxyXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHRoaXNcclxuICAgICAgICAud3JhcFNlbGVjdGlvbihcIjwhLS1cIixcIi0tPlwiLCBlZGl0b3IpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6IFwiaHRtbC1jaXRlXCIsXHJcbiAgICAgIG5hbWU6IFwiPGNpdGU+IHRhZ3NcIixcclxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB0aGlzXHJcbiAgICAgICAgLndyYXBTZWxlY3Rpb24oXCI8Y2l0ZT5cIixcIjwvY2l0ZT5cIiwgZWRpdG9yKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcImh0bWwtYXNpZGVcIixcclxuICAgICAgbmFtZTogXCI8YXNpZGU+IHRhZ3NcIixcclxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSA9PiB0aGlzXHJcbiAgICAgICAgLndyYXBTZWxlY3Rpb24oXCI8YXNpZGU+XCIsXCI8L2FzaWRlPlwiLCBlZGl0b3IpLFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcclxuICAgICAgaWQ6IFwibXVsdGktY29sb3ItaGlnaGxpZ2h0LTFcIixcclxuICAgICAgbmFtZTogXCJNdWx0aWNvbG9yIEhpZ2hsaWdodCAxXCIsXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4gdGhpc1xyXG4gICAgICAgIC53cmFwU2VsZWN0aW9uKFwiXz09XCIsXCI9PV9cIiwgZWRpdG9yKSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcIm11bHRpLWNvbG9yLWhpZ2hsaWdodC0yXCIsXHJcbiAgICAgIG5hbWU6IFwiTXVsdGljb2xvciBIaWdobGlnaHQgMlwiLFxyXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHRoaXNcclxuICAgICAgICAud3JhcFNlbGVjdGlvbihcIl9fPT1cIixcIj09X19cIiwgZWRpdG9yKSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nIChcIkV4dHJhIE1EIENvbW1hbmRzIFBsdWdpbiBsb2FkZWQuXCIpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb251bmxvYWQoKSB7XHJcbiAgICBjb25zb2xlLmxvZyAoXCJFeHRyYSBNRCBDb21tYW5kcyBQbHVnaW4gdW5sb2FkZWQuXCIpO1xyXG4gIH1cclxuXHJcbiAgd3JhcFNlbGVjdGlvbihiZWZvcmVTdHI6IHN0cmluZywgYWZ0ZXJTdHI6IHN0cmluZywgZWRpdG9yOiBFZGl0b3IpOiB2b2lkIHtcclxuXHJcbiAgICBsZXQgc2VsZWN0ZWRUZXh0ID0gXCJcIjtcclxuICAgIGlmIChlZGl0b3Iuc29tZXRoaW5nU2VsZWN0ZWQoKSkgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cclxuICAgIGZ1bmN0aW9uIEN1cnNvcihwb3M6IG51bWJlcik6IEVkaXRvclBvc2l0aW9uIHtcclxuICAgICAgcmV0dXJuIGVkaXRvci5vZmZzZXRUb1Bvcyhwb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERldGVjdCB3aGV0aGVyIHRoZSBzZWxlY3RlZCB0ZXh0IGlzIHN1cnJvdW5kZWQgd2l0aCBTeW50YXhcclxuICAgIC8vIElmIHRydWUsIHVucGFjayBpdCwgZWxzZSBwYWNrIHdpdGggU3ludGF4XHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGNvbnN0IHNwID0gZWRpdG9yLnBvc1RvT2Zmc2V0KGVkaXRvci5nZXRDdXJzb3IoXCJmcm9tXCIpKTsgLy8gU3RhcnRpbmcgcG9zaXRpb25cclxuICAgIGNvbnN0IGxlbiA9IHNlbGVjdGVkVGV4dC5sZW5ndGg7XHJcbiAgICBjb25zdCBibGVuID0gYmVmb3JlU3RyLmxlbmd0aDtcclxuICAgIGNvbnN0IGFsZW4gPSBhZnRlclN0ci5sZW5ndGg7XHJcblxyXG4gICAgY29uc3QgY2hhcnNCZWZvcmUgPSBlZGl0b3IuZ2V0UmFuZ2UoQ3Vyc29yKHNwIC0gYmxlbiksIEN1cnNvcihzcCkpO1xyXG4gICAgY29uc3QgY2hhcnNBZnRlciA9IGVkaXRvci5nZXRSYW5nZShDdXJzb3Ioc3AgKyBsZW4pLCBDdXJzb3Ioc3AgKyBsZW4gKyBhbGVuKSk7XHJcblxyXG4gICAgY29uc3QgZmlyc3RDaGFycyA9IGVkaXRvci5nZXRSYW5nZShDdXJzb3Ioc3ApLCBDdXJzb3Ioc3AgKyBibGVuKSk7XHJcbiAgICBjb25zdCBsYXN0Q2hhcnMgPSBlZGl0b3IuZ2V0UmFuZ2UoQ3Vyc29yKHNwICsgbGVuIC0gYWxlbiksIEN1cnNvcihzcCArIGxlbikpO1xyXG5cclxuICAgLy8gVW5kbyBzdXJyb3VuZGluZyBTeW50YXggKG91dHNpZGUgc2VsZWN0aW9uKVxyXG4gICAgaWYgKGNoYXJzQmVmb3JlID09IGJlZm9yZVN0ciAmJiBjaGFyc0FmdGVyID09IGFmdGVyU3RyKSB7XHJcbiAgICAgIGVkaXRvci5zZXRTZWxlY3Rpb24oQ3Vyc29yKHNwIC0gYmxlbiksIEN1cnNvcihzcCArIGxlbiArIGFsZW4pKTtcclxuICAgICAgZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oc2VsZWN0ZWRUZXh0KTtcclxuICAgICAgZWRpdG9yLnNldFNlbGVjdGlvbihDdXJzb3Ioc3AgLSBibGVuKSwgQ3Vyc29yKHNwIC0gYmxlbiArIGxlbikpO1xyXG5cclxuICAgLy8gVW5kbyBzdXJyb3VuZGluZyBTeW50YXggKGluc2lkZSBzZWxlY3Rpb24pXHJcbiAgICB9IGVsc2UgaWYgKGZpcnN0Q2hhcnMgPT0gYmVmb3JlU3RyICYmIGxhc3RDaGFycyA9PSBhZnRlclN0cikge1xyXG4gICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihzZWxlY3RlZFRleHQuc2xpY2UoYmxlbiwtYWxlbikpO1xyXG4gICAgICBlZGl0b3Iuc2V0U2VsZWN0aW9uKEN1cnNvcihzcCksIEN1cnNvcihzcCArIGxlbiAtIChibGVuICsgYWxlbikpKTtcclxuXHJcbiAgIC8vIFdyYXAgU3ludGF4IGFyb3VuZCBTZWxlY3Rpb25cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChzZWxlY3RlZFRleHQpIHtcclxuICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihiZWZvcmVTdHIgKyBzZWxlY3RlZFRleHQgKyBhZnRlclN0cik7XHJcbiAgICAgICAgZWRpdG9yLnNldFNlbGVjdGlvbihDdXJzb3Ioc3AgKyBibGVuKSwgQ3Vyc29yKHNwICsgYmxlbiArIGxlbikpO1xyXG4gICAvLyBObyBTZWxlY3Rpb25cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihiZWZvcmVTdHIgKyBhZnRlclN0cik7XHJcbiAgICAgICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xyXG4gICAgICAgIGN1cnNvci5jaCAtPSBhbGVuO1xyXG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3IoY3Vyc29yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTZEO0FBRTdELG9DQUE2Qyx1QkFBTztBQUFBLEVBQzVDLFNBQVM7QUFBQTtBQUNiLFdBQUssV0FBVztBQUFBLFFBQ2QsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUIsS0FDckQsY0FBYyxNQUFNLE1BQU07QUFBQTtBQUcvQixXQUFLLFdBQVc7QUFBQSxRQUNkLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCLEtBQ3JELGNBQWMsS0FBSyxLQUFLO0FBQUE7QUFHN0IsV0FBSyxXQUFXO0FBQUEsUUFDZCxJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QixLQUNyRCxjQUFjLFFBQU8sT0FBTztBQUFBO0FBR2pDLFdBQUssV0FBVztBQUFBLFFBQ2QsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUIsS0FDckQsY0FBYyxVQUFTLFdBQVc7QUFBQTtBQUd2QyxXQUFLLFdBQVc7QUFBQSxRQUNkLElBQUk7QUFBQSxRQUNKLE1BQU07QUFBQSxRQUNOLGdCQUFnQixDQUFDLFFBQWdCLFNBQXVCLEtBQ3JELGNBQWMsV0FBVSxZQUFZO0FBQUE7QUFHekMsV0FBSyxXQUFXO0FBQUEsUUFDZCxJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QixLQUNyRCxjQUFjLE9BQU0sT0FBTztBQUFBO0FBR2hDLFdBQUssV0FBVztBQUFBLFFBQ2QsSUFBSTtBQUFBLFFBQ0osTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLENBQUMsUUFBZ0IsU0FBdUIsS0FDckQsY0FBYyxRQUFPLFFBQVE7QUFBQTtBQUdsQyxjQUFRLElBQUs7QUFBQTtBQUFBO0FBQUEsRUFHVCxXQUFXO0FBQUE7QUFDZixjQUFRLElBQUs7QUFBQTtBQUFBO0FBQUEsRUFHZixjQUFjLFdBQW1CLFVBQWtCLFFBQXNCO0FBRXZFLFFBQUksZUFBZTtBQUNuQixRQUFJLE9BQU87QUFBcUIscUJBQWUsT0FBTztBQUV0RCxvQkFBZ0IsS0FBNkI7QUFDM0MsYUFBTyxPQUFPLFlBQVk7QUFBQTtBQU01QixVQUFNLEtBQUssT0FBTyxZQUFZLE9BQU8sVUFBVTtBQUMvQyxVQUFNLE1BQU0sYUFBYTtBQUN6QixVQUFNLE9BQU8sVUFBVTtBQUN2QixVQUFNLE9BQU8sU0FBUztBQUV0QixVQUFNLGNBQWMsT0FBTyxTQUFTLE9BQU8sS0FBSyxPQUFPLE9BQU87QUFDOUQsVUFBTSxhQUFhLE9BQU8sU0FBUyxPQUFPLEtBQUssTUFBTSxPQUFPLEtBQUssTUFBTTtBQUV2RSxVQUFNLGFBQWEsT0FBTyxTQUFTLE9BQU8sS0FBSyxPQUFPLEtBQUs7QUFDM0QsVUFBTSxZQUFZLE9BQU8sU0FBUyxPQUFPLEtBQUssTUFBTSxPQUFPLE9BQU8sS0FBSztBQUd2RSxRQUFJLGVBQWUsYUFBYSxjQUFjLFVBQVU7QUFDdEQsYUFBTyxhQUFhLE9BQU8sS0FBSyxPQUFPLE9BQU8sS0FBSyxNQUFNO0FBQ3pELGFBQU8saUJBQWlCO0FBQ3hCLGFBQU8sYUFBYSxPQUFPLEtBQUssT0FBTyxPQUFPLEtBQUssT0FBTztBQUFBLGVBR2pELGNBQWMsYUFBYSxhQUFhLFVBQVU7QUFDM0QsYUFBTyxpQkFBaUIsYUFBYSxNQUFNLE1BQUssQ0FBQztBQUNqRCxhQUFPLGFBQWEsT0FBTyxLQUFLLE9BQU8sS0FBSyxNQUFPLFFBQU87QUFBQSxXQUdyRDtBQUNMLFVBQUksY0FBYztBQUNoQixlQUFPLGlCQUFpQixZQUFZLGVBQWU7QUFDbkQsZUFBTyxhQUFhLE9BQU8sS0FBSyxPQUFPLE9BQU8sS0FBSyxPQUFPO0FBQUEsYUFFckQ7QUFDTCxlQUFPLGlCQUFpQixZQUFZO0FBQ3BDLGNBQU0sU0FBUyxPQUFPO0FBQ3RCLGVBQU8sTUFBTTtBQUNiLGVBQU8sVUFBVTtBQUFBO0FBQUE7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
