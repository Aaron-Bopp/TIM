'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var StatisticsPlugin = /** @class */ (function (_super) {
    __extends(StatisticsPlugin, _super);
    function StatisticsPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.statusBarItem = null;
        _this.update = obsidian.debounce(function () { _this.statusBarItem.update(); }, 100, true);
        return _this;
    }
    StatisticsPlugin.prototype.onload = function () {
        console.log('Loading vault-statistics Plugin');
        this.statusBarItem = new StatisticsStatusBarItem(this.app, this.addStatusBarItem());
        this.registerEvent(this.app.metadataCache.on('resolved', this.update));
        this.update();
    };
    return StatisticsPlugin;
}(obsidian.Plugin));
var Formatter = /** @class */ (function () {
    function Formatter() {
    }
    return Formatter;
}());
var DecimalUnitFormatter = /** @class */ (function (_super) {
    __extends(DecimalUnitFormatter, _super);
    function DecimalUnitFormatter(unit) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        _this.numberFormat = Intl.NumberFormat('en-US', { style: 'decimal' });
        return _this;
    }
    DecimalUnitFormatter.prototype.format = function (value) {
        return "".concat(this.numberFormat.format(value), " ").concat(this.unit);
    };
    return DecimalUnitFormatter;
}(Formatter));
var ScalingUnitFormatter = /** @class */ (function (_super) {
    __extends(ScalingUnitFormatter, _super);
    function ScalingUnitFormatter(numberFormat) {
        var _this = _super.call(this) || this;
        _this.numberFormat = numberFormat;
        return _this;
    }
    ScalingUnitFormatter.prototype.format = function (value) {
        var _a = this.scale(value), scaledValue = _a[0], scaledUnit = _a[1];
        return "".concat(this.numberFormat.format(scaledValue), " ").concat(scaledUnit);
    };
    return ScalingUnitFormatter;
}(Formatter));
var BytesFormatter = /** @class */ (function (_super) {
    __extends(BytesFormatter, _super);
    function BytesFormatter() {
        return _super.call(this, Intl.NumberFormat('en-US', { style: 'decimal',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2 })) || this;
    }
    BytesFormatter.prototype.scale = function (value) {
        var units = ["bytes", "KB", "MB", "GB", "TB", "PB"];
        while (value > 1024 && units.length > 0) {
            value = value / 1024;
            units.shift();
        }
        return [value, units[0]];
    };
    return BytesFormatter;
}(ScalingUnitFormatter));
var StatisticView = /** @class */ (function () {
    function StatisticView(containerEl) {
        this.containerEl = containerEl.createSpan({ cls: ["obsidian-vault-statistics--item"] });
        this.setActive(false);
    }
    StatisticView.prototype.setStatisticName = function (name) {
        this.containerEl.addClass("obsidian-vault-statistics--item-".concat(name));
        return this;
    };
    StatisticView.prototype.setFormatter = function (formatter) {
        this.formatter = formatter;
        return this;
    };
    StatisticView.prototype.setActive = function (isActive) {
        this.containerEl.removeClass("obsidian-vault-statistics--item--active");
        this.containerEl.removeClass("obsidian-vault-statistics--item--inactive");
        if (isActive) {
            this.containerEl.addClass("obsidian-vault-statistics--item--active");
        }
        else {
            this.containerEl.addClass("obsidian-vault-statistics--item--inactive");
        }
        return this;
    };
    StatisticView.prototype.refresh = function (s) {
        this.containerEl.setText(this.formatter(s));
    };
    StatisticView.prototype.getText = function () {
        return this.containerEl.getText();
    };
    return StatisticView;
}());
var StatisticsStatusBarItem = /** @class */ (function () {
    function StatisticsStatusBarItem(app, statusBarItem) {
        var _this = this;
        // raw stats
        this.statistics = { notes: 0, links: 0, files: 0, attachments: 0, size: 0 };
        // index of the currently displayed stat.
        this.displayedStatisticIndex = 0;
        this.statisticViews = [];
        this.app = app;
        this.statusBarItem = statusBarItem;
        this.statisticViews.push(new StatisticView(this.statusBarItem).
            setStatisticName("notes").
            setFormatter(function (s) { return new DecimalUnitFormatter("notes").format(s.notes); }));
        this.statisticViews.push(new StatisticView(this.statusBarItem).
            setStatisticName("attachments").
            setFormatter(function (s) { return new DecimalUnitFormatter("attachments").format(s.attachments); }));
        this.statisticViews.push(new StatisticView(this.statusBarItem).
            setStatisticName("files").
            setFormatter(function (s) { return new DecimalUnitFormatter("files").format(s.files); }));
        this.statisticViews.push(new StatisticView(this.statusBarItem).
            setStatisticName("links").
            setFormatter(function (s) { return new DecimalUnitFormatter("links").format(s.links); }));
        this.statisticViews.push(new StatisticView(this.statusBarItem).
            setStatisticName("size").
            setFormatter(function (s) { return new BytesFormatter().format(s.size); }));
        this.statusBarItem.onClickEvent(function () { _this.onclick(); });
    }
    StatisticsStatusBarItem.prototype.refresh = function () {
        var _this = this;
        this.statisticViews.forEach(function (view, i) {
            view.setActive(_this.displayedStatisticIndex == i).refresh(_this.statistics);
        });
        this.statusBarItem.title = this.statisticViews.map(function (view) { return view.getText(); }).join("\n");
    };
    StatisticsStatusBarItem.prototype.onclick = function () {
        this.displayedStatisticIndex = (this.displayedStatisticIndex + 1) % this.statisticViews.length;
        this.refresh();
    };
    StatisticsStatusBarItem.prototype.update = function () {
        var _this = this;
        var statistics = { notes: 0, links: 0, files: 0, attachments: 0, size: 0 };
        this.app.vault.getFiles().forEach(function (f) {
            var _a, _b;
            statistics.files += 1;
            if (f.extension === 'md') {
                statistics.notes += 1;
            }
            else {
                statistics.attachments += 1;
            }
            statistics.links += ((_b = (_a = _this.app.metadataCache.getCache(f.path)) === null || _a === void 0 ? void 0 : _a.links) === null || _b === void 0 ? void 0 : _b.length) || 0;
            statistics.size += f.stat.size;
        });
        this.statistics = statistics;
        this.refresh();
    };
    return StatisticsStatusBarItem;
}());

module.exports = StatisticsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
