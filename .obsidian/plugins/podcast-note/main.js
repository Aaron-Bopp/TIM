/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_SETTINGS = {
    podcastTemplate: "---\ntags: [Podcast]\ndate: {{Date}}\n---\n# {{Title}}\n![]({{ImageURL}})\n## Description:\n{{Description}}\n-> [Podcast Link]({{PodcastURL}})\n\n## Notes:\n",
    atCursor: false,
    fileName: "{{Title}} - Notes",
    folder: ""
};
var hosts = {
    "spotify": "open.spotify.com",
    "apple": "podcasts.apple.com",
    "google": "podcasts.google.com",
    "pocketcasts": "pca.st",
    "airr": "www.airr.io",
    "overcast": "overcast.fm",
    "castbox": "castbox.fm",
    "castro": "castro.fm",
    "youtube": "youtube.com"
};
var PodcastNote = /** @class */ (function (_super) {
    __extends(PodcastNote, _super);
    function PodcastNote() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PodcastNote.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('loading plugin PodcastNote');
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        this.addSettingTab(new PodcastNoteSettingTab(this.app, this));
                        this.addCommand({
                            id: 'add-podcast-note',
                            name: 'Add Podcast Note',
                            checkCallback: function (checking) {
                                var leaf = _this.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        new PodcastNoteModal(_this.app, _this).open();
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addCommand({
                            id: 'add-podcast-notes-from-selection',
                            name: 'Add Podcast Notes from selection',
                            editorCallback: function () {
                                _this.addNotesFromList();
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.onunload = function () {
        console.log('unloading plugin PodcastNote');
    };
    PodcastNote.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{}, DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.getAirrQuoteTranscript = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var html, root;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getHtml(url)];
                    case 1:
                        html = _a.sent();
                        root = this.getParsedHtml(html);
                        root.querySelector(".quote_contextContainer__2afpx");
                        console.log(root);
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.getHtml = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, obsidian.request({ url: url, method: "GET" })];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        reason_1 = _a.sent();
                        this.podcastError(url, "Couldnt load podcast data. No internet connection?");
                        console.log("No connection, reason: \n" + reason_1);
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.addNotesFromList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var editor, selection, podcasts, _i, podcasts_1, podcast, filename;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        editor = this.getEditor();
                        if (!editor) return [3 /*break*/, 5];
                        selection = editor.getSelection();
                        podcasts = this.getPodcastsFromSelection(selection);
                        _i = 0, podcasts_1 = podcasts;
                        _a.label = 1;
                    case 1:
                        if (!(_i < podcasts_1.length)) return [3 /*break*/, 4];
                        podcast = podcasts_1[_i];
                        return [4 /*yield*/, this.addPodcastNote(podcast.url)];
                    case 2:
                        filename = _a.sent();
                        selection = selection.replace(podcast.markdown, "[[" + filename + podcast.linkTitle + "]]");
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        editor.replaceSelection(selection);
                        return [3 /*break*/, 6];
                    case 5:
                        new obsidian.Notice("You have to be in the editor to do this.");
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.addPodcastNote = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, title, podcastString;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getTitleAndPodcastString(url)];
                    case 1:
                        _a = _b.sent(), title = _a.title, podcastString = _a.podcastString;
                        return [2 /*return*/, this.addNewNote(podcastString, title)];
                }
            });
        });
    };
    PodcastNote.prototype.insertPodcastNote = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, podcastString;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getTitleAndPodcastString(url)];
                    case 1:
                        _a = _b.sent(), podcastString = _a.podcastString;
                        this.addAtCursor(podcastString);
                        return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.getTitleAndPodcastString = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var html, root;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        new obsidian.Notice("Loading Podcast Info");
                        if (!this.checkPodcastURL(url)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getHtml(url)];
                    case 1:
                        html = _a.sent();
                        if (!html) return [3 /*break*/, 3];
                        root = this.getParsedHtml(html);
                        return [4 /*yield*/, this.getMetaDataForPodcast(root, url)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [2 /*return*/, { "title": "", "podcastString": "" }];
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        this.podcastError(url, "This podcast service is not supported or the url is invalid.");
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    PodcastNote.prototype.getPodcastsFromSelection = function (selection) {
        var reg = /\[([^\]]*)\]\(([^\)]+)\)/g;
        var m;
        var podcasts = [];
        // Search for markdown links
        while ((m = reg.exec(selection)) !== null) {
            var url = m[2];
            var linkTitle = m[1];
            podcasts.push({ "url": url, "linkTitle": " | " + linkTitle, "markdown": m[0] });
        }
        // Search for pure links
        var words = selection.split(/[\r\n|\n|\r|\s]/);
        console.log(words);
        words.forEach(function (word) {
            if (word.startsWith("https://")) {
                podcasts.push({ "url": word, "linkTitle": "", "markdown": word });
            }
        });
        return podcasts;
    };
    PodcastNote.prototype.podcastError = function (url, msg) {
        new obsidian.Notice(msg);
        this.addNewNote("# Notes on podcast\n-> [Podcast Link](" + url + ")\n", "Default");
    };
    PodcastNote.prototype.checkPodcastURL = function (url) {
        if (new RegExp(Object.values(hosts).join("|")).test(url)) {
            return true;
        }
        else {
            new obsidian.Notice("This is not a valid podcast Service.");
            return false;
        }
    };
    PodcastNote.prototype.getParsedHtml = function (s) {
        var parser = new DOMParser();
        var root = parser.parseFromString(s, "text/html");
        return root;
    };
    PodcastNote.prototype.getEpsiodeUUID = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getHtml(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PodcastNote.prototype.getMetaDataForPodcast = function (root, url) {
        return __awaiter(this, void 0, void 0, function () {
            var date, title, desc, imageLink, showNotes, episodeDate, artwork, script, regex, uuid, json_notes, _a, _b, podcastString;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        date = obsidian.moment().format("YYYY-MM-DD");
                        title = "Title not found";
                        desc = "Description not found";
                        imageLink = "";
                        showNotes = "";
                        episodeDate = "";
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 9, , 10]);
                        if (!url.includes(hosts.apple)) return [3 /*break*/, 2];
                        title = root.querySelector("meta[property='og:title']").getAttribute('content');
                        desc = root.querySelector(".product-hero-desc__section").querySelector("p").innerHTML;
                        artwork = root.querySelector(".we-artwork__source");
                        imageLink = artwork.getAttribute('srcset').split(" ")[0];
                        return [3 /*break*/, 8];
                    case 2:
                        if (!url.includes(hosts.airr)) return [3 /*break*/, 3];
                        title = root.querySelector("meta[property='og:title']").getAttribute('content');
                        desc = root.querySelector("meta[name='og:description']").getAttribute('content');
                        imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
                        return [3 /*break*/, 8];
                    case 3:
                        if (!url.includes(hosts.overcast)) return [3 /*break*/, 4];
                        title = root.querySelector("meta[name='og:title']").getAttribute('content');
                        desc = root.querySelector("meta[name='og:description']").getAttribute('content');
                        imageLink = root.querySelector("meta[name='og:image']").getAttribute('content');
                        return [3 /*break*/, 8];
                    case 4:
                        if (!url.includes(hosts.youtube)) return [3 /*break*/, 5];
                        title = root.querySelector("title").innerHTML;
                        desc = root.querySelector('#watch7-content > meta:nth-child(3)').getAttribute('content');
                        //desc = root.querySelector(".ytd-video-secondary-info-renderer").innerHTML;
                        imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
                        return [3 /*break*/, 8];
                    case 5:
                        if (!url.includes(hosts.pocketcasts)) return [3 /*break*/, 7];
                        title = root.querySelector("meta[property='og:title']").getAttribute('content');
                        script = root.querySelector("body > script").innerHTML;
                        regex = /EPISODE_UUID = '(.*)'/gm;
                        uuid = regex.exec(script)[1];
                        _b = (_a = JSON).parse;
                        return [4 /*yield*/, this.getEpsiodeUUID("https://cache.pocketcasts.com/share/episode/show_notes/" + uuid)];
                    case 6:
                        json_notes = _b.apply(_a, [_d.sent()])["show_notes"];
                        showNotes = obsidian.htmlToMarkdown(json_notes);
                        desc = root.querySelector("meta[property='og:description']").getAttribute('content');
                        episodeDate = root.querySelector("#episode_date").innerHTML;
                        imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
                        return [3 /*break*/, 8];
                    case 7:
                        if (url.includes(hosts.castro)) {
                            title = root.querySelector("meta[property='og:title']").getAttribute('content');
                            desc = root.querySelector("meta[property='og:description']").getAttribute('content');
                            imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
                            showNotes = obsidian.htmlToMarkdown(root.querySelector(".co-supertop-castro-show-notes").innerHTML);
                        }
                        else {
                            title = root.querySelector("meta[property='og:title']").getAttribute('content');
                            desc = root.querySelector("meta[property='og:description']").getAttribute('content');
                            imageLink = root.querySelector("meta[property='og:image']").getAttribute('content');
                        }
                        _d.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        _d.sent();
                        console.log("Error parsing: " + url);
                        return [3 /*break*/, 10];
                    case 10:
                        podcastString = this.applyTemplate(title, imageLink, desc, showNotes, episodeDate, date, url);
                        return [2 /*return*/, { "podcastString": podcastString, "title": title }];
                }
            });
        });
    };
    PodcastNote.prototype.applyTemplate = function (title, imageLink, desc, showNotes, episodeDate, dateString, podcastLink) {
        var podcastTemplate = this.settings.podcastTemplate;
        podcastTemplate = podcastTemplate
            .replace(/{{Title}}/g, title)
            .replace(/{{ImageURL}}/g, imageLink)
            .replace(/{{Description}}/g, desc)
            .replace(/{{Date}}/g, dateString)
            .replace(/{{Timestamp}}/g, Date.now().toString())
            .replace(/{{PodcastURL}}/g, podcastLink)
            .replace(/{{ShowNotes}}/g, showNotes)
            .replace(/{{EpisodeDate}}/g, episodeDate);
        return podcastTemplate;
    };
    PodcastNote.prototype.addAtCursor = function (s) {
        var editor = this.getEditor();
        if (editor) {
            var currentLine = editor.getCursor();
            editor.replaceRange(s, currentLine, currentLine);
        }
        else {
            new obsidian.Notice("You have to be in the editor to do this.");
        }
    };
    PodcastNote.prototype.getEditor = function () {
        var mdView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        return mdView.editor;
    };
    PodcastNote.prototype.addNewNote = function (s, title) {
        var fileName = this.settings.fileName
            .replace(/{{Title}}/g, title)
            .replace(/{{Timestamp}}/g, Date.now().toString())
            .replace(/{{Date}}/g, obsidian.moment().format("YYYY-MM-DD"));
        fileName = fileName.replace(/[\\/:"*?<>|]*/g, '');
        this.app.vault.create(this.settings.folder + "/" + fileName + ".md", s);
        return fileName;
    };
    return PodcastNote;
}(obsidian.Plugin));
var PodcastNoteModal = /** @class */ (function (_super) {
    __extends(PodcastNoteModal, _super);
    function PodcastNoteModal(app, plugin) {
        var _this = _super.call(this, app) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteModal.prototype.onOpen = function () {
        var _this = this;
        var contentEl = this.contentEl;
        contentEl.createEl("h3", { text: "Enter podcast URL:" });
        var input = contentEl.createEl("input", { type: "text" });
        contentEl.createEl("br");
        contentEl.createEl("br");
        var button = contentEl.createEl("button", { text: "Add Podcast Note" });
        button.addEventListener("click", function () {
            var url = input.value;
            if (_this.plugin.settings.atCursor) {
                _this.plugin.insertPodcastNote(url);
            }
            else {
                _this.plugin.addPodcastNote(url);
            }
            _this.close();
        });
    };
    PodcastNoteModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return PodcastNoteModal;
}(obsidian.Modal));
var PodcastNoteSettingTab = /** @class */ (function (_super) {
    __extends(PodcastNoteSettingTab, _super);
    function PodcastNoteSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    PodcastNoteSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Podcast Note' });
        new obsidian.Setting(containerEl)
            .setName('Template')
            .setDesc("you can define your own template. Available placeholders are: {{Title}}, {{ImageURL}}, {{Description}}, {{ShowNotes}}, {{EpisodeDate}}, {{PodcastURL}}, {{Date}}, {{Timestamp}}")
            .addTextArea(function (textarea) {
            textarea
                .setValue(_this.plugin.settings.podcastTemplate)
                .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.podcastTemplate = textarea.getValue();
                            return [4 /*yield*/, this.plugin.saveSettings()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
            textarea.inputEl.rows = 10;
            textarea.inputEl.cols = 35;
        });
        new obsidian.Setting(containerEl)
            .setName('Folder')
            .setDesc('New Podcast Notes will be saved here (default: Vault folder)')
            .addTextArea(function (textarea) { return textarea
            .setValue(_this.plugin.settings.folder)
            .setPlaceholder("example: Podcasts")
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.folder = textarea.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Filename template')
            .setDesc('Filename template when "New note" is selected. Available placeholders are {{Title}}, {{Timestamp}}, {{Date}}')
            .addTextArea(function (textarea) { return textarea
            .setValue(_this.plugin.settings.fileName)
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.fileName = textarea.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        new obsidian.Setting(containerEl)
            .setName('Insert at cursor')
            .setDesc('Insert podcast note at cursor (default: create new note)')
            .addToggle(function (toggle) { return toggle
            .setValue(_this.plugin.settings.atCursor)
            .onChange(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.plugin.settings.atCursor = toggle.getValue();
                        return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }); });
        containerEl.createEl('hr');
        containerEl.createEl('p', { text: "Supported podcast services:" });
        var ul = containerEl.createEl('ul');
        ul.createEl("li", { text: "Apple" });
        ul.createEl("li", { text: "Spotify" });
        ul.createEl("li", { text: "Google" });
        ul.createEl("li", { text: "Pocket Casts" });
        ul.createEl("li", { text: "Airr" });
        ul.createEl("li", { text: "Overcast" });
        ul.createEl("li", { text: "Castro" });
        ul.createEl("li", { text: "YouTube" });
    };
    return PodcastNoteSettingTab;
}(obsidian.PluginSettingTab));

module.exports = PodcastNote;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
