/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ExtraMDHTMLSyntax
});
var import_obsidian = __toModule(require("obsidian"));
var ExtraMDHTMLSyntax = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "underscore-bold",
        name: "Underscore Bold",
        editorCallback: (editor, view) => this.wrapSelection("__", "__", editor)
      });
      this.addCommand({
        id: "underscore-italics",
        name: "Underscore Italics",
        editorCallback: (editor, view) => this.wrapSelection("_", "_", editor)
      });
      this.addCommand({
        id: "html-comment",
        name: "HTML Comment",
        editorCallback: (editor, view) => this.wrapSelection("<!--", "-->", editor)
      });
      this.addCommand({
        id: "html-cite",
        name: "<cite> tags",
        editorCallback: (editor, view) => this.wrapSelection("<cite>", "</cite>", editor)
      });
      this.addCommand({
        id: "html-aside",
        name: "<aside> tags",
        editorCallback: (editor, view) => this.wrapSelection("<aside>", "</aside>", editor)
      });
      this.addCommand({
        id: "multi-color-highlight-1",
        name: "Multicolor Highlight 1",
        editorCallback: (editor, view) => this.wrapSelection("*==", "==*", editor)
      });
      this.addCommand({
        id: "multi-color-highlight-2",
        name: "Multicolor Highlight 2",
        editorCallback: (editor, view) => this.wrapSelection("**==", "==**", editor)
      });
      console.log("Extra MD & HTML Syntax Plugin loaded.");
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("Extra MD & HTML Syntax Plugin unloaded.");
    });
  }
  wrapSelection(beforeStr, afterStr, editor) {
    let selectedText = "";
    if (editor.somethingSelected())
      selectedText = editor.getSelection();
    function Cursor(pos) {
      return editor.offsetToPos(pos);
    }
    const sp = editor.posToOffset(editor.getCursor("from"));
    const len = selectedText.length;
    const blen = beforeStr.length;
    const alen = afterStr.length;
    const charsBefore = editor.getRange(Cursor(sp - blen), Cursor(sp));
    const charsAfter = editor.getRange(Cursor(sp + len), Cursor(sp + len + alen));
    const firstChars = editor.getRange(Cursor(sp), Cursor(sp + blen));
    const lastChars = editor.getRange(Cursor(sp + len - alen), Cursor(sp + len));
    if (charsBefore == beforeStr && charsAfter == afterStr) {
      editor.setSelection(Cursor(sp - blen), Cursor(sp + len + alen));
      editor.replaceSelection(selectedText);
      editor.setSelection(Cursor(sp - blen), Cursor(sp - blen + len));
    } else if (firstChars == beforeStr && lastChars == afterStr) {
      editor.replaceSelection(selectedText.slice(blen, -alen));
      editor.setSelection(Cursor(sp), Cursor(sp + len - (blen + alen)));
    } else {
      if (selectedText) {
        editor.replaceSelection(beforeStr + selectedText + afterStr);
        editor.setSelection(Cursor(sp + blen), Cursor(sp + blen + len));
      } else {
        editor.replaceSelection(beforeStr + afterStr);
        const cursor = editor.getCursor();
        cursor.ch -= alen;
        editor.setCursor(cursor);
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
